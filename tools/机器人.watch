设置
{
	主程序
	{
		描述: "仓鼠跑酷开拓者, by喜欢跑酷的小伙伴们. (代码:9ZDS3,会不定期更新,保存代码,不要保存预设),ver 2.43加入超级跳模式 ! ver2.50加入传送点 ver3.0加入拿小球模式  直接更换地图即可游玩不同点位 更多跑酷点位和教学前往熔火工坊查看  其他合集代码:G7V27 | 13GT0R  通关教学:b站up:Stan_sin"
		模式名称: "仓鼠跑酷"
	}

	大厅
	{
		比赛语音聊天: 启用
		玩家上限 队伍1: 6
		玩家上限 队伍2: 0
		观战者人数上限: 12
		返回大厅: 从不
		队列中的玩家可以加入: 是
	}

	模式
	{
		团队死斗
		{
			启用地图
			{
				马莱温多
			}
		}

		突击模式
		{
			启用地图
			{
				66号公路
				伊利奥斯
				圣诞节国王大道
				好莱坞
				沃斯卡娅工业区
				监测站：直布罗陀
				花村
			}
		}

		综合
		{
			允许切换英雄: 关闭
			复生时间: 5%
			急救包刷新: 禁用
			消灭提示: 关闭
			消灭镜头: 关闭
			游戏模式开始: 即时
			英雄限制: 关闭
			随机英雄复生: 开启
		}
	}

	英雄
	{
		综合
		{
			无需装弹: 开启
			终极技能充能速度: 10%
			终极技能自动充能速度: 0%
			重生时终极技能充能完毕: 开启

			破坏球
			{
				终极技能（地雷禁区）: 关闭
				重力坠击 冷却时间: 0%
			}

			启用英雄
			{
				破坏球
			}
		}
	}

	地图工坊
	{
		小球不透明度: 109
		小球判定大小: 2.200
		小球显示大小: 2.500
		小球红: 255
		小球绿: 105
		小球蓝: 180
		是否允许开拓: 开启
		目标点圈不透明度: 161
		目标点圈大小: 1.800
		起飞点圈不透明度: 94
		跳关提醒: 关闭
	}

}


变量
{
	全局:
		0: Fields
		1: Distance_Threshold
		2: Pole_Mark
		3: Heros
		4: Heros_Safe
		5: LControl
		6: CreateBotTeam1
		7: CreateBotTeam2
		8: Balance
		9: CreateBotCntT1
		10: CreateBotCntT2
		11: CreateBotField1
		12: CreateBotField2
		13: CreateBotFlag1
		14: CreateBotFlag2
		15: PlayerQuotaTeam1
		16: PlayerQuotaTeam2
		17: CloneQuotaLimit1
		18: CloneQuotaLimit2

	玩家:
		0: CloneCnt
		1: Excess_Bot
		2: Tmp_Array
		3: Health_Point
		4: Ult_Charge
		5: Owner
		6: Offset
        7: Bot
		8: start_build
		9: bot_position
		10: player_position
		11: bot_state
		12: speed
}

规则("Debug")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) != 真;
	}

	动作
	{
		等待(2, 无视条件);
		创建HUD文本(事件玩家, 自定义字符串("firing secondary"), 正在使用辅助武器(事件玩家), 无, 右边, -11, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(事件玩家, 自定义字符串("cooldown secondary"), 技能冷却时间(事件玩家, 按钮(辅助攻击模式)), 无, 右边, -10, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(事件玩家, 自定义字符串("held secondary"), 按钮被按下(事件玩家, 按钮(辅助攻击模式)), 无, 右边, -9, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(事件玩家, 自定义字符串("offset"), 事件玩家.Bot.Offset, 无, 右边, -8, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(事件玩家, 自定义字符串("distance"), 相距距离(所选位置(事件玩家.Bot), 所选位置(事件玩家.Bot.Owner)), 无, 右边, -7, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(事件玩家, 自定义字符串("设置机器人速度"), 事件玩家.speed, 无, 右边, -6, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(事件玩家, 自定义字符串("机器人速度"), 速度(事件玩家.Bot), 无, 右边, -5, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(事件玩家, 自定义字符串("玩家速度"), 速度(事件玩家), 无, 右边, -4, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(事件玩家, 自定义字符串("机器人阈值"), 阈值(事件玩家.Bot), 无, 右边, -3, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(事件玩家, 自定义字符串("玩家阈值"), 阈值(事件玩家), 无, 右边, -2, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(事件玩家, 自定义字符串("bot_state"), 事件玩家.bot_state, 无, 右边, -1, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
	}
}

规则("蹲+E+左/右/近战, 控制音调")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		在地面上(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
		(按钮被按下(事件玩家, 按钮(近身攻击)) || 按钮被按下(事件玩家, 按钮(主要攻击模式)) || 按钮被按下(事件玩家, 按钮(辅助攻击模式))) == 真;
	}

	动作
	{
		If(按钮被按下(事件玩家, 按钮(主要攻击模式)) && 事件玩家.speed < 20);
			事件玩家.speed += 0.010;
			等待(0.016, 无视条件);
			等待(0.500, 当为“假”时中止);
			While(按钮被按下(事件玩家, 按钮(主要攻击模式)) && 事件玩家.speed < 20);
				事件玩家.speed += 0.010;
				等待(0.016, 无视条件);
				等待(0.030, 当为“假”时中止);
			End;
		Else If(按钮被按下(事件玩家, 按钮(辅助攻击模式)) && 事件玩家.speed > 0.500);
			事件玩家.speed -= 0.010;
			等待(0.016, 无视条件);
			等待(0.500, 当为“假”时中止);
			While(按钮被按下(事件玩家, 按钮(辅助攻击模式)) && 事件玩家.speed > 0.500);
				事件玩家.speed -= 0.010;
				等待(0.016, 无视条件);
				等待(0.030, 当为“假”时中止);
			End;
		Else If(按钮被按下(事件玩家, 按钮(近身攻击)));
			小字体信息(事件玩家, 自定义字符串("长按２秒后恢复默认速度"));
			等待(2, 当为“假”时中止);
			事件玩家.speed = 10;
			小字体信息(事件玩家, 自定义字符串("已恢复默认速度"));
		End;
	}
}

规则("开关建造")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
	}

	动作
	{
		If(事件玩家.start_build == 1);
			事件玩家.start_build = 0;
			设置目标点描述(所有玩家(所有队伍), 自定义字符串("按Q开关机器人前进，按F互动设置出生点"), 可见和字符串);
		Else;
			事件玩家.start_build = 1;
			设置目标点描述(事件玩家, 自定义字符串("左键设置自身位置，右键设置敌人位置"), 可见和字符串);
			小字体信息(事件玩家, 自定义字符串("左键设置自身位置，右键设置敌人位置"));
		End;
		等待(0.016, 无视条件);
		设置辅助攻击模式启用(事件玩家, 事件玩家.start_build ? 假 : 真);
		小字体信息(事件玩家, 事件玩家.start_build ? 字符串("{0} {1}", 字符串("开启"), 字符串("建造")) : 字符串("{0} {1}", 字符串("停止"), 字符串("建造")));
	}
}

规则("建造")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.start_build == 真;
		(按钮被按下(事件玩家, 按钮(主要攻击模式)) || 按钮被按下(事件玩家, 按钮(辅助攻击模式))) == 真;
	}

	动作
	{
		If(按钮被按下(事件玩家, 按钮(主要攻击模式)));
			事件玩家.player_position = 射线命中位置(地图矢量(矢量(0, 2, 0), 事件玩家, 旋转并转换), 地图矢量(矢量(0, 2, 0), 事件玩家, 旋转并转换) + 面朝方向(事件玩家) * 100, 无, 事件玩家, 真);
		Else If(按钮被按下(事件玩家, 按钮(辅助攻击模式)));
			事件玩家.bot_position = 假;
			等待(0.016, 无视条件);
			事件玩家.bot_position = 射线命中位置(地图矢量(矢量(0, 2, 0), 事件玩家, 旋转并转换), 地图矢量(矢量(0, 2, 0), 事件玩家, 旋转并转换) + 面朝方向(事件玩家) * 100, 无, 事件玩家, 真);
		End;
	}
}

规则("传送")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		存活(事件玩家) == 真;
		事件玩家.Owner != 无;
		事件玩家.Owner.bot_position != 无;
	}

	动作
	{
		停止定向阈值(所有玩家(所有队伍));
		等待(0.050, 无视条件);
		传送(事件玩家, 事件玩家.Owner.bot_position);
	}
}

规则("Create Clones Team 1")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		事件玩家.speed = 10;
		设置不可见(事件玩家, 全部);
        生成机器人(英雄(破坏球), 队伍2, 0, 目标位置(对象索引), 与此角度的相对方向(90, 0));
        事件玩家.Bot = 所有玩家(队伍2)[数组值的索引(所有玩家(队伍1), 事件玩家)];
        所有玩家(队伍2)[数组值的索引(所有玩家(队伍1), 事件玩家)].Owner = 事件玩家;
		创建光束效果(事件玩家.start_build?事件玩家:无, 有益光束, 地图矢量(矢量(0, 2, 0), 事件玩家, 旋转并转换), 地图矢量(矢量(0, 2, 0), 事件玩家, 旋转并转换) + 面朝方向(事件玩家) * 100, 颜色(白色),
			可见，位置和半径);
		创建效果(事件玩家.start_build?事件玩家:无, 球体, 颜色(白色), 射线命中位置(地图矢量(矢量(0, 2, 0), 事件玩家, 旋转并转换), 地图矢量(矢量(0, 2, 0), 事件玩家, 旋转并转换) + 面朝方向(事件玩家)
			* 100, 无, 事件玩家, 真), 0.250, 可见，位置和半径);
		创建效果(事件玩家, 球体, 颜色(蓝色), 事件玩家.bot_position, 0.250, 可见，位置和半径);
		创建效果(事件玩家, 球体, 颜色(绿色), 事件玩家.player_position, 0.250, 可见，位置和半径);
		
    }
}

规则("按Q重置tp")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		事件玩家.bot_position == 真;
	}

	动作
	{
		设置状态(事件玩家.Bot, 无, 定身, 0.050);
		施加推力(事件玩家.Bot, 速率(事件玩家) * 1, -1, 至地图, 取消相反运动);
		停止定向阈值(事件玩家.Bot);
		等待(0.050, 无视条件);
		传送(事件玩家.Bot, 事件玩家);
		事件玩家.bot_state = 1;
	}
}

规则("按E施加推力")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
		事件玩家.bot_position == 真;
		事件玩家.bot_state == 1;
	}

	动作
	{
		事件玩家.bot_state = 0;
		施加推力(事件玩家.Bot, 面朝方向(事件玩家), 事件玩家.speed, 至地图, 取消相反运动);
	}
}

规则("按R定向阈值")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		事件玩家.bot_position == 真;
		事件玩家.bot_state == 1;
	}

	动作
	{
		事件玩家.bot_state = 2;
		开始定向阈值(事件玩家.Bot, 面朝方向(事件玩家), 事件玩家.speed, 至地图, 添加至现有阈值, 方向和幅度);
	}
}

规则("松R停止定向阈值")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		事件玩家.bot_position == 真;
		事件玩家.bot_state == 2;
	}

	动作
	{
		停止定向阈值(事件玩家.Bot);
		事件玩家.bot_state = 1;
	}
}

禁用 规则("按W定向阈值")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		Z方向分量(阈值(事件玩家)) >= 0.100;
		事件玩家.bot_position == 真;
		事件玩家.bot_state == 1;
	}

	动作
	{
		事件玩家.bot_state = 3;
		开始定向阈值(事件玩家.Bot, 面朝方向(事件玩家), 事件玩家.speed, 至地图, 添加至现有阈值, 方向和幅度);
	}
}

禁用 规则("松W停止定向阈值")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		Z方向分量(阈值(事件玩家)) < 0.100;
		事件玩家.bot_position == 真;
		事件玩家.bot_state == 3;
	}

	动作
	{
		停止定向阈值(事件玩家.Bot);
		事件玩家.bot_state = 1;
	}
}


规则("定向阈值")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{ 
		(绝对值(Z方向分量(阈值(事件玩家))) > 0.100 || 绝对值(X方向分量(阈值(事件玩家))) > 0.100) == 真;
		事件玩家.bot_position == 真;
		事件玩家.bot_state == 1;
	}

	动作
	{
		事件玩家.bot_state = 4;
		开始定向阈值(事件玩家.Bot, 矢量(X方向分量(阈值(事件玩家)), 0, Z方向分量(阈值(事件玩家))), 速度(事件玩家) / 10, 至玩家, 添加至现有阈值, 方向和幅度);
	}
}

规则("松W停止定向阈值")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		(绝对值(Z方向分量(阈值(事件玩家))) > 0.100 || 绝对值(X方向分量(阈值(事件玩家))) > 0.100) == 假;
		事件玩家.bot_position == 真;
		事件玩家.bot_state == 4;
	}

	动作
	{
		停止定向阈值(事件玩家.Bot);
		事件玩家.bot_state = 1;
	}
}


规则("Bots rearranged: Set offsets")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		对全部为”真“(所有玩家(所在队伍(事件玩家)), 已重生(当前数组元素)) == 真;
		正在交流(事件玩家.Owner, 集合) == 假;
	}

	动作
	{
		事件玩家.Offset = 最大生命值(事件玩家.Owner) ^ 0.090 * 与此角度的相对方向(45 - 90 * 数组值的索引(已过滤的数组(所有玩家(所在队伍(事件玩家)), 当前数组元素.Owner == 事件玩家.Owner), 事件玩家),
			0);
	}
}

禁用 规则("Crash-Safe Throttle (Doesn't use NWP, clones are able to jump off ledges)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		事件玩家.Offset != 假;
	}

	动作
	{
		开始定向阈值(事件玩家, 方向(所选位置(事件玩家), 地图矢量(事件玩家.Offset, 事件玩家.Owner, 旋转并转换)) * 全局.Pole_Mark, 较大(0, 较小(1, 取整(相距距离(全局.Pole_Mark * 所选位置(事件玩家),
			地图矢量(事件玩家.Offset, 事件玩家.Owner, 旋转并转换) * 全局.Pole_Mark) - 0.250, 上))), 至地图, 添加至现有阈值, 方向和幅度);
	}
}

禁用 规则("Crash-Safe Teleport (Doesn't use NWP, but it's short ranged)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		已重生(事件玩家) == 真;
		存活(事件玩家) == 真;
		事件玩家.Owner != 假;
		存活(事件玩家.Owner) == 真;
		在重生室中(事件玩家.Owner) == 假;
		具有状态(事件玩家, 沉睡) == 假;
		具有状态(事件玩家, 击倒) == 假;
		具有状态(事件玩家, 冰冻) == 假;
		具有状态(事件玩家, 定身) == 假;
		具有状态(事件玩家, 击晕) == 假;
		相距距离(所选位置(事件玩家), 所选位置(事件玩家.Owner)) > 最大生命值(事件玩家.Owner) ^ 0.300;
		在视线内(眼睛位置(事件玩家), 地图矢量(事件玩家.Offset, 事件玩家.Owner, 旋转并转换) + (眼睛位置(事件玩家.Owner) - 所选位置(事件玩家.Owner)), 屏障不会阻挡视线) == 假;
	}

	动作
	{
		传送(事件玩家, 所选位置(事件玩家.Owner));
	}
}

规则("Bot: Press Secondary Fire")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		存活(事件玩家) == 真;
		按钮被按下(事件玩家.Owner, 按钮(辅助攻击模式)) == 真;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
	}

	动作
	{
		开始按下按钮(事件玩家, 按钮(辅助攻击模式));
	}
}


规则("Bot created: Set aimbot")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
	}

	动作
	{
		禁用 开始朝向(事件玩家, 方向(眼睛位置(事件玩家), 射线命中位置(眼睛位置(事件玩家.Owner), 眼睛位置(事件玩家.Owner) + 面朝方向(事件玩家.Owner) * 200, 所有玩家(对方队伍(所在队伍(事件玩家))), 添加至数组(
			事件玩家.Owner.Tmp_Array, 事件玩家.Owner), 真)), 300, 至地图, 方向及角速率);
		开始朝向(事件玩家, 面朝方向(事件玩家.Owner), 300, 至地图, 方向及角速率);
	}
}

禁用 规则("Bot created: Set aimbot")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		相距距离(所选位置(事件玩家), 所选位置(事件玩家.Owner)) > 0.1;
	}

	动作
	{
        小字体信息(事件玩家.Owner, 自定义字符串("开始定向阈值"));
        开始定向阈值(事件玩家, 方向(事件玩家, 事件玩家.Owner), 1, 至地图, 替换现有阈值, 方向和幅度);
	}
}

禁用 规则("Bot created: Set aimbot")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		相距距离(所选位置(事件玩家), 所选位置(事件玩家.Owner)) <= 0.1;
        速度(事件玩家.Owner) == 0;
	}

	动作
	{
        小字体信息(事件玩家.Owner, 自定义字符串("停止定向阈值"));
        停止定向阈值(事件玩家);
	}
}

规则("Bot: Press Jump")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		存活(事件玩家) == 真;
		按钮被按下(事件玩家.Owner, 按钮(跳跃)) == 真;
	}

	动作
	{
		开始按下按钮(事件玩家, 按钮(跳跃));
	}
}

规则("Bot: Press Crouch")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		存活(事件玩家) == 真;
		按钮被按下(事件玩家.Owner, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
	}

	动作
	{
		开始按下按钮(事件玩家, 按钮(蹲下));
	}
}


规则("Bot: Release Secondary Fire")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		按钮被按下(事件玩家.Owner, 按钮(辅助攻击模式)) == 假;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
	}

	动作
	{
		停止按下按钮(事件玩家, 按钮(辅助攻击模式));
	}
}

规则("Bot: Release Jump")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		按钮被按下(事件玩家.Owner, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
	}

	动作
	{
		停止按下按钮(事件玩家, 按钮(跳跃));
	}
}

规则("Bot: Release Crouch")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		按钮被按下(事件玩家.Owner, 按钮(蹲下)) == 假;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
	}

	动作
	{
		停止按下按钮(事件玩家, 按钮(蹲下));
	}
}


规则("Bot: Press Ability 1")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		存活(事件玩家) == 真;
		按钮被按下(事件玩家.Owner, 按钮(技能1)) == 真;
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
	}

	动作
	{
		开始按下按钮(事件玩家, 按钮(技能1));
	}
}

规则("Bot: Press Ability 2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		存活(事件玩家) == 真;
		按钮被按下(事件玩家.Owner, 按钮(技能2)) == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
	}

	动作
	{
		开始按下按钮(事件玩家, 按钮(技能2));
	}
}


规则("Bot: Release Ability 1")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		按钮被按下(事件玩家.Owner, 按钮(技能1)) == 假;
		按钮被按下(事件玩家, 按钮(技能1)) == 真;
	}

	动作
	{
		停止按下按钮(事件玩家, 按钮(技能1));
	}
}

规则("Bot: Release Ability 2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		按钮被按下(事件玩家.Owner, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
	}

	动作
	{
		停止按下按钮(事件玩家, 按钮(技能2));
	}
}


规则("General Ability 1 Sync")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		存活(事件玩家) == 真;
		正在使用技能 1(事件玩家.Owner) == 真;
		正在使用技能 1(事件玩家) == 假;
	}

	动作
	{
		等待(0.250, 当为“假”时中止);
		按下按键(事件玩家, 按钮(技能1));
		如条件为”真“则循环;
	}
}

规则("General Ability 2 Sync")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		是否是机器人(事件玩家) == 真;
		事件玩家.Owner != 假;
		存活(事件玩家) == 真;
		正在使用技能 2(事件玩家.Owner) == 真;
		正在使用技能 2(事件玩家) == 假;
	}

	动作
	{
		等待(0.250, 当为“假”时中止);
		按下按键(事件玩家, 按钮(技能2));
		如条件为”真“则循环;
	}
}

规则("相移")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		具有状态(事件玩家, 相移) == 假;
	}

	动作
	{
		等待(0.250, 无视条件);
		清除状态(事件玩家, 相移);
		设置状态(事件玩家, 无, 相移, 9999);
	}
}