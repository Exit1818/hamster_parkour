设置
{
	主程序
	{
		描述: "灵狐，为你引路！"
		模式名称: "雾子跑酷"
	}

	大厅
	{
		比赛语音聊天: 启用
		玩家上限 队伍1: 9
		玩家上限 队伍2: 0
		观战者人数上限: 6
		返回大厅: 从不
		队列中的玩家可以加入: 是
	}

	模式
	{
		团队死斗
		{
			启用地图
			{
				铁坂
			}
		}

		突击模式
		{
			启用地图
			{
			}
		}

		综合
		{
			允许切换英雄: 关闭
			复生时间: 5%
			急救包刷新: 禁用
			消灭提示: 关闭
			消灭镜头: 关闭
			游戏模式开始: 即时
			英雄限制: 关闭
			随机英雄复生: 开启
		}
	}

	英雄
	{
		综合
		{
			无需装弹: 开启
			终极技能充能速度: 10%
			终极技能自动充能速度: 0%
			重生时终极技能充能完毕: 开启

			启用英雄
			{
				半藏
			}

			半藏
			{
				跃: 关闭
			}

			秩序之光
			{
				传送面板: 关闭
			}
		}
	}

	地图工坊
	{
		X-position: -1.400
		Y-position: -0.300
		小球不透明度: 109
		小球判定大小: 2.200
		小球显示大小: 2.500
		小球红: 255
		小球绿: 105
		小球蓝: 180
		是否允许开拓: 开启
		是否开启机器人: 开启
		目标点圈不透明度: 161
		目标点圈大小: 1.800
		起飞点圈不透明度: 94
		跳关提醒: 关闭
	}

	扩展
	{
		增益状态效果
		爆炸声音
		播放更多效果
		生成更多机器人
	}
}

变量
{
	全局:
		0: CheckpointPosition
		1: Ability1State
		2: Ability2State
		3: SecondaryFireState
		4: UltimateState
		5: Creator
		6: RingRadius
		7: JudgeWhenLanding
		8: DefaultAliblty1Enabled
		9: DefaultAliblty2Enabled
		10: DefaultSecondaryEnabled
		11: DefaultUltimateEnabled
        12: Description
		13: OneTimeAbility
		14: DisableContinuousCreation
		15: PioneerModeEnabled
		16: Pioneer
		17: PioneerStarted
		18: PioneerLandingPosition
		19: PioneerSpherePosition
		20: BestScore
        21: MapHint
		22: SmallHint
        23: ShortKeyHint
		24: HiddenHint
        25: cheat_log
		26: RGB
		27: JumpState
		28: CheatRecord
		29: PlayersData
		30: RoomAliveHoursLeft
		31: SpherePosition
		32: SphereRadius
		33: SphereJudgeRadius
		34: Tips
        35: CurrentMap
		36: action_type
		37: actions
		38: bot_start_position
		39: bot_start_direction
        40: bot_position
        41: bot_owner
		42: Bot
		43: bot_direction
		44: action_value
		45: ActionEditModeEnabled
		46: bot_name
		47: bot_num
		48: bot_idx
		49: bot_action
		50: bot_max_action_time
		51: Chase
		52: bot_tips
		53: Idx
		54: BotEnabled
		55: Vips
		56: code
		57: version
		58: MapCreator
		59: TelePosition
		98: xPos
		99: yPos
		100: textX
		101: textY
		102: scale
		104: button
		105: text
		106: textSize

	玩家:
		0: Level
		1: BestScore
		2: LastScore
		3: ScoreOfThisRound
		4: GameComplete
		5: IsReady
		6: Invisible
		7: FreeMode
		8: InteractPressState
		9: FacingDirection
		10: UltimateCharge
		11: Ability1Used
		12: Ability2Used
		13: SecondaryFireUsed
		14: UltimateUsed
		15: IsSpectating
		16: ultimate_worked
		17: ultimate_log
		18: ultimate_info
		19: ultimate_outline_countdown
		20: pioneer_outline_countdown
		21: cheat
		22: mistake
		23: dataIndex
		25: sphere_state
		26: pioneer_mode
		27: HintFreq
		28: Entity
		29: actions
		30: action_idx
		31: action_type
		32: current_action_type
		33: current_action
        34: Bot
		35: bot_position
		37: bot_state
		38: bot_start_direction
		39: bot_direction
		41: bot_trans_direction
		43: action_s_idx
		44: edit_mode
		45: SpectatingState
		46: chooseHero
		47: movementCollision
		48: HUDEntity
		49: MapEntity
		50: EffectEntity
		51: IconEntity
		52: JumpingCheckpoint
		53: JumpingCheckpointHUD
		54: ShowHotKey
		55: playerTittle
		56: playerNickname
		57: playerColor
		60: O
		61: TY
		62: J
		80: action_time
		81: owner
		82: bot_action
		83: i
		84: bot_tips
		100: keyboard_enabled
		101: keyboard_status_space
		102: keyboard_status_ctrl
		103: keyboard_status_right
		104: keyboard_status_left
}

子程序
{
	0: SetAbility
	1: Reset
	2: ResetBot
	3: ReleaseBot
	4: ResetBall
	5: EditPlayerData
	6: ValidationPlayerData
    7: CreateHUDText
    8: CreatePlayerHUDText
    9: CreatePlayerEffect
    10: CreateTips
	11: ReleaseBot2
	12: PlayDestroyMapEffect
	13: CreateBot
}

规则("禁用查看器")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		禁用查看器录制;
	}
}

规则("房主发感谢即可更新导出数据,随后在查看器导出全局数据")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		正在交流(主机玩家, 感谢) == 真;
	}

	动作
	{
		全局.CurrentMap = 当前地图;
		启用查看器录制;
		禁用查看器录制;
		小字体信息(主机玩家, 自定义字符串("点位数据已导出,请打开查看器复制"));
		小字体信息(主机玩家, 自定义字符串("别忘了选择当前地图和当前比赛模式哦！"));
	}
}

规则("头衔(勿删除, 自行添加)")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		"此条规则为自定义头衔"
		全局.Vips = 数组(数组(自定义字符串("明天又是新的一天"), 自定义字符串("{0} Tomorrow is another day", 技能图标字符串(英雄(天使), 按钮(技能1))), 颜色(白色)), 数组(自定义字符串("朝如青丝暮成雪"),
			自定义字符串("{0} 朝朝暮暮", 技能图标字符串(英雄(天使), 按钮(技能1))), 颜色(白色)), 数组(自定义字符串("长相思兮长相忆"), 自定义字符串("{0} 朝朝暮暮", 技能图标字符串(英雄(天使), 按钮(技能1))), 颜色(白色)), 数组(自定义字符串("Exit"),
			自定义字符串("{0} Exit", 技能图标字符串(英雄(安娜), 按钮(技能1))), 颜色(白色)), 数组(自定义字符串("栀子"), 自定义字符串("{0} Gardenia", 技能图标字符串(英雄(天使), 按钮(终极技能))), 颜色(白色)), 数组(自定义字符串("Gardenia"), 自定义字符串("{0} Gardenia", 技能图标字符串(英雄(天使), 按钮(终极技能))), 颜色(白色)),
			数组(自定义字符串("十元"), 自定义字符串("{0} 十元", 技能图标字符串(英雄(天使), 按钮(技能2))), 颜色(白色)), 数组(自定义字符串("石原里美"), 自定义字符串("{0} 十元", 技能图标字符串(英雄(天使), 按钮(技能2))), 颜色(白色)), 
			数组(自定义字符串("清尘、"), 自定义字符串("{0} 清尘、", 技能图标字符串(英雄(破坏球), 按钮(技能1))), 颜色(白色)), 数组(自定义字符串("哈蒙德大人"), 自定义字符串("{0} 2812345", 技能图标字符串(英雄(破坏球), 按钮(终极技能))), 颜色(白色)), 
			数组(自定义字符串("mzlnot"), 自定义字符串("{0} mzlnot", 技能图标字符串(英雄(破坏球), 按钮(技能2))), 颜色(白色)));
		"[0] 填写玩家昵称; \n[1] 填写显示文字, 如不填写, 默认为玩家昵称; \n[2] 填写文字颜色, 白色为随机颜色 "
		全局.Vips[数量(全局.Vips)] = 数组(自定义字符串(""), 自定义字符串(""), 颜色(白色));
		全局.Vips[数量(全局.Vips)] = 数组(自定义字符串(""), 自定义字符串(""), 颜色(白色));
		全局.Vips[数量(全局.Vips)] = 数组(自定义字符串(""), 自定义字符串(""), 颜色(白色));
	}
}

规则("[自定义] 展示文本,自行修改")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		"上传后修改此条再上传一次"
		全局.code = 自定义字符串("1SBG2");
		"勿动"
		全局.version = 自定义字符串("3.0.0");
	}
}

//点位数据
规则("点位数据模板,参考该条修改")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		"记得修改地图"
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		"数据模板,勿动"
		继续;
		"只需要6条,其余删去"
		继续;
		"目标点位置"
		全局.CheckpointPosition = 数组();
		"是否使用抓钩"
		全局.SecondaryFireState = 数组();
		"是否超级跳"
		全局.UltimateState = 数组();
		"是否传送点"
		全局.JumpState = 数组();
		"小球位置"
		全局.SpherePosition = 数组();
		"作者"
		全局.Creator = 数组();
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		"记得修改地图"
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		"点位数据贴在这里"
		继续;
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		"记得修改地图"
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		"点位数据贴在这里"
		继续;
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		"点位数据贴在这里"
		继续;
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(铁坂);
		当前游戏模式 == 游戏模式(团队死斗);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-27.325, 10.924, -9.610), 矢量(-21.805, 10.361, -9.773), 矢量(-9.813, 6, -16.295), 矢量(-5.031, 5.840, 0.033), 矢量(-19.571,
			10.010, 4.238), 矢量(-1.379, 6, 8.342), 矢量(7.954, 9, 2.249), 矢量(5.149, 6, -10.525), 矢量(4.094, 7, -33.720), 矢量(-11.073, 7,
			-49.419), 矢量(-30.387, 8, -38.220), 矢量(-39.625, 9, -55.819), 矢量(-49.523, 11, -37.858), 矢量(-42.104, 11.052, -14.182), 矢量(-28.350,
			10, 2.519), 矢量(-25.404, 8, 8.947), 矢量(-16.593, 5.840, 26.669), 矢量(-45.185, 6, 25.201), 矢量(-54.708, 9, 3.649), 矢量(-57.381, 11,
			-13.541), 矢量(-41.601, 9.732, -20.051), 矢量(-31.119, 7, -40.521), 矢量(-17.468, 10.011, -30.506), 矢量(6.318, 7, -25.406), 矢量(-2.782,
			9, -46.406), 矢量(-35.032, 9.033, -52.981), 矢量(-36.442, 9.997, -26.908), 矢量(-47.317, 15.522, 2.099), 矢量(-19.355, 10.500, 19.008),
			矢量(-20.406, 6, 35.971), 矢量(-30.440, 10.891, -9.604));
	}
}

规则("[自定义]哪些技能可以使用(如果要开启大招,请关掉 英雄-设置-大招自动充能 )")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		"技能1(S)"
		全局.DefaultAliblty1Enabled = 真;
		"技能2(E)"
		全局.DefaultAliblty2Enabled = 真;
		"辅助攻击模式(右键)"
		全局.DefaultSecondaryEnabled = 真;
		"终极技能"
		全局.DefaultUltimateEnabled = 真;
		全局.bot_position = 矢量(0, 0, 0);
		全局.bot_direction = 矢量(0, 0, 0);
	}
}

//工坊设置
规则("[自定义]地图工坊设置")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.PioneerModeEnabled = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("是否允许开拓"), 假, 0);
		全局.DisableContinuousCreation = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("连续开拓"), 假, 1);
		全局.JudgeWhenLanding = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("落地进点"), 真, 2);
		全局.OneTimeAbility = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("一次性技能"), 真, 3);
		全局.CheatRecord = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("跳关提醒"), 真, 4);
		"机器人设置"
		全局.BotEnabled = 地图工坊设置开关(自定义字符串("机器人设置"), 自定义字符串("是否开启机器人"), 假, 0);
		全局.ActionEditModeEnabled = 地图工坊设置开关(自定义字符串("机器人设置"), 自定义字符串("是否编辑机器人动作"), 假, 1);
		全局.bot_max_action_time = 地图工坊设置整数(自定义字符串("机器人设置"), 自定义字符串("最大教学时间"), 60, 30, 120, 2);
		全局.bot_num = 地图工坊设置整数(自定义字符串("机器人设置"), 自定义字符串("机器人数量"), 2, 1, 4, 3);
		"目标点颜色"
		全局.RGB[0] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈红"), 255, 0, 255, 0);
		全局.RGB[1] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈绿"), 255, 0, 255, 1);
		全局.RGB[2] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈蓝"), 0, 0, 255, 2);
		全局.RGB[3] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈不透明度"), 255, 0, 255, 3);
		"超级跳起飞点颜色"
		全局.RGB[4] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈红"), 208, 0, 255, 4);
		全局.RGB[5] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈绿"), 68, 0, 255, 5);
		全局.RGB[6] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈蓝"), 180, 0, 255, 6);
		全局.RGB[7] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈不透明度"), 255, 0, 255, 7);
		"小球颜色"
		全局.RGB[8] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球红"), 154, 0, 255, 8);
		全局.RGB[9] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球绿"), 110, 0, 255, 9);
		全局.RGB[10] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球蓝"), 147, 0, 255, 10);
		全局.RGB[11] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球不透明度"), 255, 0, 255, 11);
		"判定圈大小"
		全局.RingRadius[0] = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("目标点圈大小"), 1.500, 0.500, 4, 0);
		全局.RingRadius[1] = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串(" 起始点圈大小"), 2, 0.200, 5, 1);
		全局.RingRadius[2] = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("起飞点圈大小"), 2, 0.200, 4, 2);
		全局.SphereRadius = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("小球显示大小"), 2, 0.200, 5, 3);
		全局.SphereJudgeRadius = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("小球判定大小"), 1.800, 0.200, 5, 4);
	}
}

规则("创建玩家专属机器人  CreatePlayerTargetBot")
{
	事件
	{
		子程序;
		CreatePlayerTargetBot;
	}

	动作
	{
		If(!实体存在(事件玩家.targetBot));
			生成机器人((天使), 所在队伍(事件玩家), 栏位(事件玩家) + 栏位数量(所有队伍),
				全局.Checkpoint[事件玩家.checkpoint][3][0] ? 全局.Checkpoint[事件玩家.checkpoint][3][0] : 全局.Config[60], 无);
			事件玩家.targetBot = 最后创建的实体;
			等待(0.016, 无视条件);
			开始为机器人强制设置名称(事件玩家.targetBot, 自定义字符串("{0}{1}", 事件玩家.playerNickname, 全局.Config[11]));
			等待(0.016, 无视条件);
			开始朝向(事件玩家.targetBot, 方向(逐帧更新(眼睛位置(事件玩家.targetBot)), 逐帧更新(眼睛位置(事件玩家))), 9999, 至地图, 方向及角速率);
		End;
	}
}

规则("Debug")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.BotEnabled == 真;
	    全局.ActionEditModeEnabled == 真;
	}

	动作
	{
        全局.action_type[1] = 自定义字符串("是否W/S");
		全局.action_type[2] = 自定义字符串("是否A/D");
		全局.action_type[3] = 自定义字符串("是否跳跃");
		全局.action_type[4] = 自定义字符串("是否辅助攻击模式");
		全局.action_type[5] = 自定义字符串("是否下蹲");
		全局.action_type[6] = 自定义字符串("转视角速度");
		全局.action_type[7] = 自定义字符串("转视角最终方向");
		全局.action_type[8] = 自定义字符串("持续时间");


		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("机器人速度"), 速度(主机玩家.Bot), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("玩家速度"), 速度(主机玩家), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("机器人阈值"), 阈值(主机玩家.Bot), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("玩家阈值"), 阈值(主机玩家), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("机器人朝向"), 面朝方向(主机玩家.Bot), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("玩家朝向"), 面朝方向(主机玩家), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("机器人位置"), 所选位置(主机玩家.Bot), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("玩家位置"), 所选位置(主机玩家), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("bot_start_direction"), 主机玩家.bot_start_direction, 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("bot_position"), 主机玩家.bot_direction, 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(主机玩家, 自定义字符串("f+R切换编辑模式\nQ/E切换动作\nshift/ctrl切换子动作\n左右键调整数值\n喷漆保存位置\nf+空格删除最后动作"), 无, 无, 左边, 12, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
	}
}

规则("显示动作")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.ActionEditModeEnabled == 真;
		已重生(事件玩家) == 真;
		事件玩家 == 主机玩家;
	}

	动作
	{
		创建HUD文本(事件玩家, 自定义字符串("{0}动作序号", 事件玩家.edit_mode?自定义字符串("[编辑中]"):自定义字符串("")), 自定义字符串("{0}/{1}", 事件玩家.action_idx + 1, 数量(事件玩家.actions)), 无, 右边, 2, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		For 玩家变量(事件玩家, action_type, 0, 数量(全局.action_type) - 1, 1);
			创建HUD文本(事件玩家, 单次赋值(全局.action_type[单次赋值(事件玩家.action_type) + 1]), 数量(全局.action_value[单次赋值(事件玩家.action_type)]) > 1?全局.action_value[单次赋值(事件玩家.action_type)][事件玩家.current_action[单次赋值(事件玩家.action_type)]]:事件玩家.current_action[单次赋值(事件玩家.action_type)], 事件玩家.action_s_idx == 单次赋值(事件玩家.action_type)?自定义字符串("<-"):自定义字符串(""), 右边, 单次赋值(事件玩家.action_type + 3), 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		End;
	}
}


规则("Create Clones Team 1")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.actions != 无;
	}

	动作
	{
		全局.action_value[0] = 数组(0, 1, -1);
		全局.action_value[1] = 数组(0, 1, -1);
		全局.action_value[2] = 数组(0, 1, -1);
		全局.action_value[3] = 数组(0, 1, -1);
		全局.action_value[4] = 数组(0, 1, -1);
		全局.action_value[5] = 自定义字符串("数值");
		全局.action_value[6] = 自定义字符串("方向");
		全局.action_value[7] = 自定义字符串("数值");

		全局.bot_name = 数组(自定义字符串("8号实验体"), 自定义字符串("孤独的铁球"), 自定义字符串("渣客镇王者"), 自定义字符串("角斗冠军"), 自定义字符串("社会大佬"));
		全局.bot_action = 数组(自定义字符串("晒太阳"), 自定义字符串("对旅店老板重拳出击"), 自定义字符串("吃香蕉"), 自定义字符串("开着作弊器与黑影PK"),
			自定义字符串("安娜面前呼呼大睡"), 自定义字符串("拯救艾泽拉斯"), 自定义字符串("和堡垒学说话"), 自定义字符串("喝纳米可乐"), 
			自定义字符串("4400炸鱼"), 自定义字符串("试驾DVA的机甲"), 自定义字符串("挖狂鼠埋的宝藏"), 自定义字符串("酒馆5连鸡"),
			自定义字符串("潘达利亚玩泥巴"), 自定义字符串("偷温斯顿的香蕉"), 自定义字符串("偷温斯顿的香蕉"), 自定义字符串("探索地下城"));
		调用子程序(CreateBot);
    }
}

规则("CreateBot")
{
	事件
	{
		子程序;
		CreateBot;
	}

	动作
	{
		For 全局变量(bot_idx, 0, 全局.bot_num, 1);
			生成机器人(英雄(破坏球), 队伍2, 全局.bot_idx + 1, 全局.bot_position, 全局.bot_direction);
			全局.Bot[全局.bot_idx] = 此栏位的玩家(全局.bot_idx + 1, 队伍2);
			开始为机器人强制设置名称(全局.Bot[全局.bot_idx], 全局.bot_name[全局.bot_idx]);
		End;
    }
}

规则("机器人初始化")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.actions != 无;
		已重生(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		事件玩家.keyboard_enabled = 真;
		事件玩家.owner = 无;
		事件玩家.Level = 0;
		事件玩家.FreeMode = 真;
		事件玩家.action_time = 0;
		事件玩家.bot_action = 数组随机取值(全局.bot_action);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 事件玩家.owner == 无?自定义字符串("{0} 正在{1}", 事件玩家, 事件玩家.bot_action):自定义字符串("{0} 正在教 {1}({2}s)", 事件玩家, 事件玩家.owner, 全局.bot_max_action_time - 事件玩家.action_time), 右边, 栏位(事件玩家) - 50, 颜色(白色), 颜色(白色), 颜色(橙色), 可见性，排序规则和字符串, 默认可见度);
	}
}

规则("房主重置所有机器人")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.actions != 无;
		正在交流(主机玩家, 终极技能状态) == 真;
		按钮被按下(主机玩家, 按钮(互动)) == 真;
	}

	动作
	{
		If(!实体存在(全局.Bot[0]));
			调用子程序(CreateBot);
		End;
		For 全局变量(bot_idx, 0, 全局.bot_num, 1);
			全局.Bot[全局.bot_idx].Level = 0;
			停止追踪玩家变量(全局.Bot[全局.bot_idx], action_time);
			全局.Bot[全局.bot_idx].action_time = 0;
			全局.Bot[全局.bot_idx].bot_action = 数组随机取值(全局.bot_action);
			全局.Bot[全局.bot_idx].owner = 无;
		End;
	}
}

规则("按F+R进入编辑模式")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.actions != 无;
		全局.ActionEditModeEnabled == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		事件玩家 == 主机玩家;
        事件玩家.bot_state != 2;
		事件玩家.IsSpectating == 假;
		事件玩家.Level + 1 < 数量(全局.CheckpointPosition);
	}

	动作
	{
		If(事件玩家.edit_mode == 0);
			事件玩家.bot_state = 0;
			设置状态(事件玩家, 无, 定身, 9999);
			事件玩家.bot_position = 全局.bot_start_position[事件玩家.Level + 1];
			事件玩家.bot_start_direction = 全局.bot_start_direction[事件玩家.Level + 1];
			If(事件玩家.bot_position == 无);
				事件玩家.bot_position = 所选位置(事件玩家);
			End;
			If(事件玩家.bot_start_direction == 无);
				事件玩家.bot_start_direction = 面朝方向(事件玩家);
			End;
			事件玩家.actions = 全局.actions[事件玩家.Level + 1];
			事件玩家.action_idx = 0;
			If(数量(事件玩家.actions) == 0);
				事件玩家.actions[事件玩家.action_idx] = 数组(0, 0, 0, 0, 0, 0, 0, 无, 0);
			End;
			事件玩家.current_action = 事件玩家.actions[事件玩家.action_idx];
			事件玩家.action_s_idx = 0;
			事件玩家.edit_mode = 1;
		Else;
			事件玩家.actions[事件玩家.action_idx] = 事件玩家.current_action;
			全局.bot_start_position[事件玩家.Level + 1] = 事件玩家.bot_position;
			全局.bot_start_direction[事件玩家.Level + 1] = 事件玩家.bot_start_direction;
			全局.actions[事件玩家.Level + 1] = 事件玩家.actions;
			事件玩家.edit_mode = 0;
			事件玩家.bot_state = 1;
			清除状态(事件玩家, 定身);
		End;
	}
}

规则("按shift/ctrl选择子动作")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		事件玩家.edit_mode == 1;
		(按钮被按下(事件玩家, 按钮(蹲下)) || 按钮被按下(事件玩家, 按钮(技能1))) == 真;
	}

	动作
	{
		If(按钮被按下(事件玩家, 按钮(技能1)));
			事件玩家.action_s_idx -= 1;
			If(事件玩家.action_s_idx < 0);
				事件玩家.action_s_idx = 数量(全局.action_type) - 2;
			End;
		Else;
			事件玩家.action_s_idx += 1;
			If(事件玩家.action_s_idx >= 数量(全局.action_type) - 1);
				事件玩家.action_s_idx = 0;
			End;
		End;
	}
}

规则("左/右键调整参数")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		事件玩家.edit_mode == 1;
		(按钮被按下(事件玩家, 按钮(主要攻击模式)) || 按钮被按下(事件玩家, 按钮(辅助攻击模式))) == 真;
	}

	动作
	{
		If(全局.action_value[事件玩家.action_s_idx] == 自定义字符串("数值"));
			If(按钮被按下(事件玩家, 按钮(辅助攻击模式)));
				事件玩家.current_action[事件玩家.action_s_idx] += 0.01;
				等待(0.016, 无视条件);
				等待(0.500, 当为“假”时中止);
				While(按钮被按下(事件玩家, 按钮(辅助攻击模式)));
					事件玩家.current_action[事件玩家.action_s_idx] += 0.01;
					等待(0.016, 无视条件);
					等待(0.030, 当为“假”时中止);
				End;
			Else If(按钮被按下(事件玩家, 按钮(主要攻击模式)) && 事件玩家.current_action[事件玩家.action_s_idx] > 0);
				事件玩家.current_action[事件玩家.action_s_idx] -= 0.01;
				等待(0.016, 无视条件);
				等待(0.500, 当为“假”时中止);
				While(按钮被按下(事件玩家, 按钮(主要攻击模式)) && 事件玩家.current_action[事件玩家.action_s_idx] > 0);
					事件玩家.current_action[事件玩家.action_s_idx] -= 0.01;
					等待(0.016, 无视条件);
					等待(0.030, 当为“假”时中止);
				End;
			End;
		Else If(全局.action_value[事件玩家.action_s_idx] == 自定义字符串("方向"));
			If(按钮被按下(事件玩家, 按钮(主要攻击模式)));
				事件玩家.current_action[事件玩家.action_s_idx] = 面朝方向(事件玩家);
			Else;
				事件玩家.current_action[事件玩家.action_s_idx] = 无;
			End;
		Else;
			事件玩家.current_action[事件玩家.action_s_idx] += 1;
			If(事件玩家.current_action[事件玩家.action_s_idx] >= 数量(全局.action_value[事件玩家.action_s_idx]));
				事件玩家.current_action[事件玩家.action_s_idx] = 0;
			End;
		End;
	}
}


规则("喷漆保存位置和方向")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		正在使用喷漆交流(事件玩家) == 真;
		事件玩家.edit_mode == 1;
	}

	动作
	{
		事件玩家.bot_position = 所选位置(事件玩家);
		事件玩家.bot_start_direction = 面朝方向(事件玩家);
	}
}

规则("按E下一个动作")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
		事件玩家.edit_mode == 1;
	}

	动作
	{
		事件玩家.actions[事件玩家.action_idx] = 事件玩家.current_action;
		事件玩家.action_idx += 1;
		If(事件玩家.action_idx >= 数量(事件玩家.actions));
			事件玩家.actions[事件玩家.action_idx] = 数组(0, 0, 0, 0, 0, 0, 0, 无, 0);
		End;
		事件玩家.action_s_idx = 0;
		事件玩家.current_action = 事件玩家.actions[事件玩家.action_idx];
	}
}

规则("按Q上一个动作")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		事件玩家.edit_mode == 1;
	}

	动作
	{
		事件玩家.actions[事件玩家.action_idx] = 事件玩家.current_action;
		If(事件玩家.action_idx > 0);
			事件玩家.action_idx -= 1;
			事件玩家.action_s_idx = 0;
			事件玩家.current_action = 事件玩家.actions[事件玩家.action_idx];
		End;
	}
}

规则("按f+空格删除动作")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		事件玩家.edit_mode == 1;
		事件玩家.action_idx == 数量(事件玩家.actions) - 1;
		事件玩家.action_idx >= 0;
	}

	动作
	{
		修改玩家变量(事件玩家, actions, 根据索引从数组中移除, 事件玩家.action_idx);
		事件玩家.action_idx -= 1;
		事件玩家.current_action = 事件玩家.actions[事件玩家.action_idx];
		小字体信息(事件玩家, 自定义字符串("动作已删除"));
	}
}

规则("按X召唤机器人")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.actions != 无;
		(正在交流(事件玩家, 需要帮助) || 正在交流(事件玩家, 需要治疗)) == 真;
		事件玩家.FreeMode == 假;
		事件玩家.GameComplete == 假;
		事件玩家.edit_mode == 0;
	}

	动作
	{
		If(事件玩家.Bot != 无);
			小字体信息(数组(事件玩家, 事件玩家.Bot), 自定义字符串("{0}{1}", 事件玩家.Bot, 全局.SmallHint[29]));
		Else If(全局.actions[事件玩家.Level + 1] == 无);
			小字体信息(数组(事件玩家, 已过滤的数组(全局.Bot, 当前数组元素.owner == 无)), 全局.SmallHint[26]);
		Else;
			事件玩家.Bot = 数组随机取值(已过滤的数组(全局.Bot, 当前数组元素.owner == 无));
			If(事件玩家.Bot == 无);
				小字体信息(事件玩家, 全局.SmallHint[27]);
			Else;
				小字体信息(数组(事件玩家, 事件玩家.Bot), 自定义字符串("{0}{1}", 事件玩家.Bot, 全局.SmallHint[28]));
				事件玩家.Bot.action_time = 0;
				事件玩家.Bot.owner = 事件玩家;
				交流(事件玩家.Bot, 正在赶来);
				
				事件玩家.bot_position = 全局.bot_start_position[事件玩家.Level + 1];
				事件玩家.bot_start_direction = 全局.bot_start_direction[事件玩家.Level + 1];
				事件玩家.actions = 全局.actions[事件玩家.Level + 1];
				事件玩家.bot_tips = 全局.bot_tips[事件玩家.Level + 1];
				事件玩家.Bot.Level = 事件玩家.Level;
				事件玩家.Bot.sphere_state = 全局.SpherePosition[事件玩家.Level + 1] ? 假 : 真;

				调用子程序(ResetBot);
				事件玩家.bot_state = 0;
				If(事件玩家.Bot != 无);
					小字体信息(数组(事件玩家, 事件玩家.Bot), 自定义字符串("{0}{1}", 事件玩家.Bot, 全局.SmallHint[29]));
				End;	
				等待(0.5, 无视条件);
				事件玩家.bot_state = 1;
				追踪玩家变量频率(单次赋值(事件玩家.Bot), action_time, 全局.bot_max_action_time, 1, 速率及最终值);
			End;
		End;
	}
}

规则("ReleaseBot")
{
	事件
	{
		子程序;
		ReleaseBot;
	}

	动作
	{
		等待直到(事件玩家.bot_state == 1, 10);
		If(事件玩家.edit_mode == 0);
			事件玩家.action_idx = 0;
			事件玩家.bot_position = 无;
			事件玩家.actions = 无;
			事件玩家.bot_start_direction = 无;
		End;
        事件玩家.bot_state = 0;
		事件玩家.bot_position = 无;
		事件玩家.Bot.Level = 0;
		停止追踪玩家变量(事件玩家.Bot, action_time);
		事件玩家.Bot.action_time = 0;
		事件玩家.Bot.bot_action = 数组随机取值(全局.bot_action);
		事件玩家.Bot.owner = 无;
		事件玩家.Bot = 无;
	}
}

规则("ReleaseBot2")
{
	事件
	{
		子程序;
		ReleaseBot2;
	}

	动作
	{
		If(事件玩家.owner != 无);
			If(事件玩家.owner.edit_mode == 0);
				事件玩家.owner.action_idx = 0;
				事件玩家.owner.bot_position = 无;
				事件玩家.owner.bot_start_direction = 无;
				事件玩家.owner.actions = 无;
			End;
			事件玩家.owner.bot_state = 0;
			事件玩家.owner.bot_tips = 无;
			事件玩家.owner.Bot = 无;
		End;
		事件玩家.Level = 0;
		停止追踪玩家变量(事件玩家, action_time);
		事件玩家.action_time = 0;
		事件玩家.bot_action = 数组随机取值(全局.bot_action);
		事件玩家.owner = 无;
	}
}

规则("bot计时")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		是否是机器人(事件玩家) == 真;
		(事件玩家.action_time >= 全局.bot_max_action_time || 事件玩家.owner.Bot != 事件玩家) == 真;
	}

	动作
	{
		交流(事件玩家, 再见);
		小字体信息(数组(事件玩家.owner, 事件玩家), 全局.SmallHint[31]);
		调用子程序(ReleaseBot2);
	}
}

规则("ReleaseBot")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		事件玩家.owner == 无;
		是否是机器人(事件玩家) == 真;
		相距距离(全局.bot_position, 所选位置(事件玩家)) > 1;
	}

	动作
	{
		停止按下按钮(事件玩家, 按钮(蹲下));
		事件玩家.keyboard_status_ctrl = 假;
		停止按下按钮(事件玩家, 按钮(跳跃));
		事件玩家.keyboard_status_space = 假;
		停止按下按钮(事件玩家, 按钮(辅助攻击模式));
		事件玩家.keyboard_status_right = 假;
		设置状态(事件玩家, 无, 定身, 0.050);
		施加推力(事件玩家, 速率(事件玩家) * 1, -1, 至地图, 取消相反运动);
		停止定向阈值(事件玩家);
		设置状态(事件玩家, 无, 定身, 1);
		等待(0.50, 无视条件);
		传送(事件玩家, 全局.bot_position);
		开始朝向(事件玩家, 全局.bot_direction, 300, 至地图, 方向及角速率);
		等待(1, 无视条件);
		小字体信息(所有玩家(所有队伍), 自定义字符串("{0}{1}", 事件玩家, 全局.SmallHint[30]));
	}
}

规则("发感谢释放机器人")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		事件玩家.Bot != 无;
		正在交流(事件玩家, 感谢) == 真;
	}

	动作
	{
		交流(事件玩家.Bot, 不用谢);
		调用子程序(ReleaseBot);
	}
}

规则("ResetBot")
{
	事件
	{
		子程序;
		ResetBot;
	}

	动作
	{
        事件玩家.bot_state = 0;
		// 事件玩家.bot_position = 全局.actions[事件玩家.Level + 1][0];
		// 事件玩家.bot_start_direction = 全局.actions[事件玩家.Level + 1][1];
		// 事件玩家.actions = 全局.actions[事件玩家.Level + 1][2];
		事件玩家.action_idx = 0;
		停止按下按钮(事件玩家.Bot, 按钮(蹲下));
		事件玩家.Bot.keyboard_status_ctrl = 假;
		停止按下按钮(事件玩家.Bot, 按钮(跳跃));
		事件玩家.Bot.keyboard_status_space = 假;
		停止按下按钮(事件玩家.Bot, 按钮(辅助攻击模式));
		事件玩家.Bot.keyboard_status_right = 假;
		设置状态(事件玩家.Bot, 无, 定身, 0.050);
		施加推力(事件玩家.Bot, 速率(事件玩家.Bot) * 1, -1, 至地图, 取消相反运动);
		停止定向阈值(事件玩家.Bot);
		设置状态(事件玩家.Bot, 无, 定身, 1);
		事件玩家.bot_direction = 事件玩家.bot_start_direction;
		开始朝向(事件玩家.Bot, 事件玩家.bot_direction, 500, 至地图, 方向及角速率);
		等待(0.25, 无视条件);
		传送(事件玩家.Bot, 事件玩家.bot_position);
		停止定向阈值(事件玩家.Bot);
		设置状态(事件玩家.Bot, 无, 定身, 1);
		等待(0.25, 无视条件);
		传送(事件玩家.Bot, 事件玩家.bot_position);
		等待(1, 无视条件);
		事件玩家.bot_state = 1;
	}
}

规则("按Q重置tp")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		事件玩家.Bot != 无;
		事件玩家.bot_state == 1;
		事件玩家.edit_mode == 0;
	}

	动作
	{
		调用子程序(ResetBot);
	}
}

规则("按R定向阈值")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		事件玩家.Bot != 无;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		事件玩家.bot_position == 真;
		事件玩家.bot_state == 1;
		事件玩家.edit_mode == 0;
	}

	动作
	{
		事件玩家.bot_state = 2;
		For 玩家变量(事件玩家, action_idx, 0, 数量(事件玩家.actions), 1);
			If(事件玩家.bot_tips != 无 && 事件玩家.bot_tips[0] == 事件玩家.action_idx);
				小字体信息(数组(事件玩家.Bot, 事件玩家), 事件玩家.bot_tips[1]);
			End;
			事件玩家.current_action = 事件玩家.actions[事件玩家.action_idx];
			If(全局.action_value[0][事件玩家.current_action[0]] != 0 || 全局.action_value[1][事件玩家.current_action[1]] != 0);
				开始定向阈值(事件玩家.Bot, 矢量(单次赋值(全局.action_value[1][事件玩家.current_action[1]]), 0, 单次赋值(全局.action_value[0][事件玩家.current_action[0]])), 1, 至玩家, 添加至现有阈值, 方向和幅度);
			Else;
				停止定向阈值(事件玩家.Bot);
			End;
			If(全局.action_value[2][事件玩家.current_action[2]] == 1);
				开始按下按钮(事件玩家.Bot, 按钮(跳跃));
				事件玩家.Bot.keyboard_status_space = 真;
			Else If(全局.action_value[2][事件玩家.current_action[2]] == -1);
				停止按下按钮(事件玩家.Bot, 按钮(跳跃));
				事件玩家.Bot.keyboard_status_space = 假;
			End;
			If(全局.action_value[3][事件玩家.current_action[3]] == 1);
				开始按下按钮(事件玩家.Bot, 按钮(辅助攻击模式));
				事件玩家.Bot.keyboard_status_right = 真;
			Else If(全局.action_value[3][事件玩家.current_action[3]] == -1);
				停止按下按钮(事件玩家.Bot, 按钮(辅助攻击模式));
				事件玩家.Bot.keyboard_status_right = 假;
			End;
			If(全局.action_value[4][事件玩家.current_action[4]] == 1);
				开始按下按钮(事件玩家.Bot, 按钮(蹲下));
				事件玩家.Bot.keyboard_status_ctrl = 真;
			Else If(全局.action_value[4][事件玩家.current_action[4]] == -1);
				停止按下按钮(事件玩家.Bot, 按钮(蹲下));
				事件玩家.Bot.keyboard_status_ctrl = 假;
			End;
			If(事件玩家.current_action[6] != 无 && 事件玩家.current_action[5] > 0);
				开始朝向(事件玩家.Bot, 单次赋值(事件玩家.current_action[6]), 单次赋值(事件玩家.current_action[5] * 100), 至地图, 方向及角速率);
			End;
			等待(事件玩家.current_action[7], 无视条件);
		End;
		等待(1, 无视条件);
		调用子程序(ResetBot);
	}
}

//自定义文本
规则("[自定义]地图文本")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.MapHint[0] = 自定义字符串("快到碗里来");
        全局.MapHint[1] = 自定义字符串("在这里起飞");
        全局.MapHint[2] = 自定义字符串("先来拿糖果");
	}
}

规则("[自定义]快捷键提示文本")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.ShortKeyHint[0] = 自定义字符串("重新开始 = F + Q");
        全局.ShortKeyHint[1] = 自定义字符串("阵亡观战 = F + E (按空格切换视角)");
        全局.ShortKeyHint[2] = 自定义字符串("开关隐身 = 任意表情");
        全局.ShortKeyHint[3] = 自定义字符串("自由移动 = F + V");
        全局.ShortKeyHint[4] = 自定义字符串("到上一关 = F + Ctrl");
        全局.ShortKeyHint[5] = 自定义字符串("到下一关 = Ctrl + Q + R");
        全局.ShortKeyHint[6] = 自定义字符串("阵亡复位 = 长按Q");
        全局.ShortKeyHint[7] = 自定义字符串("开关键盘 = Q + E");
        全局.ShortKeyHint[8] = 自定义字符串("切换模式 = R + Space");
        全局.ShortKeyHint[9] = 自定义字符串("快速选关 = 长按 V");
        全局.ShortKeyHint[10] = 自定义字符串("开关环境碰撞 = R");
        全局.ShortKeyHint[11] = 自定义字符串("删除最后一关 = 长按 R + E");
		全局.ShortKeyHint[12] = 自定义字符串("鼠标左/右键选择\n语音(上)更换英雄");
	}
}

规则("[自定义]隐藏说明文本")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		// 全局.HiddenHint[0] = 自定义字符串("仓鼠跑酷地图合集代码：\n 9ZDS3  | 0C1Q7 | VWA5E\n HSCNX | DA92T | ETB2E");
        // 全局.HiddenHint[1] = 自定义字符串("教学图代码：Z4DBC");
        // 全局.HiddenHint[2] = 自定义字符串("编辑器代码：11NXY  快来开拓吧");
        // 全局.HiddenHint[3] = 自定义字符串("保存点位教学：b站up:Stan_sin\r\n  BV1da4y1W7uA");
		全局.HiddenHint[4] = 自定义字符串("正在观战, R开始演示, 鼠标左/右键切换观战玩家, F+E退出");
	}
}

规则("[自定义]小字体信息")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.SmallHint[0] = 自定义字符串("不能再继续开拓了​");
        全局.SmallHint[1] = 自定义字符串("不要乱跑");
        全局.SmallHint[2] = 自定义字符串("超级跳开拓模式");
        全局.SmallHint[3] = 自定义字符串("正常开拓模式");
        全局.SmallHint[4] = 自定义字符串("传送点模式");
        全局.SmallHint[5] = 自定义字符串("通关了!用时:");
        全局.SmallHint[6] = 自定义字符串(".但是他作弊了~");
        全局.SmallHint[7] = 自定义字符串("拿到糖果了!");
        全局.SmallHint[8] = 自定义字符串("糖果还没拿到!");
        全局.SmallHint[9] = 自定义字符串("要先拿糖果哦!");
        全局.SmallHint[10] = 自定义字符串("开拓者已开拓​");
        全局.SmallHint[11] = 自定义字符串("坐标错误");
        全局.SmallHint[12] = 自定义字符串("继续长按将清除最后一关​");
        全局.SmallHint[13] = 自定义字符串("起点已清除​");
        全局.SmallHint[14] = 自定义字符串("最后一关已删除​");
        全局.SmallHint[15] = 自定义字符串("请不要连续开拓​");
        全局.SmallHint[16] = 自定义字符串("请站在地上设置开拓起点​");
        全局.SmallHint[17] = 自定义字符串("开启隐身​");
        全局.SmallHint[18] = 自定义字符串("关闭隐身​");
        全局.SmallHint[19] = 自定义字符串("自由移动​");
        全局.SmallHint[20] = 自定义字符串("关闭自由移动​");
        全局.SmallHint[21] = 自定义字符串("不要转弯");
        全局.SmallHint[22] = 自定义字符串("请在地面上起跳");
        全局.SmallHint[23] = 自定义字符串("不要乱跑");
        全局.SmallHint[24] = 自定义字符串("点位间距太短");
        全局.SmallHint[25] = 自定义字符串("{0}: 卡关了吗? 发送需要治疗/帮助(X)让教练演示一下", 英雄图标字符串(英雄(破坏球)));
        全局.SmallHint[26] = 自定义字符串("这关太简单了, 教练懒得教");
        全局.SmallHint[27] = 自定义字符串("教练正忙, 请稍候再试");
        全局.SmallHint[28] = 自定义字符串("准备中");
        全局.SmallHint[29] = 自定义字符串("就绪, F+E观战, R开始演示");
        全局.SmallHint[30] = 自定义字符串("空闲中");
		全局.SmallHint[31] = 自定义字符串("到时间了, 教练要去耍了");
		全局.SmallHint[32] = 自定义字符串("可以F+E观看键位, R开始演示");
	}
}

规则("[自定义]定时更新目标点描述")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		If(全局.RoomAliveHoursLeft == 0 && 比赛时间 == 0);
			设置目标点描述(所有玩家(所有队伍), 自定义字符串("房间即将重启​"), 可见和字符串);
		Else;
			设置目标点描述(所有玩家(所有队伍), 自定义字符串("本局游戏时间还剩：​{0}小时​{1}分钟​", 全局.RoomAliveHoursLeft, 取整(比赛时间 / 60, 下)), 可见和字符串);
		End;
		等待(1, 无视条件);
		循环;
	}
}

规则("爬墙，小跳初始化")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		在地面上(事件玩家) == 真;
	}

	动作
	{
		事件玩家.TY = 0;
		事件玩家.J = 2;
		等待(0, 无视条件);
		根据条件循环((事件玩家.TY != 0 || 事件玩家.J != 2) && 在地面上(事件玩家) == 真);
		事件玩家.O = 1;
	}
}

规则("跳跃判定")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		事件玩家.TY != 2;
	}

	动作
	{
		事件玩家.TY += 1;
	}
}

规则("踏空小跳判定")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.TY == 0;
		正在空中(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
	}

	动作
	{
		事件玩家.O = 0;
	}
}

规则("踏空")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.TY == 0;
		正在空中(事件玩家) == 真;
	}

	动作
	{
		事件玩家.TY = 1;
	}
}

规则("玩家在墙上")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		"此条规则同时与爬墙判定挂钩，请勿关闭/删除"
		在墙上(事件玩家) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
	}

	动作
	{
		事件玩家.TY = 2;
		事件玩家.J = 1;
	}
}

规则("表情小跳判定")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用表情交流(事件玩家) == 真;
	}

	动作
	{
		事件玩家.O = 0;
	}
}

规则("小跳使用判定")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.O == 0;
		正在跳跃(事件玩家) == 真;
	}

	动作
	{
		事件玩家.O = 1;
		小字体信息(事件玩家, 自定义字符串("小跳已用"));
	}
}

规则("[自定义]HUD指引文本")
{
	事件
	{
		子程序;
		CreateHUDText;
	}

	动作
	{
		创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(
			"代码：{0}\n编辑器版本：{1}", 全局.code, 全局.version),
			左边, 0, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("\r\n\r\n"), 左边, 1, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(" "), 右边, 1, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("\r\n{0} 双击互动键（{1}）查看快捷键列表", 技能图标字符串(英雄(托比昂), 按钮(技能2)), 输入绑定字符串(按钮(互动))), 左边, 98, 无, 无, 自定义颜色(220,
			220, 220, 200), 可见和字符串, 默认可见度);
		If(全局.BotEnabled && 全局.actions != 无);
			创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("发送需要治疗/帮助(X)召唤教练(部分关卡可用)\n发送感谢释放, Q重置, R开始演示\nf + e观看键位\n如果演示失败, 等几秒后重试一次"), 左边, 4, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		End;
		If(全局.PioneerModeEnabled == 真);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), !实体存在(全局.Pioneer) && 数量(全局.CheckpointPosition) == 0 && 在地面上(当前数组元素)), 自定义字符串("互动{0}+装填{1} 在当前位置开拓​",
				输入绑定字符串(按钮(互动)), 输入绑定字符串(按钮(装填))), 无, 无, 顶部, 5, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.GameComplete && !实体存在(全局.Pioneer) && 数量(全局.CheckpointPosition) != 0), 自定义字符串(
				"互动{0}+装填{1} 成为开拓者,继续开拓​", 输入绑定字符串(按钮(互动)), 输入绑定字符串(按钮(装填))), 无, 无, 顶部, 5, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.GameComplete && 实体存在(全局.Pioneer)), 自定义字符串("当前开拓者: {0}", 全局.Pioneer), 无, 无, 顶部, 5, 颜色(橙色), 颜色(白色),
				颜色(白色), 可见和字符串, 始终不可见);
			创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("\r\n已开拓关卡数:{0}", 数量(全局.CheckpointPosition) - 1), 右边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
			创建HUD文本(添加至数组(添加至数组(空数组, 全局.Pioneer), 无)[1 * !(全局.PioneerLandingPosition != 无)], 自定义字符串("已开拓 长按互动确认,短按互动重新开拓​"), 无, 无, 顶部, 5, 颜色(
				橙色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		Else;
			创建HUD文本(所有玩家(所有队伍), 自定义字符串("最好成绩: {0}/{1}S", 全局.BestScore[0], 全局.BestScore[1]), 无, 无, 右边, -2, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		End;
		If(全局.Tips != 无);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), !当前数组元素.GameComplete), 无, 无, 自定义字符串("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), 顶部, 99, 无, 无, 无, 可见, 默认可见度);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), !当前数组元素.GameComplete), 无, 无, 自定义字符串("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), 顶部, 99, 无, 无, 无, 可见, 默认可见度);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), !当前数组元素.GameComplete), 无, 无, 自定义字符串("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), 顶部, 99, 无, 无, 无, 可见, 默认可见度);
		End;
	}
}

//子程序
规则("创建闯关者HUD文本")
{
	事件
	{
		子程序;
		CreatePlayerHUDText;
	}

	动作
	{
		创建HUD文本(事件玩家, 事件玩家.J == 1 ? 自定义字符串("爬墙已用") : 自定义字符串("爬墙未用"), 无, 无, 左边, 2, 事件玩家.J == 1 ? 颜色(红色) : 颜色(橙色), 颜色(白色), 颜色(白色),
				可见，字符串和颜色, 默认可见度);
		创建HUD文本(已过滤的数组(事件玩家, !事件玩家.GameComplete), 自定义字符串("第​{0}关 {1}", 事件玩家.Level + 1, 全局.Creator[事件玩家.Level]?自定义字符串("作者: {0}", 全局.Creator[事件玩家.Level]):(全局.MapCreator?自定义字符串("作者: {0}", 全局.MapCreator):自定义字符串(""))), 无, 无, 顶部, 4, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.HUDEntity[0] = 上一个文本ID;
		If(全局.PioneerModeEnabled == 真);
			创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("{0}:{1}", 事件玩家.playerNickname, 事件玩家.Level), 右边, 999 - 事件玩家.Level, 颜色(白色), 颜色(白色), 颜色(橙色), 可见性，排序规则和字符串, 默认可见度);
			事件玩家.HUDEntity[1] = 上一个文本ID;
		Else;
			创建HUD文本(已过滤的数组(事件玩家, !事件玩家.GameComplete), 无, 无, 自定义字符串("检查点: {0} / {1} ({2}s)", 事件玩家.Level + 1, 数量(全局.CheckpointPosition) - 1,  事件玩家.ScoreOfThisRound), 顶部, 5,
				颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
			事件玩家.HUDEntity[2] = 上一个文本ID;
			创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("{0}: {2}S/第{1}关", 事件玩家.playerNickname, 事件玩家.Level, 事件玩家.ScoreOfThisRound), 右边,
				事件玩家.BestScore, 颜色(白色), 颜色(白色), 颜色(橙色), 可见性，排序规则和字符串, 默认可见度);
			事件玩家.HUDEntity[3] = 上一个文本ID;
		End;
		创建HUD文本((事件玩家.FreeMode||(事件玩家.GameComplete&&全局.Pioneer!=事件玩家)) ? 事件玩家 : 无, 英雄图标字符串(全部英雄[事件玩家.chooseHero]), 字符串("{0} {1}", 字符串("英雄"), 事件玩家.chooseHero + 1),
			全部英雄[事件玩家.chooseHero], 右边, 1001, 颜色(白色), 颜色(白色), 颜色(白色), 可见性，排序规则和字符串, 默认可见度);
		事件玩家.HUDEntity[4] = 上一个文本ID;
    }
}

规则("创建闯关者效果")
{
	事件
	{
		子程序;
		CreatePlayerEffect;
	}

	动作
	{
        创建地图文本(事件玩家.Invisible ? 无 : 所有玩家(所有队伍), 事件玩家.playerNickname, 事件玩家, 1, 不要截取, 可见，位置和字符串, 事件玩家.playerColor, 默认可见度);
		事件玩家.MapEntity[0] = 上一个文本ID;
		创建效果(数组(已过滤的数组(事件玩家, 数量(全局.CheckpointPosition) != 0), 事件玩家.Bot), 环, 颜色(绿色), 全局.CheckpointPosition[事件玩家.Level], 全局.RingRadius[1], 可见，位置和半径);
		事件玩家.EffectEntity[0] = 最后创建的实体;
		创建图标(数组(已过滤的数组(事件玩家, !事件玩家.GameComplete), 事件玩家.Bot), 全局.CheckpointPosition[事件玩家.Level + 1], 旗帜, 可见和位置, 颜色(黄色), 真);
		事件玩家.IconEntity[0] = 最后创建的实体;
		创建效果(数组(已过滤的数组(事件玩家, !事件玩家.GameComplete), 事件玩家.Bot), 环, 自定义颜色(全局.RGB[0], 全局.RGB[1], 全局.RGB[2], 全局.RGB[3]), 全局.CheckpointPosition[事件玩家.Level + 1],
			全局.RingRadius[0], 可见，位置和半径);
		事件玩家.EffectEntity[1] = 最后创建的实体;
		创建效果(数组(已过滤的数组(事件玩家, !事件玩家.GameComplete), 事件玩家.Bot), 光柱, 自定义颜色(全局.RGB[0], 全局.RGB[1], 全局.RGB[2], 全局.RGB[3]),
			全局.CheckpointPosition[事件玩家.Level + 1], 全局.RingRadius[0], 可见，位置和半径);
		事件玩家.EffectEntity[2] = 最后创建的实体;
		创建地图文本(数组(已过滤的数组(事件玩家, !事件玩家.GameComplete), 事件玩家.Bot), 全局.MapHint[0], 全局.CheckpointPosition[事件玩家.Level + 1], 2, 不要截取, 可见，位置和字符串, 颜色(白色),
			始终不可见);
		事件玩家.MapEntity[1] = 上一个文本ID;
		创建效果(数组(已过滤的数组(事件玩家, 全局.UltimateState[事件玩家.Level + 1] != 假), 事件玩家.Bot), 环, 自定义颜色(全局.RGB[4], 全局.RGB[5], 全局.RGB[6], 全局.RGB[7]),
			全局.UltimateState[事件玩家.Level + 1], 全局.RingRadius[2], 可见，位置和半径);
		事件玩家.EffectEntity[3] = 最后创建的实体;
		创建效果(数组(已过滤的数组(事件玩家, 全局.UltimateState[事件玩家.Level + 1] != 假), 事件玩家.Bot), 光柱, 自定义颜色(全局.RGB[4], 全局.RGB[5], 全局.RGB[6], 全局.RGB[7]),
			全局.UltimateState[事件玩家.Level + 1], 全局.RingRadius[2], 可见，位置和半径);
		事件玩家.EffectEntity[4] = 最后创建的实体;
		创建地图文本(数组(已过滤的数组(事件玩家, 全局.UltimateState[事件玩家.Level + 1] != 假), 事件玩家.Bot), 全局.MapHint[1], 全局.UltimateState[事件玩家.Level + 1], 2, 不要截取, 可见，位置和字符串,
			颜色(白色), 始终不可见);
		事件玩家.MapEntity[2] = 上一个文本ID;
		If(全局.SpherePosition != 无);
			"小球"
			创建效果(数组(已过滤的数组(事件玩家, 事件玩家.sphere_state == 假 && !事件玩家.GameComplete), 事件玩家.Bot), 球, 自定义颜色(全局.RGB[8], 全局.RGB[9], 全局.RGB[10], 全局.RGB[11]),
				全局.SpherePosition[事件玩家.Level + 1] + 矢量(0, 0.800, 0), 全局.SphereRadius, 可见，位置和半径);
			事件玩家.EffectEntity[5] = 最后创建的实体;
			"小球图标"
			创建地图文本(数组(已过滤的数组(事件玩家, 事件玩家.sphere_state == 假 && !事件玩家.GameComplete), 事件玩家.Bot), 全局.MapHint[2], 全局.SpherePosition[事件玩家.Level + 1] + 矢量(0,
				1.500, 0), 2, 不要截取, 可见，位置和字符串, 颜色(白色), 始终不可见);
			事件玩家.MapEntity[3] = 上一个文本ID;
			创建图标(数组(已过滤的数组(事件玩家, 事件玩家.sphere_state == 假 && !事件玩家.GameComplete), 事件玩家.Bot), 全局.SpherePosition[事件玩家.Level + 1] + 矢量(0, 0.800, 0), 加号, 可见，位置和颜色,
				颜色(橙色), 真);
			事件玩家.IconEntity[1] = 最后创建的实体;
		End;
	}
}

规则("创建Tips")
{
	事件
	{
		子程序;
		CreateTips;
	}

	动作
	{
		If(全局.Tips != 无);
			创建HUD文本(已过滤的数组(事件玩家, 全局.Tips[事件玩家.Level + 1] && !事件玩家.GameComplete && !事件玩家.FreeMode && !按钮被按下(事件玩家, 按钮(互动))), 自定义字符串(
				"{0}:　　　　　　　　　　　　　　　　　　　　　▼\n{1}\n", 英雄图标字符串(英雄(破坏球)), 全局.Tips[事件玩家.Level + 1]), 无, 无, 顶部, 100, 颜色(青绿色), 无, 无, 可见和字符串, 默认可见度);
			事件玩家.Entity[17] = 上一个文本ID;
		End;
	}
}

规则("变成球")
{
	事件
	{
		子程序;
		ResetBall;
	}

	动作
	{
		If(所用英雄(事件玩家) == 英雄(破坏球));
			While(!正在使用技能 1(事件玩家));
				事件玩家.IsReady = 假;
				设置启用技能 1(事件玩家, 真);
				可用按钮(事件玩家, 按钮(技能1));
				等待(0.250, 无视条件);
				按下按键(事件玩家, 按钮(技能1));
				等待直到 (正在使用技能 1(事件玩家), 0.500);
				事件玩家.IsReady = 真;
			End;
			If(!(事件玩家.FreeMode || 事件玩家.GameComplete) || 事件玩家 == 全局.Pioneer);
				禁用按钮(事件玩家, 按钮(技能1));
				禁用按钮(事件玩家, 按钮(主要攻击模式));
			End;
		End;
	}
}

规则("[子程序] 设置技能")
{
	事件
	{
		子程序;
		SetAbility;
	}

	动作
	{
		事件玩家.Ability1Used = 假;
		事件玩家.Ability2Used = 假;
		事件玩家.SecondaryFireUsed = 假;
		If(事件玩家.GameComplete || 事件玩家.FreeMode || 事件玩家.IsSpectating);
			If(全局.Pioneer != 事件玩家);
				可用按钮(事件玩家, 按钮(技能1));
				可用按钮(事件玩家, 按钮(主要攻击模式));
			End;
			设置启用技能 1(事件玩家, 全局.DefaultAliblty1Enabled && 全局.Pioneer != 事件玩家);
			设置启用技能 2(事件玩家, 全局.DefaultAliblty2Enabled);
			设置辅助攻击模式启用(事件玩家, 全局.DefaultSecondaryEnabled);
			设置启用终极技能(事件玩家, 全局.DefaultUltimateEnabled);
		Else;
			设置启用技能 1(事件玩家, 全局.Ability1State[事件玩家.Level]);
			设置启用技能 2(事件玩家, 全局.Ability2State[事件玩家.Level]);
			设置辅助攻击模式启用(事件玩家, 全局.SecondaryFireState[事件玩家.Level]);
			设置启用终极技能(事件玩家, 全局.UltimateState[事件玩家.Level]);
			禁用按钮(事件玩家, 按钮(主要攻击模式));
		End;
	}
}

规则("[子程序 ] 重置当前关卡")
{
	事件
	{
		子程序;
		Reset;
	}

	动作
	{
		While(全局.JumpState[事件玩家.Level] == 自定义字符串("跳跃点"));
			事件玩家.Level += 1;
		End;
		If(全局.Pioneer != 事件玩家);
			事件玩家.ultimate_log = 空数组;
		End;
		事件玩家.ultimate_info = 空数组;
		If(事件玩家.movementCollision == 真);
			事件玩家.movementCollision = 假;
			开启与环境的移动碰撞(事件玩家);
			设置引力(事件玩家, 100);
			设置移动速度(事件玩家, 100);
			设置技能冷却(事件玩家, 按钮(蹲下), 0);
		End;
		If(所用英雄(事件玩家) != 英雄(破坏球));
			播放效果(所有玩家(所在队伍(事件玩家)), 布丽吉塔恢复包护甲声音, 无, 事件玩家, 100);
			等待(0.300, 无视条件);
			开始强制玩家选择英雄(事件玩家, 英雄(半藏));
			事件玩家.SpectatingState = 假;
		End;
		调用子程序(ResetBall);
		设置状态(事件玩家, 无, 定身, 0.250);
		事件玩家.UltimateUsed = 假;
		事件玩家.IsReady = 假;
		事件玩家.sphere_state = 全局.SpherePosition[事件玩家.Level + 1] ? 假 : 真;
		事件玩家.HintFreq += 1;
		If(事件玩家.sphere_state == 假 && 事件玩家.HintFreq % 5 == 1);
			小字体信息(事件玩家, 全局.SmallHint[9]);
		End;
		If(全局.BotEnabled && 全局.actions != 无);
			If(事件玩家.HintFreq % 30 == 15 && 全局.actions[事件玩家.Level + 1] != 无 && 数量(已过滤的数组(全局.Bot, 当前数组元素.owner == 无)) > 0 && 事件玩家.Bot == 无);
				小字体信息(事件玩家, 全局.SmallHint[25]);
			Else If(事件玩家.HintFreq % 20 == 3 && 全局.actions[事件玩家.Level + 1] != 无 && 事件玩家.Bot != 无);
				小字体信息(事件玩家, 全局.SmallHint[32]);
			End;
		End;
		If(水平速度(事件玩家) >= 6.900);
			设置辅助攻击模式启用(事件玩家, 假);
			设置启用技能 1(事件玩家, 假);
			设置启用技能 2(事件玩家, 假);
			设置启用终极技能(事件玩家, 假);
		End;
		If(事件玩家 == 全局.Pioneer);
			全局.PioneerStarted = 假;
			全局.PioneerLandingPosition = 无;
			全局.PioneerSpherePosition = 无;
		End;
		If(!全局.PioneerModeEnabled && 事件玩家.Level == 0);
			停止追踪玩家变量(事件玩家, ScoreOfThisRound);
			事件玩家.ScoreOfThisRound = 0;
		End;
		施加推力(事件玩家, 方向(眼睛位置(事件玩家) + 眼睛位置(事件玩家) * 面朝方向(事件玩家), 所选位置(事件玩家)), 1, 至地图, 取消相反运动);
		等待(0.032, 无视条件);
		If((相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius) && 数量(
			全局.CheckpointPosition) != 0);
			传送(事件玩家, 全局.CheckpointPosition[事件玩家.Level]);
		End;
		事件玩家.IsReady = 真;
		If(事件玩家 == 全局.Pioneer);
			全局.PioneerStarted = 真;
		End;
		设置技能冷却(事件玩家, 按钮(辅助攻击模式), 0);
		设置技能冷却(事件玩家, 按钮(技能1), 0);
		设置技能冷却(事件玩家, 按钮(技能2), 0);
		施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
		If(全局.UltimateState[事件玩家.Level + 1] != (假 || 0));
			事件玩家.ultimate_info[0] = 全局.CheckpointPosition[事件玩家.Level];
			事件玩家.ultimate_info[1] = 全局.UltimateState[事件玩家.Level + 1];
			事件玩家.ultimate_info[2] = 事件玩家.ultimate_info[0] + 方向(事件玩家.ultimate_info[0], 事件玩家.ultimate_info[1]) * 1000;
			事件玩家.ultimate_info[3] = 与此方向的水平角度(方向(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]));
			事件玩家.ultimate_worked = 真;
		Else;
			事件玩家.ultimate_worked = 假;
			事件玩家.ultimate_info = 空数组;
		End;
		If(事件玩家.ultimate_log == 自定义字符串("已开启"));
			事件玩家.ultimate_worked = 真;
		End;
		If(事件玩家.Level < 事件玩家.cheat);
			事件玩家.cheat = 0;
		End;
	}
}

//创建文本
规则("[多行字符串] 快捷键说明")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.ShowHotKey), 无, 无, 自定义字符串("－－－－－－－－－－－－－－－－－－－－"), 左边, 10, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		For 全局变量(Idx, 0, 数量(全局.ShortKeyHint) - 1, 1);
        	创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.ShowHotKey), 无, 无, 单次赋值(全局.ShortKeyHint[全局.Idx]), 左边, 全局.Idx + 11, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		End;
		创建HUD文本(已过滤的数组(所有玩家(队伍1), 当前数组元素.FreeMode||(当前数组元素.GameComplete&&全局.Pioneer!=当前数组元素)), 无, 无,
			全局.ShortKeyHint[12], 右边, 2001, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
	}
}

规则("[多行字符串] 隐藏说明文本")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建HUD文本(所有玩家(队伍2), 全局.HiddenHint[4], 无, 无, 顶部, 17, 颜色(天蓝色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
		// 创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.ShowHotKey), 无, 无, 自定义字符串("－－－－－－－－－－－－－－－－－－－－"), 左边, 27, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		// For 全局变量(Idx, 0, 3, 1);
		// 	创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.ShowHotKey), 无, 无, 单次赋值(全局.HiddenHint[全局.Idx]), 左边, 单次赋值(全局.Idx + 28), 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
		// End;
		// If(全局.code == 自定义字符串("11NXY"));
		// 	创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.ShowHotKey), 无, 无, 单次赋值(全局.HiddenHint[3]), 左边, 单次赋值(31), 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
		// End;
	}
}

//初始化
规则("创建开拓者效果")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.PioneerModeEnabled == 真;
	}

	动作
	{
        创建效果(已过滤的数组(全局.Pioneer, 全局.PioneerLandingPosition != 假), 环, 颜色(黄色), 全局.PioneerLandingPosition, 全局.RingRadius[0], 可见，位置和半径);
        创建效果(已过滤的数组(全局.Pioneer, 全局.PioneerLandingPosition != 假), 光柱, 颜色(黄色), 全局.PioneerLandingPosition, 全局.RingRadius[0], 可见，位置和半径);
        创建效果(已过滤的数组(全局.Pioneer, 全局.Pioneer.UltimateUsed != (假 || 0)), 环, 颜色(亮紫色), 全局.Pioneer.UltimateUsed, 全局.RingRadius[2], 可见，位置和半径);
        创建效果(已过滤的数组(全局.Pioneer, 全局.Pioneer.UltimateUsed != (假 || 0)), 光柱, 颜色(亮紫色), 全局.Pioneer.UltimateUsed, 全局.RingRadius[2], 可见，位置和半径);
        "小球"
        创建效果(已过滤的数组(全局.Pioneer, 全局.PioneerSpherePosition != 假), 球, 自定义颜色(全局.RGB[8], 全局.RGB[9], 全局.RGB[10], 全局.RGB[11]),
            全局.PioneerSpherePosition + 矢量(0, 0.800, 0), 全局.SphereRadius, 可见，位置和半径);
        "小球图标"
        创建图标(已过滤的数组(全局.Pioneer, 全局.PioneerSpherePosition != 假), 全局.PioneerSpherePosition + 矢量(0, 0.800, 0), 加号, 可见，位置和颜色, 颜色(橙色), 真);
    }
}

规则("玩家初始化")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		开始强制玩家选择英雄(事件玩家, 英雄(半藏));
		事件玩家.Level = 0;
		事件玩家.ScoreOfThisRound = 0;
		事件玩家.chooseHero = 0;
		事件玩家.mistake = 0;
		事件玩家.cheat = 0;
		事件玩家.HintFreq = 0;
		事件玩家.InteractPressState = 0;
		事件玩家.IsReady = 真;
		事件玩家.ShowHotKey = 假;
		事件玩家.playerTittle = 首个(已过滤的数组(全局.Vips, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家)));
		事件玩家.playerNickname = 事件玩家.playerTittle ? (事件玩家.playerTittle[1] ? 事件玩家.playerTittle[1] : 自定义字符串("{0}", 事件玩家)) : 自定义字符串("{0}",
			事件玩家);
		事件玩家.playerColor = 事件玩家.playerTittle ? (事件玩家.playerTittle[2] == 颜色(白色) ? 自定义颜色(随机整数(0, 255), 随机整数(0, 255), 随机整数(0, 255), 255)
			: 事件玩家.playerTittle[2]) : 颜色(白色);
		If(是否是机器人(事件玩家) == 假);
			传送(事件玩家, 全局.CheckpointPosition[事件玩家.Level]);
			事件玩家.FreeMode = 假;
			调用子程序(ValidationPlayerData);
        	调用子程序(CreatePlayerHUDText);
        	调用子程序(CreateTips);
			调用子程序(ResetBall);
        	调用子程序(CreatePlayerEffect);
		End;
		事件玩家.Invisible = 假;
		事件玩家.IsSpectating = 假;
		事件玩家.movementCollision = 假;
		事件玩家.SpectatingState = 假;
		对所有玩家启用死亡回放(事件玩家);
		启用死亡回放时目标的HUD(事件玩家);
	}
}

规则("全局初始化")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		关闭游戏预设通告模式;
		关闭游戏预设计分模式;
		关闭游戏预设完成条件;
		关闭游戏预设音乐模式;
		隐藏计分板(所有玩家(所有队伍));
		If(数量(全局.CheckpointPosition) == 0);
			全局.CheckpointPosition = 空数组;
			全局.Ability1State = 空数组;
			全局.Ability2State = 空数组;
			全局.SecondaryFireState = 空数组;
			全局.Creator = 空数组;
			全局.UltimateState = 空数组;
		End;
		全局.RoomAliveHoursLeft = 4;
		全局.PlayersData = 空数组;
		设置比赛时间(1800);
		全局.PioneerLandingPosition = 无;
		全局.PioneerSpherePosition = 无;
        全局.BestScore[0] = 自定义字符串("");
        全局.BestScore[1] = 0;
        调用子程序(CreateHUDText);
	}
}

//存档
规则("验证玩家数据 ValidationPlayerData")
{
	事件
	{
		子程序;
		ValidationPlayerData;
	}

	动作
	{
		"如果数组中有玩家数据, 则将值赋给事件玩家 checkpoint, time, mistake, cheat"
		If(对任意为”真“(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家)));
			事件玩家.Level = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][1];
			事件玩家.ScoreOfThisRound = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][2];
			事件玩家.mistake = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][3];
			事件玩家.cheat = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][4];
			事件玩家.dataIndex = 数组值的索引(全局.PlayersData, 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0]) / 5;
		"反之, 将 玩家昵称, checkpoint, time, mistake, cheat 组成数组 添加到末尾索引"
		Else;
			事件玩家.dataIndex = 数量(全局.PlayersData);
			全局.PlayersData[数量(全局.PlayersData)] = 数组(自定义字符串("{0}", 事件玩家), 事件玩家.Level, 事件玩家.ScoreOfThisRound, 事件玩家.mistake, 事件玩家.cheat);
		End;
	}
}

规则("编辑玩家数据 EditPlayerData")
{
	事件
	{
		子程序;
		EditPlayerData;
	}

	动作
	{
		全局.PlayersData[事件玩家.dataIndex] = 事件玩家.Level < 数量(全局.CheckpointPosition) - 1 ? 数组(自定义字符串("{0}", 事件玩家), 事件玩家.Level,
			事件玩家.ScoreOfThisRound, 事件玩家.mistake, 事件玩家.cheat) : 数组(自定义字符串("{0}", 事件玩家), 0, 0, 0, 0);
	}
}

//关卡设置
规则("删除关卡后修复玩家关卡数")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Level >= 数量(全局.CheckpointPosition);
	}

	动作
	{
		事件玩家.Level = 数量(全局.CheckpointPosition) - 1;
		事件玩家.Level = 较大(事件玩家.Level, 0);
	}
}

规则("是否完成所有关卡 假")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Level < 数量(全局.CheckpointPosition) - 1;
	}

	动作
	{
		事件玩家.GameComplete = 假;
	}
}

规则("是否完成所有关卡 真")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		(数量(全局.CheckpointPosition) == 0 || 事件玩家.Level >= 数量(全局.CheckpointPosition) - 1) == 真;
	}

	动作
	{
		事件玩家.GameComplete = 真;
		调用子程序(SetAbility);
		If(全局.PioneerModeEnabled == 假 && 事件玩家.ScoreOfThisRound != 0);
			事件玩家.LastScore = 事件玩家.ScoreOfThisRound;
			If(事件玩家.cheat == 0);
				小字体信息(所有玩家(所有队伍), 自定义字符串("{0}{1}{2}", 事件玩家, 全局.SmallHint[5], 事件玩家.LastScore));
				事件玩家.BestScore = 事件玩家.ScoreOfThisRound;
				If(全局.BestScore[1] == 0 || 事件玩家.BestScore < 全局.BestScore[1]);
					全局.BestScore[0] = 自定义字符串("{0}", 事件玩家.playerNickname);
					全局.BestScore[1] = 事件玩家.LastScore;
				End;
			Else;
				小字体信息(所有玩家(所有队伍), 自定义字符串("{0}{1}{2}", 事件玩家, 全局.SmallHint[5],  自定义字符串("{0}{1}{2}", 事件玩家.LastScore, 全局.SmallHint[6], 英雄图标字符串(英雄(破坏球)))));
			End;
		End;
		停止追踪玩家变量(事件玩家, ScoreOfThisRound);
	}
}

规则("当玩家成为开拓者")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
	}

	动作
	{
		If(数量(全局.CheckpointPosition) < 1000);
			播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 100);
			事件玩家.FreeMode = 假;
			调用子程序(Reset);
		Else;
			小字体信息(事件玩家, 全局.SmallHint[0]);
			全局.PioneerStarted = 假;
			全局.Pioneer = 无;
		End;
		If(全局.UltimateState[事件玩家.Level + 1] != 假);
			施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
			大字体信息(事件玩家, 全局.SmallHint[1]);
			调用子程序(Reset);
		End;
		事件玩家.ultimate_log = 自定义字符串("已关闭");
		根据条件中止(事件玩家 != 全局.Pioneer);
		If(事件玩家.ultimate_log == 自定义字符串("已开启"));
			事件玩家.ultimate_worked = 真;
			小字体信息(事件玩家, 全局.SmallHint[2]);
		Else;
			事件玩家.ultimate_worked = 假;
			小字体信息(事件玩家, 全局.SmallHint[3]);
		End;
		事件玩家.UltimateUsed = 假;
	}
}

//技能设置
规则("记录玩家辅助攻击使用情况")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.SecondaryFireUsed == 假;
		正在使用辅助武器(事件玩家) == 真;
	}

	动作
	{
		事件玩家.SecondaryFireUsed = 真;
	}
}

规则("终极技能模拟CD(开始CD)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.DefaultUltimateEnabled == 真;
		正在使用终极技能(事件玩家) == 假;
		终极技能充能百分比(事件玩家) <= 1;
	}

	动作
	{
		事件玩家.UltimateCharge = 0;
	}
}

规则("一次性辅助攻击模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.OneTimeAbility == 真;
		事件玩家.FreeMode == 假;
		(!事件玩家.GameComplete || 事件玩家 == 全局.Pioneer) == 真;
		事件玩家.SecondaryFireUsed == 真;
		正在使用辅助武器(事件玩家) == 假;
	}

	动作
	{
		等待(0.500, 当为“假”时中止);
		If(相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius || !在地面上(事件玩家));
			If(事件玩家 != 全局.Pioneer || 全局.PioneerLandingPosition == 无);
				设置辅助攻击模式启用(事件玩家, 假);
			End;
		End;
	}
}

规则("一次性技能2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.OneTimeAbility == 真;
		事件玩家.FreeMode == 假;
		(!事件玩家.GameComplete || 事件玩家 == 全局.Pioneer) == 真;
		事件玩家.Ability2Used == 真;
		正在使用技能 2(事件玩家) == 假;
	}

	动作
	{
		等待(0.500, 当为“假”时中止);
		If(相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius || !在地面上(事件玩家));
			If(事件玩家 != 全局.Pioneer || 全局.PioneerLandingPosition == 无);
				设置启用技能 2(事件玩家, 假);
			End;
		End;
	}
}

规则("在地面上时 重置一次性技能")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.IsReady == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius;
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假 || 水平速度(事件玩家) < 6.900);
			调用子程序(SetAbility);
		End;
	}
}

规则("在地面上时 重置技能CD")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.IsReady == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius;
		技能冷却时间(事件玩家, 按钮(辅助攻击模式)) + 技能冷却时间(事件玩家, 按钮(技能1)) + 技能冷却时间(事件玩家, 按钮(技能2)) != 0;
	}

	动作
	{
		等待(0.032, 当为“假”时中止);
		设置技能冷却(事件玩家, 按钮(辅助攻击模式), 0);
		设置技能冷却(事件玩家, 按钮(技能1), 0);
		设置技能冷却(事件玩家, 按钮(技能2), 0);
	}
}

//玩家判定
规则("小球拾取")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.sphere_state == 假;
		事件玩家.IsReady == 真;
		事件玩家.FreeMode == 假;
		全局.Pioneer != 事件玩家;
		事件玩家.GameComplete == 假;
		相距距离(事件玩家, 全局.SpherePosition[事件玩家.Level + 1]) <= 全局.SphereJudgeRadius;
	}

	动作
	{
		事件玩家.sphere_state = !事件玩家.GameComplete && !事件玩家.FreeMode ? 真 : 假;
		小字体信息(事件玩家, 全局.SmallHint[7]);
		播放效果(事件玩家, 正面状态施加声音, 无, 事件玩家, 80);
		设置启用技能 1(事件玩家, 真);
		可用按钮(事件玩家, 按钮(技能1));
	}
}

规则("闯关者到达下一关")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.IsReady == 真;
		事件玩家.FreeMode == 假;
		全局.Pioneer != 事件玩家;
		事件玩家.GameComplete == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level + 1]) <= 全局.RingRadius;
		(!全局.JudgeWhenLanding || 在地面上(事件玩家)) == 真;
		事件玩家.ultimate_worked == 假;
		事件玩家.edit_mode == 0;
	}

	动作
	{
		If(!事件玩家.sphere_state);
			调用子程序(Reset);
			小字体信息(事件玩家, 全局.SmallHint[8]);
			播放效果(事件玩家, 爆炸声音, 无, 事件玩家, 100);
			中止;
		End;
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 100);
		事件玩家.Level += 1;
		事件玩家.HintFreq = 0;
		调用子程序(EditPlayerData);
		If(事件玩家.Level < 数量(全局.CheckpointPosition));
			调用子程序(Reset);
		End;
		If(事件玩家.Bot != 无);
			调用子程序(ReleaseBot);
		End;
	}
}

规则("闯关者圈外触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer != 事件玩家;
		事件玩家.FreeMode == 假;
		事件玩家.GameComplete == 假;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level + 1]) > 全局.RingRadius[0];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假);
			等待(0.016, 当为“假”时中止);
			事件玩家.mistake += 1;
			调用子程序(Reset);
		End;
	}
}

规则("开拓者圈外触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		事件玩家.FreeMode == 假;
		全局.PioneerLandingPosition == 无;
		全局.PioneerStarted == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假);
			If(相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) < 全局.RingRadius[1] * 2);
				大字体信息(事件玩家, 全局.SmallHint[24]);
				调用子程序(Reset);
				If(事件玩家.UltimateUsed != 假);
					If(相距距离(事件玩家.UltimateUsed, 所选位置(事件玩家)) >= 2 * 全局.RingRadius[2]);
						大字体信息(事件玩家, 全局.SmallHint[24]);
						调用子程序(Reset);
					End;
				End;
			Else;
				播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 100);
				全局.PioneerLandingPosition = 所选位置(事件玩家);
				设置启用技能 2(事件玩家, 事件玩家.Ability2Used);
				设置辅助攻击模式启用(事件玩家, 事件玩家.SecondaryFireUsed);
				设置启用终极技能(事件玩家, 事件玩家.UltimateUsed);
			End;
		End;
	}
}

规则("闯关者圈内触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer != 事件玩家;
		事件玩家.FreeMode == 假;
		事件玩家.GameComplete == 假;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius[1];
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level + 1]) > 全局.RingRadius[0];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假 || 水平速度(事件玩家) < 6.900);
			事件玩家.sphere_state = 全局.SpherePosition[事件玩家.Level + 1] ? 假 : 真;
		End;
	}
}

规则("开拓者圈内触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		事件玩家.FreeMode == 假;
		全局.PioneerLandingPosition == 无;
		全局.PioneerStarted == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius[1];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假);
			全局.PioneerSpherePosition = 无;
		End;
	}
}

规则("开拓者离开比赛")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	条件
	{
		全局.PioneerModeEnabled == 真;
		事件玩家 == 全局.Pioneer;
	}

	动作
	{
		全局.PioneerStarted = 假;
		全局.PioneerLandingPosition = 无;
		全局.Pioneer = 数组随机取值(已过滤的数组(所有玩家(所有队伍), 当前数组元素.GameComplete && 当前数组元素 != 事件玩家 && 当前数组元素 != 最后(全局.Creator)));
	}
}

规则("当玩家离开比赛")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	动作
	{
		If(事件玩家.Bot != 无);
			调用子程序(ReleaseBot);
		End;
		For 玩家变量(事件玩家, i, 0, 数量(事件玩家.MapEntity), 1);
			消除地图文本(事件玩家.MapEntity[事件玩家.i]);
		End;
		For 玩家变量(事件玩家, i, 1, 数量(事件玩家.HUDEntity), 1);
			消除HUD文本(事件玩家.HUDEntity[事件玩家.i]);
		End;
		For 玩家变量(事件玩家, i, 0, 数量(事件玩家.EffectEntity), 1);
			消除效果(事件玩家.EffectEntity[事件玩家.i]);
		End;
		For 玩家变量(事件玩家, i, 0, 数量(事件玩家.IconEntity), 1);
			消除图标(事件玩家.IconEntity[事件玩家.i]);
		End;
	}
}

规则("相移")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		具有状态(事件玩家, 相移) == 假;
	}

	动作
	{
		等待(0.250, 无视条件);
		清除状态(事件玩家, 相移);
		设置状态(事件玩家, 无, 相移, 9999);
	}
}

规则("阵亡复位")
{
	事件
	{
		玩家阵亡;
		双方;
		全部;
	}

	条件
	{
		被攻击方.IsSpectating == 假;
        是否是机器人(事件玩家) == 假;
	}

	动作
	{
		被攻击方.IsReady = 假;
		If(全局.Pioneer == 事件玩家 && 全局.PioneerLandingPosition == 无);
			全局.PioneerStarted = 假;
		End;
		If(!全局.PioneerModeEnabled && 事件玩家.Level == 0);
			停止追踪玩家变量(被攻击方, ScoreOfThisRound);
			被攻击方.ScoreOfThisRound = 0;
		End;
		被攻击方.FacingDirection = 面朝方向(被攻击方);
		清除状态(被攻击方, 相移);
		设置状态(被攻击方, 无, 相移, 16200);
		等待(0.032, 无视条件);
		If(全局.Pioneer == 事件玩家);
			If(全局.PioneerLandingPosition != 无);
				传送(被攻击方, 全局.PioneerLandingPosition);
			Else;
				传送(被攻击方, 全局.CheckpointPosition[被攻击方.Level]);
			End;
			等待(0.016, 无视条件);
			复活(被攻击方);
		Else;
			If(事件玩家.FreeMode || 事件玩家.GameComplete);
				传送(被攻击方, 最近的可行走位置(所选位置(被攻击方)));
				复活(被攻击方);
			Else If(数量(全局.CheckpointPosition) != 0);
				传送(被攻击方, 全局.CheckpointPosition[被攻击方.Level]);
				等待(0.016, 无视条件);
				复活(被攻击方);
			End;
		End;
		等待(0.500, 无视条件);
		设置朝向(被攻击方, 被攻击方.FacingDirection, 至地图);
		被攻击方.IsReady = 真;
		If(全局.Pioneer == 事件玩家 && 全局.PioneerLandingPosition == 无);
			全局.PioneerStarted = 真;
		End;
		调用子程序(ResetBall);
	}
}

禁用 规则("球形态关闭主要攻击模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用技能 1(事件玩家) == 真;
	}

	动作
	{
		设置主要攻击模式启用(事件玩家, 假);
	}
}

禁用 规则("开启主要攻击模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用技能 1(事件玩家) == 假;
		(事件玩家.FreeMode || 事件玩家.GameComplete) == 真;
	}

	动作
	{
		设置主要攻击模式启用(事件玩家, 真);
	}
}

//房间设置
规则("房间存活倒计时")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		比赛时间 == 0;
		全局.RoomAliveHoursLeft != 0;
	}

	动作
	{
		等待(1, 无视条件);
		全局.RoomAliveHoursLeft -= 1;
		设置比赛时间(3600);
	}
}

规则("跑酷模式计时开始")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.PioneerModeEnabled == 假;
		事件玩家.FreeMode == 假;
		事件玩家.IsReady == 真;
		事件玩家.GameComplete == 假;
		相距距离(所选位置(事件玩家), 首个(全局.CheckpointPosition)) > 全局.RingRadius;
		已重生(事件玩家) == 真;
	}

	动作
	{
		If(事件玩家.Level == 0);
			停止追踪玩家变量(事件玩家, ScoreOfThisRound);
			事件玩家.ScoreOfThisRound = 0;
		End;
		追踪玩家变量频率(事件玩家, ScoreOfThisRound, 16200, 1, 全部禁用);
	}
}

规则("通关或自由模式下无CD")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 != 全局.Pioneer;
		(事件玩家.GameComplete || 事件玩家.FreeMode) == 真;
		((技能冷却时间(事件玩家, 按钮(辅助攻击模式)) + 技能冷却时间(事件玩家, 按钮(技能1)) + 技能冷却时间(事件玩家, 按钮(技能2)) != 0) || 终极技能充能百分比(事件玩家) < 100) == 真;
	}

	动作
	{
		设置技能冷却(事件玩家, 按钮(辅助攻击模式), 0);
		设置技能冷却(事件玩家, 按钮(技能1), 0);
		设置技能冷却(事件玩家, 按钮(技能2), 0);
		设置终极技能充能(事件玩家, 100);
	}
}

//热键
规则("设置互动键按下状态")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		按钮被按下(全局.Pioneer, 按钮(互动)) == 真;
		全局.PioneerLandingPosition != 无;
	}

	动作
	{
		全局.Pioneer.InteractPressState = 1;
		等待(1, 当为“假”时中止);
		全局.Pioneer.InteractPressState = 2;
	}
}

规则("松开1帧后清除按下状态")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		按钮被按下(全局.Pioneer, 按钮(互动)) == 假;
	}

	动作
	{
		等待(0.016, 无视条件);
		全局.Pioneer.InteractPressState = 0;
	}
}


规则("[热键] 按R, 取消环境碰撞")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		(事件玩家.FreeMode || (事件玩家.GameComplete && 全局.Pioneer != 事件玩家)) == 真;
		事件玩家.IsSpectating == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
		按钮被按下(事件玩家, 按钮(近身攻击)) == 假;
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
	}

	动作
	{
		禁用 等待(1, 当为“假”时中止);
		事件玩家.movementCollision = !事件玩家.movementCollision;
		If(事件玩家.movementCollision);
			取消与环境的移动碰撞(事件玩家, 假);
			设置引力(事件玩家, 50);
			设置移动速度(事件玩家, 150);
			小字体信息(事件玩家, 自定义字符串("已取消环境碰撞"));
		Else;
			开启与环境的移动碰撞(事件玩家);
			设置引力(事件玩家, 100);
			设置移动速度(事件玩家, 100);
			小字体信息(事件玩家, 自定义字符串("已开启环境碰撞"));
		End;
	}
}

规则("左右键选择英雄")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		(事件玩家.FreeMode || (事件玩家.GameComplete && 全局.Pioneer != 事件玩家)) == 真;
		(按钮被按下(事件玩家, 按钮(主要攻击模式)) || 按钮被按下(事件玩家, 按钮(辅助攻击模式))) == 真;
	}

	动作
	{
		If(按钮被按下(事件玩家, 按钮(主要攻击模式)));
			事件玩家.chooseHero += 事件玩家.chooseHero == 数量(全部英雄) - 1 ? 1 - 数量(全部英雄) : 1;
		Else If(按钮被按下(事件玩家, 按钮(辅助攻击模式)));
			事件玩家.chooseHero -= 事件玩家.chooseHero == 0 ? 1 - 数量(全部英雄) : 1;
		End;
		预加载英雄(事件玩家, 全部英雄[事件玩家.chooseHero]);
	}
}

规则("语音上, 更换英雄")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		(事件玩家.FreeMode || (事件玩家.GameComplete && 全局.Pioneer != 事件玩家)) == 真;
		正在交流(事件玩家, 语音（上）) == 真;
	}

	动作
	{
		播放效果(所有玩家(所在队伍(事件玩家)), 布丽吉塔恢复包护甲声音, 无, 事件玩家, 100);
		等待(0.300, 无视条件);
		开始强制玩家选择英雄(事件玩家, 全部英雄[事件玩家.chooseHero]);
		事件玩家.SpectatingState = 假;
	}
}

规则("[热键] 开拓者放置小球")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		全局.PioneerLandingPosition == 无;
		全局.PioneerSpherePosition == 无;
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		事件玩家.pioneer_mode != 自定义字符串("传送点");
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
	}

	动作
	{
		全局.PioneerSpherePosition = 所选位置(事件玩家);
	}
}

规则("[热键] 开拓者确认开拓")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		全局.PioneerLandingPosition != 无;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		事件玩家.InteractPressState == 2;
	}

	动作
	{
		If(事件玩家.UltimateUsed != (0 || 假) || 事件玩家.ultimate_log == 自定义字符串("已关闭"));
			全局.JumpState[事件玩家.Level] = 事件玩家.pioneer_mode == 自定义字符串("传送点");
			事件玩家.InteractPressState = 0;
			全局.CheckpointPosition[事件玩家.Level + 1] = 全局.PioneerLandingPosition;
			全局.SecondaryFireState[事件玩家.Level] = 事件玩家.SecondaryFireUsed;
			全局.UltimateState[事件玩家.Level + 1] = 事件玩家.UltimateUsed;
			全局.SpherePosition[事件玩家.Level + 1] = 全局.PioneerSpherePosition;
			全局.Creator[事件玩家.Level] = 自定义字符串("{0}", 事件玩家);
			全局.PioneerStarted = 假;
			全局.PioneerLandingPosition = 无;
			全局.PioneerSpherePosition = 无;
			全局.Pioneer = 无;
			小字体信息(所有玩家(所有队伍), 全局.SmallHint[10]);
			事件玩家.Level += 1;
			调用子程序(SetAbility);
		Else;
			事件玩家.InteractPressState = 0;
			全局.PioneerLandingPosition = 无;
			全局.PioneerSpherePosition = 无;
			调用子程序(Reset);
			If(事件玩家.ultimate_log == 自定义字符串("已开启"));
				事件玩家.ultimate_worked = 真;
			Else;
				事件玩家.ultimate_worked = 假;
			End;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 全局.SmallHint[11]);
		End;
	}
}

规则("[热键] 开拓者取消开拓")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		全局.PioneerLandingPosition != 无;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		事件玩家.InteractPressState == 1;
	}

	动作
	{
		设置辅助攻击模式启用(事件玩家, 真);
		可用按钮(事件玩家, 按钮(辅助攻击模式));
		事件玩家.InteractPressState = 0;
		全局.PioneerLandingPosition = 无;
		全局.PioneerSpherePosition = 无;
		调用子程序(Reset);
		If(事件玩家.pioneer_mode == 自定义字符串("超级跳"));
			事件玩家.ultimate_worked = 真;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 全局.SmallHint[2]);
		Else If(事件玩家.pioneer_mode == 自定义字符串("正常模式"));
			事件玩家.ultimate_worked = 假;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 全局.SmallHint[3]);
		Else If(事件玩家.pioneer_mode == 自定义字符串("传送点"));
			事件玩家.ultimate_worked = 假;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 全局.SmallHint[4]);
		End;
	}
}

规则("[热键] 删除最后一关")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.PioneerModeEnabled == 真;
		按钮被按下(主机玩家, 按钮(装填)) == 真;
		按钮被按下(主机玩家, 按钮(技能2)) == 真;
	}

	动作
	{
		If(数量(全局.CheckpointPosition) != 0);
			等待(0.500, 当为“假”时中止);
			小字体信息(主机玩家, 全局.SmallHint[12]);
			等待(1.500, 当为“假”时中止);
			修改全局变量(CheckpointPosition, 根据索引从数组中移除, 数量(全局.CheckpointPosition) - 1);
			修改全局变量(Ability1State, 根据索引从数组中移除, 数量(全局.Ability1State) - 1);
			修改全局变量(Ability2State, 根据索引从数组中移除, 数量(全局.Ability2State) - 1);
			修改全局变量(SecondaryFireState, 根据索引从数组中移除, 数量(全局.SecondaryFireState) - 1);
			修改全局变量(UltimateState, 根据索引从数组中移除, 数量(全局.UltimateState) - 1);
			修改全局变量(SpherePosition, 根据索引从数组中移除, 数量(全局.SpherePosition) - 1);
			全局.Pioneer = 最后(全局.Creator);
			修改全局变量(Creator, 根据索引从数组中移除, 数量(全局.Creator) - 1);
			全局.PioneerStarted = 假;
			全局.PioneerLandingPosition = 无;
			If(数量(全局.CheckpointPosition) == 0);
				小字体信息(所有玩家(所有队伍), 全局.SmallHint[13]);
			Else;
				小字体信息(所有玩家(所有队伍), 全局.SmallHint[14]);
			End;
		Else;
			小字体信息(所有玩家(所有队伍), 全局.SmallHint[14]);
		End;
	}
}

规则("[热键] 重新开始游戏")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		存活(事件玩家) == 真;
	}

	动作
	{
		If(事件玩家.Bot != 无);
			调用子程序(ReleaseBot);
		End;
		事件玩家.FreeMode = 假;
		If(事件玩家 == 全局.Pioneer);
			全局.Pioneer = 无;
			全局.PioneerLandingPosition = 无;
			全局.PioneerStarted = 假;
		End;
		事件玩家.Level = 0;
		事件玩家.HintFreq = 0;
		调用子程序(Reset);
	}
}

规则("[热键] 到上一关")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
	}

	动作
	{
		If(事件玩家.Bot != 无);
			调用子程序(ReleaseBot);
		End;
		事件玩家.HintFreq = 0;
		If(事件玩家.Level > 0);
			事件玩家.Level -= 1;
		End;
		While(全局.JumpState[事件玩家.Level] == 自定义字符串("跳跃点"));
			事件玩家.Level -= 1;
		End;
		If(事件玩家 == 全局.Pioneer);
			全局.Pioneer = 无;
			全局.PioneerLandingPosition = 无;
			全局.PioneerStarted = 假;
		End;
		调用子程序(Reset);
	}
}

规则("[热键] 到下一关")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		地图工坊设置开关(自定义字符串("快捷键"), 自定义字符串("跳关"), 真, 0) == 真;
	}

	动作
	{
		If(事件玩家.Bot != 无);
			调用子程序(ReleaseBot);
		End;
		事件玩家.HintFreq = 0;
		事件玩家.Level += 1;
		If(事件玩家.cheat == 0);
			事件玩家.cheat = 事件玩家.Level;
		End;
		等待(1, 当为“假”时中止);
		While(按钮被按下(事件玩家, 按钮(蹲下)) == 真 && 按钮被按下(事件玩家, 按钮(终极技能)) == 真 && 按钮被按下(事件玩家, 按钮(装填)) == 真);
			事件玩家.Level += 1;
			等待(0.100, 无视条件);
		End;
	}
}

规则("[热键] 成为开拓者")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.PioneerModeEnabled == 真;
		事件玩家.GameComplete == 真;
		实体存在(全局.Pioneer) == 假;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		在地面上(事件玩家) == 真;
	}

	动作
	{
		If(全局.DisableContinuousCreation && 事件玩家 == 最后(全局.Creator));
			小字体信息(事件玩家, 全局.SmallHint[15]);
		Else If(数量(全局.CheckpointPosition) == 0);
			If(在地面上(事件玩家) == 假);
				小字体信息(事件玩家, 全局.SmallHint[16]);
			Else;
				修改全局变量(CheckpointPosition, 添加至数组, 所选位置(事件玩家));
				修改全局变量(UltimateState, 添加至数组, 假);
				全局.Pioneer = 事件玩家;
			End;
		Else;
			全局.Pioneer = 事件玩家;
		End;
		事件玩家.ultimate_worked = 假;
		事件玩家.ultimate_log = 自定义字符串("已关闭");
		事件玩家.UltimateUsed = 假;
		事件玩家.pioneer_mode = 自定义字符串("正常模式");
		调用子程序(ResetBall);
	}
}

规则("[热键] 死亡观战")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
	}

	动作
	{
		事件玩家.IsSpectating = !事件玩家.IsSpectating;
		If(事件玩家.IsSpectating);
			关闭游戏预设复生模式(事件玩家);
			击杀(事件玩家, 无);
			可用按钮(事件玩家, 按钮(主要攻击模式));
			等待(0.20, 无视条件);
			If(事件玩家.SpectatingState == 假);
				按下按键(事件玩家, 按钮(跳跃));
				等待(0.20, 无视条件);
				事件玩家.SpectatingState = 真;
			End;
			If(事件玩家.Bot != 无);
				For 玩家变量(事件玩家, i, 1, 栏位(事件玩家.Bot), 1);
					按下按键(事件玩家, 按钮(主要攻击模式));
					等待(0.10, 无视条件);
				End;
			End;
		Else;
			开启游戏预设复生模式(事件玩家);
			复活(事件玩家);
			调用子程序(ResetBall);
		End;
	}
}

规则("[热键] 死亡观战切换视角")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		事件玩家.IsSpectating == 真;
	}

	动作
	{
		事件玩家.SpectatingState = !事件玩家.SpectatingState;
	}
}

规则("[热键]开拓者切换模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		地图工坊设置开关(自定义字符串("快捷键"), 自定义字符串("超级跳模式开拓"), 真, 1) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) < 全局.RingRadius[1];
	}

	动作
	{
		If(事件玩家.pioneer_mode == 自定义字符串("正常模式"));
			事件玩家.pioneer_mode = 自定义字符串("超级跳");
			事件玩家.ultimate_log = 自定义字符串("已开启");
			事件玩家.ultimate_worked = 真;
			小字体信息(事件玩家, 全局.SmallHint[2]);
		Else If(事件玩家.pioneer_mode == 自定义字符串("超级跳"));
			事件玩家.pioneer_mode = 自定义字符串("传送点");
			事件玩家.ultimate_log = 自定义字符串("已关闭");
			事件玩家.ultimate_worked = 假;
			小字体信息(事件玩家, 全局.SmallHint[4]);
			事件玩家.ultimate_info = 空数组;
		Else If(事件玩家.pioneer_mode == 自定义字符串("传送点"));
			事件玩家.pioneer_mode = 自定义字符串("正常模式");
			小字体信息(事件玩家, 全局.SmallHint[3]);
		End;
	}
}

规则("[热键] 位移")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		((全局.Pioneer == 事件玩家 && 事件玩家.pioneer_mode == 自定义字符串("传送点"))) == 真;
		// (事件玩家.FreeMode || (事件玩家.GameComplete && 全局.Pioneer != 事件玩家) || (全局.Pioneer == 事件玩家 && 事件玩家.pioneer_mode == 自定义字符串("传送点"))) == 真;
		事件玩家.IsSpectating == 假;
		(正在使用技能 1(事件玩家) || 所用英雄(事件玩家) !=  英雄(破坏球)) == 真;
	}

	动作
	{
		传送(事件玩家, 所选位置(事件玩家) + 面朝方向(事件玩家) * 5);
		设置引力(事件玩家, 0);
		While(按钮被按下(事件玩家, 按钮(主要攻击模式)));
			传送(事件玩家, 所选位置(事件玩家) + 面朝方向(事件玩家) * 0.500);
			施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
			等待(0.010, 当为“真”时重新开始);
		End;
		设置引力(事件玩家, 100);
	}
}

规则("[热键] 杀死玩家")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
	}

	动作
	{
		等待(0.500, 当为“假”时中止);
		击杀(事件玩家, 无);
	}
}


规则("[热键] 开关隐身")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用表情交流(事件玩家) == 真;
	}

	动作
	{
		事件玩家.Invisible = !事件玩家.Invisible;
		If(事件玩家.Invisible);
			设置不可见(事件玩家, 全部);
			大字体信息(事件玩家, 全局.SmallHint[17]);
		Else;
			大字体信息(事件玩家, 全局.SmallHint[18]);
			设置不可见(事件玩家, 全部禁用);
		End;
	}
}

规则("[热键] 开关自由模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(近身攻击)) == 真;
		在地面上(事件玩家) == 真;
	}

	动作
	{
		等待(0.500, 当为“真”时重新开始);
		事件玩家.FreeMode = !事件玩家.FreeMode;
		If(事件玩家.FreeMode);
			修改全局变量(Pioneer, 根据值从数组中移除, 事件玩家);
			小字体信息(事件玩家, 全局.SmallHint[19]);
			调用子程序(SetAbility);
			If(事件玩家.ScoreOfThisRound != 0);
				停止追踪玩家变量(事件玩家, ScoreOfThisRound);
			End;
			If(事件玩家.Bot != 无);
				调用子程序(ReleaseBot);
			End;
		Else;
			小字体信息(事件玩家, 全局.SmallHint[20]);
			调用子程序(Reset);
			If(事件玩家.ScoreOfThisRound != 0 && !事件玩家.GameComplete);
				追踪玩家变量频率(事件玩家, ScoreOfThisRound, 16200, 1, 全部禁用);
			End;
		End;
	}
}

规则("[热键] 显示或隐藏快捷键")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
		按钮被按下(事件玩家, 按钮(近身攻击)) == 假;
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 假;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
	}

	动作
	{
		等待直到 (!按钮被按下(事件玩家, 按钮(互动)), 9999);
		等待直到 (按钮被按下(事件玩家, 按钮(互动)), 0.300);
		If(按钮被按下(事件玩家, 按钮(互动)));
			事件玩家.ShowHotKey = !事件玩家.ShowHotKey;
		End;
	}
}

//超级跳
规则("开拓者超级跳")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_worked == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		垂直速度(事件玩家) != 0;
		事件玩家 == 全局.Pioneer;
		水平速度(事件玩家) > 12;
	}

	动作
	{
		If(相距距离(全局.CheckpointPosition[事件玩家.Level], 所选位置(事件玩家)) > 6);
			事件玩家.ultimate_info = 空数组;
			设置辅助攻击模式启用(事件玩家, 假);
			事件玩家.pioneer_outline_countdown = 50;
			事件玩家.UltimateUsed = 所选位置(事件玩家);
			事件玩家.ultimate_worked = 假;
			While(Y方向分量(所选位置(事件玩家)) - Y方向分量(事件玩家.UltimateUsed) <= 3 && 事件玩家.pioneer_outline_countdown >= 1);
				等待(0.020, 无视条件);
				事件玩家.pioneer_outline_countdown -= 1;
			End;
			If(事件玩家.pioneer_outline_countdown < 1);
				施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
				设置状态(事件玩家, 无, 冰冻, 0.500);
				传送(事件玩家, 全局.CheckpointPosition[事件玩家.Level]);
				等待(0.250, 无视条件);
				事件玩家.ultimate_worked = 真;
				事件玩家.UltimateUsed = 假;
				事件玩家.InteractPressState = 0;
				全局.PioneerLandingPosition = 无;
				调用子程序(SetAbility);
				全局.PioneerSpherePosition = 无;
			End;
		Else;
			大字体信息(事件玩家, 全局.SmallHint[24]);
		End;
	}
}

规则("防止乱跑")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.ultimate_worked == 真;
		垂直速度(事件玩家) > 0;
		相距距离(所选位置(事件玩家), 全局.UltimateState[事件玩家.Level + 1]) > 全局.RingRadius;
		事件玩家.GameComplete == 假;
		事件玩家.FreeMode == 假;
	}

	动作
	{
		等待(0.200, 当为“假”时中止);
		设置状态(事件玩家, 无, 定身, 0.500);
		调用子程序(Reset);
		If(事件玩家.HintFreq % 5 == 2);
			小字体信息(事件玩家, 全局.SmallHint[23]);
		End;
	}
}

规则("超级跳")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_worked == 真;
		正在使用辅助武器(事件玩家) == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		垂直速度(事件玩家) > 5;
		事件玩家 != 全局.Pioneer;
		相距距离(所选位置(事件玩家), 全局.UltimateState[事件玩家.Level + 1]) <= 全局.RingRadius[2];
	}

	动作
	{
		事件玩家.ultimate_worked = 假;
	}
}

规则("两点一线检测")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) < 事件玩家.ultimate_info[3] + 0.350;
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) > 事件玩家.ultimate_info[3] - 0.350;
		"这是长度"
		相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) <= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]) + 2;
		"这是长度"
		相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) >= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[1]) - 2;
		全局.UltimateState[事件玩家.Level + 1] != (假 || 0);
		事件玩家.FreeMode == 假;
	}

	动作
	{
		事件玩家.ultimate_outline_countdown = 2;
		等待(0.050, 当为“假”时中止);
		如条件为”真“则循环;
	}
}

规则("超出两点一线范围")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_outline_countdown > 0;
		事件玩家.FreeMode == 假;
		事件玩家 != 全局.Pioneer;
	}

	动作
	{
		事件玩家.ultimate_outline_countdown -= 1;
		等待(0.100, 无视条件);
		如条件为”真“则循环;
		If((全局.UltimateState[事件玩家.Level + 1] && 事件玩家.ultimate_worked) != 假);
			设置状态(事件玩家, 无, 定身, 0.500);
			大字体信息(事件玩家, 全局.SmallHint[23]);
			调用子程序(Reset);
		End;
	}
}

规则("超级跳模式圈外低速复位")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		水平速度(事件玩家) <= 12;
		正在使用辅助武器(事件玩家) == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.FreeMode == 假;
		(全局.Pioneer != 事件玩家 ? 事件玩家.GameComplete == 假 : 真) == 真;
		在地面上(事件玩家) == 真;
		(事件玩家.ultimate_worked == 假 ? 全局.UltimateState[事件玩家.Level + 1] != (假 || 0) : 真) == 真;
	}

	动作
	{
		等待(0.016, 当为“假”时中止);
		调用子程序(Reset);
	}
}

规则("超级跳模式出圈禁用抓钩")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.ultimate_worked == 真;
		正在使用辅助武器(事件玩家) == 假;
		事件玩家.FreeMode == 假;
		(全局.Pioneer != 事件玩家 ? 事件玩家.GameComplete == 假 : 真) == 真;
	}

	动作
	{
		设置辅助攻击模式启用(事件玩家, 假);
	}
}

规则("防止起步在空中")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_log == 自定义字符串("已开启");
		正在空中(事件玩家) == 真;
		事件玩家 == 全局.Pioneer;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.FreeMode == 假;
		事件玩家.UltimateUsed == 假;
	}

	动作
	{
		等待(0.200, 无视条件);
		根据条件中止(事件玩家.ultimate_worked == 假);
		小字体信息(事件玩家, 全局.SmallHint[22]);
		调用子程序(Reset);
	}
}

规则("开拓者两点一线写入")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer == 事件玩家;
		事件玩家.ultimate_worked == 真;
		事件玩家.ultimate_info == 空数组;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 5;
	}

	动作
	{
		事件玩家.ultimate_info[0] = 全局.CheckpointPosition[事件玩家.Level];
		事件玩家.ultimate_info[1] = 所选位置(事件玩家);
		事件玩家.ultimate_info[2] = 事件玩家.ultimate_info[0] + 方向(事件玩家.ultimate_info[0], 事件玩家.ultimate_info[1]) * 1000;
		事件玩家.ultimate_info[3] = 与此方向的水平角度(方向(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]));
	}
}

规则("开拓者两点一线清除")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer == 事件玩家;
		事件玩家.FreeMode == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 5;
	}

	动作
	{
		事件玩家.ultimate_info = 空数组;
	}
}

规则("开拓者两点一线检测")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) < 事件玩家.ultimate_info[3] + 0.300;
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) > 事件玩家.ultimate_info[3] - 0.300;
		"这是长度"
		禁用 相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) <= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]) + 2;
		"这是长度"
		禁用 相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) >= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[1]) - 2;
		事件玩家.FreeMode == 假;
		事件玩家.ultimate_log == 自定义字符串("已开启");
		事件玩家 == 全局.Pioneer;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 5;
	}

	动作
	{
		等待(0.500, 无视条件);
		如条件为”真“则循环;
		根据条件中止(事件玩家.ultimate_info == 空数组);
		根据条件中止(事件玩家.ultimate_worked == 假);
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 30);
		大字体信息(事件玩家, 全局.SmallHint[21]);
		事件玩家.ultimate_info = 空数组;
		调用子程序(Reset);
	}
}

规则("开关跳转指定关卡")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		事件玩家.edit_mode == 0;
		事件玩家.IsSpectating == 假;
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 假;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(近身攻击)) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
	}

	动作
	{
		等待(0.650, 当为“假”时中止);
		事件玩家.JumpingCheckpoint = !事件玩家.JumpingCheckpoint;
		If(事件玩家.JumpingCheckpoint);
			创建HUD文本(事件玩家, 自定义字符串("左右移动鼠标来调整要前往的关卡\r\n　　　　　　【{0}】\r\n　　　左键确认，右键退出", 取整(数量(全局.CheckpointPosition) / 360 * (水平朝向角度(事件玩家)
				+ 180), 下)), 无, 无, 顶部, 5, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
			事件玩家.JumpingCheckpointHUD = 上一个文本ID;
			设置状态(事件玩家, 无, 定身, 9999);
		Else;
			消除HUD文本(事件玩家.JumpingCheckpointHUD);
			事件玩家.JumpingCheckpoint = 假;
			取消主要动作(事件玩家);
			清除状态(事件玩家, 定身);
		End;
	}
}

规则("跳转指定关卡")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		事件玩家.edit_mode == 0;
		事件玩家.IsSpectating == 假;
		事件玩家.JumpingCheckpoint != 假;
		(按钮被按下(事件玩家, 按钮(主要攻击模式)) || 按钮被按下(事件玩家, 按钮(辅助攻击模式))) == 真;
	}

	动作
	{
		If(按钮被按下(事件玩家, 按钮(主要攻击模式)));
			事件玩家.HintFreq = 0;
			If(事件玩家.cheat == 0 && 事件玩家.Level < 取整(数量(全局.CheckpointPosition) / 360 * (水平朝向角度(事件玩家) + 180), 下));
				事件玩家.cheat = 事件玩家.Level == 0 ? 1 : 事件玩家.Level;
			End;
			事件玩家.Level = 取整(数量(全局.CheckpointPosition) / 360 * (水平朝向角度(事件玩家) + 180), 下);
		Else If(按钮被按下(事件玩家, 按钮(辅助攻击模式)));
			消除HUD文本(事件玩家.JumpingCheckpointHUD);
			事件玩家.JumpingCheckpoint = 假;
			清除状态(事件玩家, 定身);
		End;
	}
}

//键盘
规则("Initial Global")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.xPos = 地图工坊设置实数(自定义字符串("键盘设置"), 自定义字符串("X-position"), -1.4, -3, 3, 0);
		全局.yPos = 地图工坊设置实数(自定义字符串("键盘设置"), 自定义字符串("Y-position"), -0.3, -2, 2, 0);
		全局.scale = 地图工坊设置实数(自定义字符串("键盘设置"), 自定义字符串("Scale"), 0.720, 0.300, 1, 1);
	}
}

规则("[热键] 开关键盘")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
	}

	动作
	{
		事件玩家.keyboard_enabled = !事件玩家.keyboard_enabled;
	}
}

规则("[热键] 按下跳跃")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
	}

	动作
	{
		事件玩家.keyboard_status_space = 真;
	}
}

规则("[热键] 松开跳跃")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
	}

	动作
	{
		事件玩家.keyboard_status_space = 假;
	}
}

规则("[热键] 按下蹲")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
	}

	动作
	{
		事件玩家.keyboard_status_ctrl = 真;
	}
}

规则("[热键] 松开蹲")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
	}

	动作
	{
		事件玩家.keyboard_status_ctrl = 假;
	}
}

规则("[热键] 按下右键")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
	}

	动作
	{
		事件玩家.keyboard_status_right = 真;
	}
}

规则("[热键] 松开右键")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
	}

	动作
	{
		事件玩家.keyboard_status_right = 假;
	}
}

规则("[热键] 按下左键")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
	}

	动作
	{
		事件玩家.keyboard_status_left = 真;
	}
}

规则("[热键] 松开左键")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 假;
	}

	动作
	{
		事件玩家.keyboard_status_left = 假;
	}
}

规则("显示键盘")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.keyboard_enabled == 真;
	}

	动作
	{
		全局.textSize = 3.600;
		全局.textX = -0.353;
		全局.textY = 0.712;
		全局.text = 自定义字符串("Q");
		全局.button = 按钮(终极技能);
		全局.text = 自定义字符串("W");
		全局.textX += 0.269;
		创建地图文本(事件玩家, 单次赋值(自定义字符串("▒")), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(黑色), 始终不可见);
		事件玩家.MapEntity[18] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 3.700 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, Z方向分量(阈值(事件玩家)) > 0.100 ? 颜色(白色) : 自定义颜色(33, 33, 33, 255),
			始终不可见);
		事件玩家.MapEntity[19] = 上一个文本ID;
		全局.text = 自定义字符串("E");
		全局.textX += 0.269;
		全局.button = 按钮(技能2);
		全局.text = 自定义字符串("R");
		全局.textX += 0.269;
		全局.button = 按钮(装填);
		全局.textX += 0.538;
		创建地图文本(事件玩家, 事件玩家.keyboard_status_left ? 输入绑定字符串(按钮(主要攻击模式)) : 自定义字符串(""), 逐帧更新(眼睛位置(事件玩家)
			+ 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale)) * 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale)
			- 0.200 - 0.040 * 全局.scale) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家)) - 90) + 3 * 面朝方向(事件玩家))),
			3.200 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(白色), 始终不可见);
		事件玩家.MapEntity[20] = 上一个文本ID;
		全局.textX += 0.269;
		创建地图文本(事件玩家, 事件玩家.keyboard_status_right ? 输入绑定字符串(按钮(辅助攻击模式)) : 自定义字符串(""), 逐帧更新(眼睛位置(事件玩家)
			+ 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale)) * 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale)
			- 0.200 - 0.040 * 全局.scale) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家)) - 90) + 3 * 面朝方向(事件玩家))),
			3.200 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(白色), 始终不可见);
		事件玩家.MapEntity[21] = 上一个文本ID;
		"Row 2"
		全局.textY -= 0.253;
		全局.text = 自定义字符串("A");
		全局.textX = -0.229;
		创建地图文本(事件玩家, 单次赋值(自定义字符串("▒")), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(黑色), 始终不可见);
		事件玩家.MapEntity[22] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 3.700 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, X方向分量(阈值(事件玩家)) > 0.100 ? 颜色(白色) : 自定义颜色(33, 33, 33, 255),
			始终不可见);
		事件玩家.MapEntity[23] = 上一个文本ID;
		全局.text = 自定义字符串("S");
		全局.textX += 0.269;
		创建地图文本(事件玩家, 单次赋值(自定义字符串("▒")), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(黑色), 始终不可见);
		事件玩家.MapEntity[24] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 3.700 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, Z方向分量(阈值(事件玩家)) < -0.100 ? 颜色(白色) : 自定义颜色(33, 33, 33, 255),
			始终不可见);
		事件玩家.MapEntity[25] = 上一个文本ID;
		全局.text = 自定义字符串("D");
		全局.textX += 0.269;
		创建地图文本(事件玩家, 单次赋值(自定义字符串("▒")), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(黑色), 始终不可见);
		事件玩家.MapEntity[26] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 3.700 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, X方向分量(阈值(事件玩家)) < -0.100 ? 颜色(白色) : 自定义颜色(33, 33, 33, 255),
			始终不可见);
		事件玩家.MapEntity[27] = 上一个文本ID;
		全局.text = 自定义字符串("F");
		全局.textX += 0.269;
		全局.button = 按钮(互动);
		"Row 3"
		全局.textSize = 3;
		全局.textY -= 0.253;
		全局.text = 自定义字符串("Shift");
		全局.textX = -0.478;
		全局.button = 按钮(技能1);
		全局.text = 自定义字符串("V");
		全局.textX = 0.975;
		全局.button = 按钮(近身攻击);
		全局.textSize = 3.600;
		"Row 4"
		全局.textY -= 0.253;
		全局.text = 自定义字符串("Ctrl");
		全局.textX = -0.584;
		全局.button = 按钮(蹲下);
		全局.textSize = 2;
		创建地图文本(事件玩家, 单次赋值(全局.text == 自定义字符串("Shift") ? 自定义字符串("▒▒") : (全局.text == 自定义字符串("Space")
			? 自定义字符串("▒▒▒▒▒▒") : 自定义字符串("▒"))), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale)) * 地图矢量(右, 事件玩家, 旋转) + (
			全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家)) - 90) + 3 * 面朝方向(事件玩家))),
			4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 自定义颜色(0, 0, 0, 180), 始终不可见);
		事件玩家.MapEntity[28] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 单次赋值(全局.textSize * 全局.scale), 不要截取, 可见，位置，字符串和颜色, 事件玩家.keyboard_status_ctrl ? 颜色(白色) : 自定义颜色(33, 33,
			33, 255), 始终不可见);
		事件玩家.MapEntity[29] = 上一个文本ID;
		全局.text = 自定义字符串("Space");
		全局.textX = 0.446;
		全局.button = 按钮(跳跃);
		全局.textSize = 3;
		创建地图文本(事件玩家, 单次赋值(全局.text == 自定义字符串("Shift") ? 自定义字符串("▒▒") : (全局.text == 自定义字符串("Space")
			? 自定义字符串("▒▒▒▒▒▒") : 自定义字符串("▒"))), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale)) * 地图矢量(右, 事件玩家, 旋转) + (
			全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家)) - 90) + 3 * 面朝方向(事件玩家))),
			4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 自定义颜色(0, 0, 0, 180), 始终不可见);
		事件玩家.MapEntity[30] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 单次赋值(全局.textSize * 全局.scale), 不要截取, 可见，位置，字符串和颜色, 事件玩家.keyboard_status_space ? 颜色(白色) : 自定义颜色(33, 33,
			33, 255), 始终不可见);
		事件玩家.MapEntity[31] = 上一个文本ID;
	}
}

规则("隐藏键盘")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.keyboard_enabled == 假;
	}

	动作
	{
		For 玩家变量(事件玩家, i, 18, 数量(事件玩家.MapEntity), 1);
			消除地图文本(事件玩家.MapEntity[事件玩家.i]);
		End;
	}
}

规则("炸房效果")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		总计消耗时间 > 16140;
	}

	动作
	{
		小字体信息(所有玩家(所有队伍), 自定义字符串("炸房倒计时: 60秒"));
		等待(50, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 10 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 9 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 8 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 7 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 6 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 5 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 4 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 3 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 2 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 1 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("Boom!"));
		等待(5, 无视条件);
		交流(所有玩家(所有队伍), 倒计时);
		等待(3, 无视条件);
		隐藏英雄HUD(所有玩家(所有队伍));
		隐藏游戏模式HUD(所有玩家(所有队伍));
		隐藏计分板(所有玩家(所有队伍));
		隐藏游戏模式地图UI(所有玩家(所有队伍));
		隐藏姓名板(所有玩家(所有队伍), 所有玩家(所有队伍));
		消除所有效果;
		消除所有图标;
		消除所有HUD文本;
		消除所有地图文本;
		移除所有机器人;
		等待(0.160, 无视条件);
		传送(所有玩家(所有队伍), 矢量(0, 500, 0));
		设置不可见(所有玩家(所有队伍), 全部);
		设置引力(所有玩家(所有队伍), 0);
		复活(所有玩家(所有队伍));
		开始镜头(所有玩家(所有队伍), (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2 + 与此角度的相对方向(比赛时间 * 7.500, -30) * 200, (
			最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2, 5);
		调用子程序(PlayDestroyMapEffect);
		等待(1, 无视条件);
		重新开始比赛;
	}
}


规则("播放破坏地图效果  PlayDestroyMapEffect -- by Mazattack#1183")
{
	事件
	{
		子程序;
		PlayDestroyMapEffect;
	}

	动作
	{
		If(当前地图 == 地图(监测站：直布罗陀));
			设置比赛时间(48 + 随机整数(与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 - 12, 与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 + -6));
		Else If(当前地图 == 地图(66号公路));
			设置比赛时间(48 + 随机整数(与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 - -6, 与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 + 12));
		Else;
			设置比赛时间(48 + 随机整数(与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 - 6, 与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 + 9));
		End;
		全局.Chase = (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2 + 与此角度的相对方向(随机整数(0, 359), 随机实数(-45, -60)) * 500;
		等待(0.016, 无视条件);
		持续追踪全局变量(Chase, (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2, 5, 终点及持续时间);
		While(相距距离(全局.Chase, (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2) > 1);
			播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(天蓝色), 全局.Chase, 3);
			等待(0.016, 无视条件);
		End;
		For 全局变量(Idx, 0, 400, 1);
			播放效果(所有玩家(所有队伍), 有害爆炸, 颜色(橙色), (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2 + 与此角度的相对方向(随机实数(0, 360), 0)
				* 随机整数(0, (全局.Idx + 1) / 1), 随机整数(全局.Idx / 5, 全局.Idx));
			播放效果(所有玩家(所有队伍), 有害爆炸, 颜色(橙色), (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2 + 与此角度的相对方向(随机实数(0, 360), 0)
				* 随机整数(0, (全局.Idx + 1) / 1), 全局.Idx);
			等待(0.016, 无视条件);
		End;
	}
}