设置
{
	主程序
	{
		描述: "仓鼠跑酷开拓者, by喜欢跑酷的小伙伴们. 更多跑酷点位和教学前往熔火工坊查看.\n编辑器代码: 11NXY, 合集代码:9ZDS3 | 0C1Q7 | VWA5E | HSCNX | DA92T | ETB2E"
		模式名称: "仓鼠跑酷"
	}

	大厅
	{
		比赛语音聊天: 启用
		玩家上限 队伍1: 9
		玩家上限 队伍2: 0
		观战者人数上限: 6
		返回大厅: 从不
		队列中的玩家可以加入: 是
	}

	模式
	{
		团队死斗
		{
			启用地图
			{
			}
		}

		突击模式
		{
			禁用地图
			{
				66号公路
				万圣节好莱坞
				万圣节艾兴瓦尔德
				哈瓦那
				圣诞节暴雪世界
				地图工坊室内
				地图工坊岛屿
				地图工坊岛屿（夜间）
				地图工坊空地
				地图工坊空地（夜间）
				地图工坊绿幕
				春节漓江塔
				漓江塔
			}
		}

		综合
		{
			允许切换英雄: 关闭
			复生时间: 5%
			急救包刷新: 禁用
			消灭提示: 关闭
			消灭镜头: 关闭
			游戏模式开始: 即时
			英雄限制: 关闭
			随机英雄复生: 开启
		}
	}

	英雄
	{
		队伍1
		{
			破坏球
			{
				终极技能（地雷禁区）: 关闭
				重力坠击 冷却时间: 0%
			}
		}

		队伍2
		{
			破坏球
			{
				动力铁球始终激活: 开启
				终极技能（地雷禁区）: 关闭
				重力坠击 冷却时间: 0%
			}
		}

		综合
		{
			无需装弹: 开启
			终极技能充能速度: 10%
			终极技能自动充能速度: 0%
			重生时终极技能充能完毕: 开启

			启用英雄
			{
				破坏球
			}

			秩序之光
			{
				传送面板: 关闭
			}
		}
	}

	地图工坊
	{
		X-position: -1.400
		Y-position: -0.300
		小球不透明度: 109
		小球判定大小: 2.200
		小球显示大小: 2.500
		小球红: 255
		小球绿: 105
		小球蓝: 180
		是否允许开拓: 开启
		是否开启机器人: 开启
		目标点圈不透明度: 161
		目标点圈大小: 1.800
		起飞点圈不透明度: 94
		跳关提醒: 关闭
	}

	扩展
	{
		增益状态效果
		爆炸声音
		播放更多效果
		生成更多机器人
	}
}

变量
{
	全局:
		0: CheckpointPosition
		1: Ability1State
		2: Ability2State
		3: SecondaryFireState
		4: UltimateState
		5: Creator
		6: RingRadius
		7: JudgeWhenLanding
		8: DefaultAliblty1Enabled
		9: DefaultAliblty2Enabled
		10: DefaultSecondaryEnabled
		11: DefaultUltimateEnabled
        12: Description
		13: OneTimeAbility
		14: DisableContinuousCreation
		15: PioneerModeEnabled
		16: Pioneer
		17: PioneerStarted
		18: PioneerLandingPosition
		19: PioneerSpherePosition
		20: BestScore
        21: MapHint
		22: SmallHint
        23: ShortKeyHint
		24: HiddenHint
        25: cheat_log
		26: RGB
		27: JumpState
		28: CheatRecord
		29: PlayersData
		30: RoomAliveHoursLeft
		31: SpherePosition
		32: SphereRadius
		33: SphereJudgeRadius
		34: Tips
        35: CurrentMap
		36: action_type
		37: actions
		38: bot_start_position
		39: bot_start_direction
        40: bot_position
        41: bot_owner
		42: Bot
		43: bot_direction
		44: action_value
		45: ActionEditModeEnabled
		46: bot_name
		47: bot_num
		48: bot_idx
		49: bot_action
		50: bot_max_action_time
		51: Chase
		52: bot_tips
		53: Idx
		54: BotEnabled
		55: Vips
		56: code
		57: version
		58: MapCreator
		98: xPos
		99: yPos
		100: textX
		101: textY
		102: scale
		104: button
		105: text
		106: textSize

	玩家:
		0: Level
		1: BestScore
		2: LastScore
		3: ScoreOfThisRound
		4: GameComplete
		5: IsReady
		6: Invisible
		7: FreeMode
		8: InteractPressState
		9: FacingDirection
		10: UltimateCharge
		11: Ability1Used
		12: Ability2Used
		13: SecondaryFireUsed
		14: UltimateUsed
		15: IsSpectating
		16: ultimate_worked
		17: ultimate_log
		18: ultimate_info
		19: ultimate_outline_countdown
		20: pioneer_outline_countdown
		21: cheat
		22: mistake
		23: dataIndex
		25: sphere_state
		26: pioneer_mode
		27: HintFreq
		28: Entity
		29: actions
		30: action_idx
		31: action_type
		32: current_action_type
		33: current_action
        34: Bot
		35: bot_position
		37: bot_state
		38: bot_start_direction
		39: bot_direction
		41: bot_trans_direction
		43: action_s_idx
		44: edit_mode
		45: SpectatingState
		46: chooseHero
		47: movementCollision
		48: HUDEntity
		49: MapEntity
		50: EffectEntity
		51: IconEntity
		52: JumpingCheckpoint
		53: JumpingCheckpointHUD
		54: ShowHotKey
		55: playerTittle
		56: playerNickname
		57: playerColor
		80: action_time
		81: owner
		82: bot_action
		83: i
		84: bot_tips
		100: keyboard_enabled
		101: keyboard_status_space
		102: keyboard_status_ctrl
		103: keyboard_status_right
		104: keyboard_status_left
}

子程序
{
	0: SetAbility
	1: Reset
	2: ResetBot
	3: ReleaseBot
	4: ResetBall
	5: EditPlayerData
	6: ValidationPlayerData
    7: CreateHUDText
    8: CreatePlayerHUDText
    9: CreatePlayerEffect
    10: CreateTips
	11: ReleaseBot2
	12: PlayDestroyMapEffect
	13: CreateBot
}

规则("禁用查看器")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		禁用查看器录制;
	}
}

规则("房主发感谢即可更新导出数据,随后在查看器导出全局数据")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		正在交流(主机玩家, 感谢) == 真;
	}

	动作
	{
		全局.CurrentMap = 当前地图;
		启用查看器录制;
		禁用查看器录制;
		小字体信息(主机玩家, 自定义字符串("点位数据已导出,请打开查看器复制"));
		小字体信息(主机玩家, 自定义字符串("别忘了选择当前地图和当前比赛模式哦！"));
	}
}

规则("头衔(勿删除, 自行添加)")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		"此条规则为自定义头衔"
		全局.Vips = 数组(数组(自定义字符串("明天又是新的一天"), 自定义字符串("{0} Tomorrow is another day", 技能图标字符串(英雄(天使), 按钮(技能1))), 颜色(白色)), 数组(自定义字符串("朝如青丝暮成雪"),
			自定义字符串("{0} 朝朝暮暮", 技能图标字符串(英雄(天使), 按钮(技能1))), 颜色(白色)), 数组(自定义字符串("长相思兮长相忆"), 自定义字符串("{0} 朝朝暮暮", 技能图标字符串(英雄(天使), 按钮(技能1))), 颜色(白色)), 数组(自定义字符串("Exit"),
			自定义字符串("{0} Exit", 技能图标字符串(英雄(安娜), 按钮(技能1))), 颜色(白色)), 数组(自定义字符串("栀子"), 自定义字符串("{0} Gardenia", 技能图标字符串(英雄(天使), 按钮(终极技能))), 颜色(白色)), 数组(自定义字符串("Gardenia"), 自定义字符串("{0} Gardenia", 技能图标字符串(英雄(天使), 按钮(终极技能))), 颜色(白色)),
			数组(自定义字符串("十元"), 自定义字符串("{0} 十元", 技能图标字符串(英雄(天使), 按钮(技能2))), 颜色(白色)), 数组(自定义字符串("石原里美"), 自定义字符串("{0} 十元", 技能图标字符串(英雄(天使), 按钮(技能2))), 颜色(白色)), 
			数组(自定义字符串("清尘、"), 自定义字符串("{0} 清尘、", 技能图标字符串(英雄(破坏球), 按钮(技能1))), 颜色(白色)), 数组(自定义字符串("哈蒙德大人"), 自定义字符串("{0} 2812345", 技能图标字符串(英雄(破坏球), 按钮(终极技能))), 颜色(白色)), 
			数组(自定义字符串("mzlnot"), 自定义字符串("{0} mzlnot", 技能图标字符串(英雄(破坏球), 按钮(技能2))), 颜色(白色)));
		"[0] 填写玩家昵称; \n[1] 填写显示文字, 如不填写, 默认为玩家昵称; \n[2] 填写文字颜色, 白色为随机颜色 "
		全局.Vips[数量(全局.Vips)] = 数组(自定义字符串(""), 自定义字符串(""), 颜色(白色));
		全局.Vips[数量(全局.Vips)] = 数组(自定义字符串(""), 自定义字符串(""), 颜色(白色));
		全局.Vips[数量(全局.Vips)] = 数组(自定义字符串(""), 自定义字符串(""), 颜色(白色));
	}
}

规则("[自定义] 展示文本,自行修改")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		"上传后修改此条再上传一次"
		全局.code = 自定义字符串("0C1Q7");
		"勿动"
		全局.version = 自定义字符串("3.0.0");
	}
}

//点位数据
规则("点位数据模板,参考该条修改")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		"记得修改地图"
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		"数据模板,勿动"
		继续;
		"只需要6条,其余删去"
		继续;
		"目标点位置"
		全局.CheckpointPosition = 数组();
		"是否使用抓钩"
		全局.SecondaryFireState = 数组();
		"是否超级跳"
		全局.UltimateState = 数组();
		"是否传送点"
		全局.JumpState = 数组();
		"小球位置"
		全局.SpherePosition = 数组();
		"作者"
		全局.Creator = 数组();
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  多拉多                  100             新手                    匿名")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(多拉多);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-2.200, 8.012, -1.631), 矢量(-8.841, 8.012, 5.395), 矢量(-1.510, -1.980, 18.955), 矢量(7.115, 0.010,
			17.126), 矢量(10.623, 2.182, 25.662), 矢量(13.259, 9.500, 12.349), 矢量(11.923, 9.543, -1.919), 矢量(10.589, 9.500, 12.070), 矢量(-2.403,
			8.131, -0.973), 矢量(10.556, 9.545, -4.179), 矢量(19.020, 4.060, -15.360), 矢量(21.673, 11, -24.005), 矢量(3.270, -0.388, -14.053), 矢量(
			17.077, 10, 11.946), 矢量(36.284, 9, 3.702), 矢量(21.987, 9.860, -0.080), 矢量(32.076, 2.046, 15.330), 矢量(52.837, 5.400, 13.589), 矢量(
			46.394, 9, 5.310), 矢量(29.493, 10.437, 23.590), 矢量(35.523, 9.384, -5.664), 矢量(22.412, 9.860, -6.854), 矢量(33.616, 11.087,
			-17.543), 矢量(46.864, 6.799, -34.865), 矢量(33.026, 8.036, -47.493), 矢量(29.183, 10.010, -35.907), 矢量(28.505, 4, -37.134), 矢量(
			29.572, 10.310, -35.433), 矢量(18.430, 10, -34.284), 矢量(17.945, 11.010, -23.893), 矢量(48.185, 6.940, -24.480), 矢量(39.471, 11.088,
			-17.935), 矢量(30.645, 3.764, -17.706), 矢量(62.608, 13.553, -17.811), 矢量(76.700, 11, -17.853), 矢量(78.126, 10.791, -44.499), 矢量(
			92.890, 9, -23.057), 矢量(105.928, 18, -5.421), 矢量(123.370, 9.409, -28.812), 矢量(125.430, 7.023, -13.083), 矢量(123.610, 17.933,
			7.575), 矢量(114.518, 18.447, -1.836), 矢量(118.399, 16.175, -10.541), 矢量(117.060, 18.324, 0.501), 矢量(128.753, 18, 7.785), 矢量(
			137.414, 18.076, 17.475), 矢量(157.434, 11, 42.801), 矢量(167.962, 11.036, 45.327), 矢量(176.369, 14.100, 43.050), 矢量(173.890,
			17.864, 53.332), 矢量(137.614, 11.050, 26.561), 矢量(130.100, 11.050, 17.002), 矢量(128.102, 16.011, 15.365), 矢量(127.035, 18.268,
			8.228), 矢量(123.411, 7.250, -8.887), 矢量(99.641, 10.120, -3.536), 矢量(88.013, 7.033, -9.223), 矢量(80.610, 17.556, -9.398), 矢量(
			88.921, 11.310, 8.188), 矢量(64.229, 16.452, 4.277), 矢量(63.275, 9.120, 6.583), 矢量(64.814, 16.442, 4.197), 矢量(41.040, 2, 19.164),
			矢量(9.667, 2.182, 22.483), 矢量(26.432, -1.781, 27.714), 矢量(7.545, -1.979, 25.521), 矢量(9.182, 2.367, 25.804), 矢量(13.195, 1.300,
			-11.047), 矢量(18.724, 3.924, -13.946), 矢量(5.875, -0.250, -4.464), 矢量(12.601, 9.542, -0.709), 矢量(27.662, 1.021, 15.468), 矢量(
			41.045, 9, -0.383), 矢量(44.689, 2, 12.978), 矢量(52.769, 6.932, 9.738), 矢量(68.859, 17, 41.739), 矢量(86.986, 14.302, 42.677), 矢量(
			96.391, 12.760, 30.424), 矢量(129.920, 11.050, 15.871), 矢量(128.056, 17.750, 13.737), 矢量(161.992, 11, 18.063), 矢量(193.471, 14.951,
			41.080), 矢量(142.044, 11, 37.984), 矢量(173.087, 11, 43.756), 矢量(173.815, 19, 46.586), 矢量(179.083, 11.021, 25.590), 矢量(180.931,
			15.012, 27.188), 矢量(168.956, 10.850, 39.069), 矢量(171.282, 18.955, 50.911), 矢量(198.461, 16.980, 68.669), 矢量(194.830, 15,
			32.346), 矢量(166.867, 11, 29.489), 矢量(178.123, 14.100, 35.257), 矢量(173.083, 19.110, 45.135), 矢量(186.882, 15, 26.120), 矢量(
			179.010, 11, 32.029), 矢量(178.739, 14.110, 34.681), 矢量(178.750, 11.021, 25.299), 矢量(170.135, 19, 46.981), 矢量(132.164, 11.050,
			20.759), 矢量(117.508, 16.181, -11.888));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 真, 真, 假, 假, 真, 假, 真, 假, 假, 真, 真, 真, 假, 假, 真, 假, 假, 真, 假, 假, 真, 假, 真,
			真, 真, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 假, 真, 假, 真, 假, 真, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 真, 假, 真, 假, 假, 真, 假, 假,
			真, 假, 真, 真, 真, 真, 假, 假, 假, 假, 真, 真, 真, 真, 假, 假, 假, 真, 假, 真, 真, 真, 真);
		全局.Creator = 数组(自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("一直很低调"), 自定义字符串("一直很低调"), 自定义字符串("一直很低调"), 自定义字符串("一直很低调"), 自定义字符串("一直很低调"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("一直很低调"), 自定义字符串("一直很低调"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串(
			"此人已匿名"), 自定义字符串("此人已匿名"), 自定义字符串("此人已匿名"));
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  花村                   26                                         第一帅  柠檬")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(14.429, 4, -73.904), 矢量(24.384, 3.887, -80.913), 矢量(20.052, -1.949, -67.316), 矢量(15.521, 4.164,
			-72.623), 矢量(28.941, 1.821, -43.900), 矢量(17.455, 3.646, -46.734), 矢量(0.312, 5, -40.901), 矢量(0.360, 4.078, -58.215), 矢量(-7.798,
			9.209, -65.062), 矢量(-10.866, 4.959, -37.178), 矢量(-21.604, -1.236, -18.433), 矢量(-16.335, 3, -47.054), 矢量(-9.871, -0.925,
			-75.844), 矢量(-3.172, 2.540, -82.642), 矢量(-1.885, 4, -66.969), 矢量(-12.744, 9.209, -70.132), 矢量(-21.441, -1, -49.227), 矢量(0.570,
			4.078, -58.026), 矢量(-23.586, -1, -54.081), 矢量(-18.651, 1, -59.763), 矢量(-0.112, 5, -36.811), 矢量(5.743, 0, 8.834), 矢量(5.652,
			7.781, 6.936), 矢量(-17.425, 3.975, 12.062), 矢量(31.511, 2, -26.202), 矢量(33.515, 3.461, -19.322), 矢量(35.388, 2, -24.281));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 真, 真, 假, 假, 假, 真, 真, 真, 假, 真, 真, 假, 真, 真, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  努巴尼                7 0                                             糯糯子")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(努巴尼);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(2.014, 0.075, 7.478), 矢量(8.087, -0.175, 12.976), 矢量(15.609, -0.175, 17.157), 矢量(22.954, 4.390,
			17.039), 矢量(26.996, 6.262, 16.740), 矢量(36.725, 5.250, 10.115), 矢量(29.662, 6.250, 21.373), 矢量(28.298, 6.250, 33.856), 矢量(17.225,
			2.190, 40.771), 矢量(9.349, 6.250, 36.252), 矢量(7.368, 0.075, 24.818), 矢量(10.027, -0.175, 1.311), 矢量(15.212, 6.250, 7.802), 矢量(
			6.923, -0.183, 16.687), 矢量(8.128, 6.250, 28.262), 矢量(15.498, -0.175, 17.174), 矢量(17.913, 6.250, 12.078), 矢量(44.583, -2.175,
			9.679), 矢量(54.300, 2.370, 15.690), 矢量(95.125, 0.059, 0.710), 矢量(95.020, 6.250, 5.507), 矢量(88.227, 0.058, 8.257), 矢量(88.856,
			6.250, 13.646), 矢量(71.905, -0.750, -21.309), 矢量(72.713, 6.250, -17.764), 矢量(79.289, 7.085, -25.083), 矢量(153.217, -3.750,
			-10.442), 矢量(156.968, 3.808, -7.303), 矢量(153.764, -4.176, 12.455), 矢量(155.634, 3.058, 15.579), 矢量(143.975, -3.750, 41.154), 矢量(
			149.178, 2.250, 29.674), 矢量(131.862, -4.165, 15.713), 矢量(136.762, 2.250, 19.506), 矢量(137.860, -3.925, 9.211), 矢量(137.131,
			2.250, 19.963), 矢量(128.062, -4.175, 10.094), 矢量(125.102, 2.505, 16.394), 矢量(114.120, 5.497, 22.040), 矢量(115.242, 4.505, 5.220),
			矢量(126.479, 4.649, 5.995), 矢量(169.715, -2.674, 5.992), 矢量(177.102, -1.915, 7.176), 矢量(178.449, 4.250, 11.681), 矢量(202.954,
			-3.801, -3.800), 矢量(200.782, 0.199, 0.344), 矢量(207.762, 0.199, 37.337), 矢量(203.188, 4.209, 42.472), 矢量(203.613, 0.199, 8.555),
			矢量(176.249, -2.185, 1.595), 矢量(156.591, 2.250, 16.890), 矢量(90.187, 6.250, 13.962), 矢量(37.646, 5.250, 8.612), 矢量(73.045, 5.748,
			-24.691), 矢量(148.782, -2.438, -7.918), 矢量(149.801, 4.175, -6.105), 矢量(153.764, -4.175, 12.568), 矢量(151.272, 2.260, 21.178), 矢量(
			109.218, -1.884, 22.722), 矢量(112.484, 5.209, 20.908), 矢量(53.758, -2.175, 10.395), 矢量(54.658, 2.371, 15.840), 矢量(64.289, 6.987,
			19.958), 矢量(74.364, 6.250, 11.088), 矢量(70.828, 6.250, -0.817), 矢量(79.376, 6.250, -8.919), 矢量(83.342, 0.250, -14.621), 矢量(
			78.511, 6.250, -18.104), 矢量(117.862, -4.179, 13.577), 矢量(122.081, 2.260, 17.821), 矢量(152.773, -4.175, 12.877));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 真, 假, 假, 假, 真, 假, 假, 真, 假, 假, 假, 真, 假, 真, 假, 假, 假,
			假, 假, 假, 假, 假, 真, 假, 假, 真, 假, 真, 假, 真, 真, 真, 真, 真, 真, 真, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 假, 假, 假, 真, 假, 真);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.MapCreator = 自定义字符串("糯糯子");
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  圣诞花村            100        新手进阶                    第一帅")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(圣诞节花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(13.885, 6.754, -20.557), 矢量(14.414, 4.080, 7.495), 矢量(23.939, 6, 9.663), 矢量(13.747, 0.938, -4.058),
			矢量(-5.785, 7.979, -10.231), 矢量(-4.424, 7.090, -19.726), 矢量(4.748, 8.049, -11.500), 矢量(29.632, 10.460, -3.829), 矢量(35.099,
			13.963, 21.391), 矢量(48.694, 14.567, 17.051), 矢量(62.066, 6, -13.606), 矢量(29.296, 10.471, -4.547), 矢量(28.502, 2.010, -28.748),
			矢量(14.886, 4, -74.566), 矢量(9.216, 7.010, -81.675), 矢量(-7.620, 2.425, -77.095), 矢量(-4.276, 4, -64.882), 矢量(-38.084, 1, -62.458),
			矢量(-32.646, 1, -56.078), 矢量(-24.301, -1, -47.060), 矢量(-18.527, -1.322, -34.746), 矢量(-13.325, 1, -33.678), 矢量(-15.130, 3,
			-44.237), 矢量(-9.926, 7.090, -27.614), 矢量(-1.667, 4.971, -34.978), 矢量(13.177, 6.740, -20.447), 矢量(12.250, 11.353, 21.403), 矢量(
			9.647, -0.860, 26.282), 矢量(7.077, 3.999, 26.890), 矢量(-12.654, 1, 27.318), 矢量(-16.749, 3.964, 24.300), 矢量(-6.684, 8, -11.164),
			矢量(-13.517, -0.939, -24.788), 矢量(-13.397, 1, -33.918), 矢量(-22.472, -1, -46.133), 矢量(-16.676, 3, -44.646), 矢量(-26.091, 1,
			-69.753), 矢量(-9.324, 9.219, -66.896), 矢量(6.946, 4, -75.530), 矢量(-15.562, 9.552, -89.814), 矢量(-19.492, 9.219, -76.946), 矢量(
			-2.819, 2.540, -82.611), 矢量(12.823, 7.142, -48.979), 矢量(28.290, 2, -28.556), 矢量(12.837, 0, -23.786), 矢量(14.072, 4.076, 8.595),
			矢量(7.175, 4, 27.512), 矢量(12.118, 11.344, 20.992), 矢量(8.897, 6.930, -20.901), 矢量(-4.733, 7, -20.524), 矢量(11.625, -1.256,
			37.617), 矢量(-9.567, 4, 12.266), 矢量(-14.099, 3.864, 13.525), 矢量(-6.324, 7.982, 12.409), 矢量(-16.358, 3.984, 23.443), 矢量(-23.417,
			-1.260, -13.352), 矢量(-20.591, -1, -52.066), 矢量(-15.139, 3, -44.497), 矢量(5.511, 7.813, -5.832), 矢量(1.855, 1, -1.354), 矢量(10.651,
			11.230, 17.685), 矢量(9.776, 6.860, -19.507), 矢量(-13.167, 1.008, -26.025), 矢量(-15.620, -1.191, -18.035), 矢量(-6.926, 1, -13.858),
			矢量(-0.249, 5, -35.938), 矢量(0.674, 4, -59.054), 矢量(37.076, 3, -70.743), 矢量(36.698, 2.009, -32.524), 矢量(12.865, 6.741, -20.588),
			矢量(6.332, 0, 9.481), 矢量(9.061, 4.121, 6.873), 矢量(5.986, 7.700, -1.795), 矢量(40.049, 6.090, -5.742), 矢量(62.409, 6, -3.090), 矢量(
			65.761, -2.016, 6.442), 矢量(56.466, 0.878, 5.135), 矢量(50.224, 6, 6.627), 矢量(28.223, 10.456, 5.470), 矢量(14.703, 4.396, -44.462),
			矢量(20.645, 4.270, -40.817), 矢量(23.455, 2.642, -35.077), 矢量(25.526, -1.220, -44.682), 矢量(29.014, 1.827, -43.603), 矢量(25.180,
			-1.529, -47.120), 矢量(30.155, 1.762, -47.795), 矢量(34.976, 3.497, -50.665), 矢量(37.138, -1.380, -65.627), 矢量(42.433, 3.028,
			-74.555), 矢量(25.049, 1.965, -62.208), 矢量(20.417, 2.810, -57.957), 矢量(14.452, 3.714, -53.883), 矢量(8.293, 7.010, -84.421), 矢量(
			7.556, -1.904, -78.404), 矢量(6.363, 4, -75.377), 矢量(-3.391, -1.903, -67.527), 矢量(-1.682, 4, -66.717), 矢量(-9.473, 9, -65.468),
			矢量(-21.037, 4, -57.972), 矢量(-32.062, 1, -68.440), 矢量(-22.108, 2.996, -66.528));
		全局.SecondaryFireState = 数组(真, 假, 假, 真, 假, 假, 真, 真, 真, 真, 真, 真, 真, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 真, 真, 假, 假, 真, 假, 真, 假, 假, 假, 假,
			真, 真, 假, 真, 假, 假, 真, 真, 假, 真, 真, 真, 真, 真, 真, 真, 假, 假, 假, 真, 真, 假, 真, 假, 真, 假, 真, 假, 假, 真, 真, 真, 真, 真, 真, 假, 假, 真, 真, 假, 假, 假,
			真, 真, 假, 假, 真, 假, 假, 假, 假, 假, 假, 真, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.MapCreator = 自定义字符串("哔哩哔哩第一帅");
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  花村                  28              新手            匿名")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(55.150, -1.871, 27.750), 矢量(51.649, -1.171, 9.029), 矢量(55.506, 0.888, 5.193), 矢量(49.250, 6, 8.508),
			矢量(37.208, 6, 16.325), 矢量(26.480, 6, 10.214), 矢量(17.832, 9.335, 17.005), 矢量(8.758, 11.238, 19.364), 矢量(-15.754, 1, -1.999), 矢量(
			-18.032, -1.099, -12.019), 矢量(-9.322, 1, -16.988), 矢量(-5.297, 7.996, -11.258), 矢量(12.835, 6.742, -21.937), 矢量(2.364, 1.022,
			-31.396), 矢量(0.085, 5, -35.265), 矢量(-13.605, 1, -34.972), 矢量(-22.510, -1, -47.804), 矢量(-15.116, 3, -44.934), 矢量(-4.265, 4.125,
			-60.405), 矢量(14.199, -5.100, -86.370), 矢量(19.639, -3.919, -86.830), 矢量(16.102, -1, -80.590), 矢量(10.151, -1, -73.890), 矢量(2.727,
			-1, -71.149), 矢量(-11.942, 9.010, -67.716), 矢量(15.046, 4, -74.399), 矢量(16.035, 4.587, -46.852), 矢量(13.035, 7.082, -48.945), 矢量(
			28.789, 10.452, -3.419));
		全局.SecondaryFireState = 数组(真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 真, 假, 假, 真, 假, 真, 真, 真, 假, 真);
		全局.MapCreator = 自定义字符串("此人已匿名");
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  多拉多                  21               中等              栀子")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(多拉多);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(177.147, 11, 32.456), 矢量(176.740, 14.100, 37.235), 矢量(171.139, 19.100, 45.038), 矢量(173.246, 11,
			42.593), 矢量(174.258, 19.100, 46.102), 矢量(164.075, 17.813, 59.431), 矢量(176.462, 18.012, 63.634), 矢量(173.606, 11.012, 20.127),
			矢量(181.173, 15.012, 28.124), 矢量(173.458, 19.100, 45.830), 矢量(129.663, 11.060, 35.654), 矢量(126.349, 18, 37.025), 矢量(114.103,
			10.883, 24.178), 矢量(112.537, 18, 32.213), 矢量(112.194, 18.056, 11.247), 矢量(116.780, 18.324, 0.307), 矢量(112.512, 11.310,
			-20.113), 矢量(118.640, 16.299, -11.388), 矢量(93.783, 6.784, -2.693), 矢量(140.454, 11, 26.425), 矢量(137.553, 18.066, 17.058), 矢量(
			114.326, 18.245, -1.208));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 真, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假);
		全局.MapCreator = 自定义字符串("Gardenia");
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  艾兴瓦尔德          36                                    栀子 无心")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(艾兴瓦尔德);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(80.271, 12.728, -82.216), 矢量(71.461, 13.313, -75.858), 矢量(64.620, 12.421, -89.517), 矢量(51.787,
			18.198, -76.976), 矢量(34.788, 14, -77.798), 矢量(13.922, 11.262, -82.424), 矢量(19.835, 9, -25.140), 矢量(8.659, 10.391, -38.073), 矢量(
			-5.584, 10.632, -32.475), 矢量(-2.370, 5, -14.914), 矢量(23.550, 7.324, -54.073), 矢量(10.259, 5.858, -62.134), 矢量(11.816, 8.373,
			-71.652), 矢量(9.655, 11.261, -82.976), 矢量(14.724, 6.043, -95.576), 矢量(13.520, 11.012, -92.012), 矢量(21.524, 11, -72.905), 矢量(
			80.562, 21.153, -65.891), 矢量(69.389, 13.738, -90.982), 矢量(54.251, 22.676, -103.651), 矢量(34.263, 13.583, -86.133), 矢量(49.180,
			7.497, -102.743), 矢量(48.734, 11.888, -99.135), 矢量(50.424, 17.896, -99.940), 矢量(58.623, 10.987, -87.845), 矢量(59.142, 18.046,
			-85.966), 矢量(57.678, 11.112, -88.253), 矢量(57.780, 18.916, -94.554), 矢量(88.977, 12.988, -96.588), 矢量(93.431, 13.264, -78.848),
			矢量(59.294, 18.046, -80.260), 矢量(79.724, 21.164, -65.528), 矢量(88.216, 13.355, -95.590), 矢量(100.428, 9.603, -91.965), 矢量(93.828,
			13.278, -79.674), 矢量(103.053, 17.708, -72.027), 矢量(26.321, 5.669, -48.267));
		全局.SecondaryFireState = 数组(假, 假, 真, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 真, 假, 真, 真, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 真, 假, 假, 假, 真, 假,
			真);
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  监测站                 13              亿点难           技术")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(监测站：直布罗陀);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(18.190, -5, -66.882), 矢量(17.567, 3.042, -66.809), 矢量(32.760, 3.046, -74.602), 矢量(27.512, 0.058,
			-128.732), 矢量(26.271, 3.022, -87.408), 矢量(41.043, -4.987, -74.713), 矢量(42.622, 3.044, -69.848), 矢量(30.532, 3.043, -54.183), 矢量(
			75.045, 2.107, -34.422), 矢量(65.912, -2.989, -15.369), 矢量(68.732, -3.168, -11.916), 矢量(77.124, 1.881, -10.034), 矢量(83.817,
			-3.192, -2.693), 矢量(84.972, 6, 2.109));
		全局.SecondaryFireState = 数组(假, 假, 真, 真, 真, 假, 假, 真, 真, 假, 假, 假, 假);
		全局.MapCreator = 自定义字符串("技术的疯狂");
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  多拉多                   29                               小枫")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(多拉多);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(4.737, 2.992, 6.205), 矢量(9.378, 2.377, 26.311), 矢量(25.874, -1.980, 27.331), 矢量(16.725, 9.500,
			11.922), 矢量(34.793, 9, 1.811), 矢量(76.435, 11.300, -17.056), 矢量(29.467, 11, -22.728), 矢量(46.432, 6.833, -25.588), 矢量(37.845,
			11.012, -17.617), 矢量(96.036, 9, -15.923), 矢量(65.704, 16.452, 4.054), 矢量(79.535, 17.191, -3.800), 矢量(94.595, 11, 2.912), 矢量(
			95.888, 18.361, 3.765), 矢量(99.874, 11, -1.141), 矢量(105.647, 18.437, -6.454), 矢量(127.436, 10.513, 6.294), 矢量(128.281, 18.010,
			7.222), 矢量(132.742, 10.019, -15.854), 矢量(114.449, 11, -25.674), 矢量(119.204, 17.933, 4.731), 矢量(108.464, 19.950, 31.593), 矢量(
			112.092, 18.056, 11.452), 矢量(58.756, 13.216, 25.042), 矢量(66.571, 17.310, 42.151), 矢量(46.511, 2, 18.959), 矢量(33.736, 10.436,
			21.116), 矢量(40.785, 9, -3.979), 矢量(39.169, 11.078, -17.998), 矢量(94.859, 13.916, 29.918));
		全局.SecondaryFireState = 数组(假, 假, 真, 假, 真, 真, 假, 假, 真, 真, 假, 假, 假, 假, 假, 真, 假, 假, 假, 真, 真, 假, 真, 假, 假, 假, 假, 假, 真);
		全局.Creator = 数组(自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"),
			自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"),
			自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("replicator"), 自定义字符串("replicator"), 自定义字符串(
			"replicator"), 自定义字符串("mzlnot"), 自定义字符串("小枫"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  国王大道              16              难              小枫")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(国王大道);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-3.697, -0.083, 7.268), 矢量(3.187, 6.774, 1.202), 矢量(10.632, 6, 17.538), 矢量(-5.667, -0.108, 2.970),
			矢量(-29.501, 0.119, -33.754), 矢量(-31.730, 9.058, -33.946), 矢量(-48.976, 9.123, -36.823), 矢量(-71.372, 0.146, -42.272), 矢量(-70.686,
			4.500, -39.053), 矢量(-66.761, 5.021, -14.609), 矢量(-58.802, 4.956, -17.365), 矢量(-74.732, 2.229, -5.538), 矢量(-82.927, 0.650,
			2.582), 矢量(-89.997, 6.929, -4.852), 矢量(-102.714, 6.939, -7.699), 矢量(-127.311, -1.289, -8.061), 矢量(-160.900, 0.071, 13.455));
		全局.SecondaryFireState = 数组(假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真);
		全局.Creator = 数组(自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"),
			自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  艾兴瓦尔德          84             萌新          m  栀子               m50新手 后续")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(艾兴瓦尔德);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(116.016, 10.722, -14.234), 矢量(112.314, 15.564, -27.204), 矢量(119.012, 18.857, -43.480), 矢量(88.261,
			12.723, -41.337), 矢量(78.322, 12.810, -56.838), 矢量(76.610, 12.660, -64.301), 矢量(70.649, 13.313, -75.544), 矢量(60.381, 18.723,
			-92.090), 矢量(49.952, 11.621, -85.988), 矢量(37.322, 12.617, -81.511), 矢量(22.092, 11.110, -72.369), 矢量(13.588, 11.012, -82.577),
			矢量(16.839, 9.783, -40.863), 矢量(20.124, 9.031, -27.066), 矢量(42.143, 5.254, -51.678), 矢量(18.564, 4.082, -35.937), 矢量(16.843,
			9.787, -39.957), 矢量(4.851, 5.841, -83.725), 矢量(-11.045, 3, -70.067), 矢量(4.600, 7.654, -62.017), 矢量(10.975, 8.627, -71.045), 矢量(
			30.589, 14, -76.331), 矢量(54.101, 6.697, -61.248), 矢量(57.690, 11.702, -60.185), 矢量(60.977, 20.321, -66.890), 矢量(84.300, 21.153,
			-63.762), 矢量(92.768, 18.677, -67.302), 矢量(97.781, 16.815, -74.179), 矢量(68.550, 12.613, -104.372), 矢量(58.453, 18.723, -99.607),
			矢量(53.547, 22.676, -102.797), 矢量(51.037, 21.745, -65.628), 矢量(23.492, 6, -15.069), 矢量(25.741, 1.606, -17.780), 矢量(24.287, 6,
			-15.035), 矢量(-4.780, 2, -34.071), 矢量(0.917, 2, -36.518), 矢量(-6.423, 2, -33.859), 矢量(11.397, 10.331, -37.977), 矢量(49.373, 6.155,
			-70.839), 矢量(48.978, 11.493, -74.717), 矢量(67.329, 4.723, -82.981), 矢量(77.223, 13.096, -87.766), 矢量(60.919, 18.723, -93.040),
			矢量(31.068, 14, -81.219), 矢量(12.079, 8.390, -72.855), 矢量(-7.868, 5, -52.985), 矢量(12.678, 9.761, -41.808), 矢量(18.886, 5.013,
			-58.069), 矢量(8.696, 9.879, -38.839), 矢量(-10.459, 5, -53.566), 矢量(-6.013, 0.533, -17.612), 矢量(-1.380, 5, -13.598), 矢量(-16.686,
			1.711, -23.231), 矢量(-2.720, 5, -14.982), 矢量(2.010, 0.126, -3.695), 矢量(1.549, 6, -0.659), 矢量(5.487, 5.010, -11.367), 矢量(-6.341,
			1.113, -20.300), 矢量(-5.517, 6.668, -31.362), 矢量(9.445, 9.842, -38.695), 矢量(50.297, 21.736, -64.493), 矢量(34.726, 14, -77.850),
			矢量(-0.118, 5, -15.359), 矢量(16.822, 10.376, -38.244), 矢量(10.995, 3.810, -27.397), 矢量(10.352, 10.340, -38.219), 矢量(8.315, 6.131,
			-59.189), 矢量(11.656, 8.919, -70.319), 矢量(9.716, 11.271, -82.429), 矢量(4.162, 4.724, -85.688), 矢量(5.845, 11.262, -84.447), 矢量(
			21.204, 11.010, -73.205), 矢量(51.146, 21.720, -64.628), 矢量(45.157, 10.271, -97.591), 矢量(50.957, 17.886, -100.039), 矢量(63.927,
			17.865, -106.977), 矢量(70.897, 13.313, -77.781), 矢量(81.487, 21.153, -65.492), 矢量(66.273, 12.682, -89.993), 矢量(62.593, 18.851,
			-92.187), 矢量(57.194, 11.102, -88.451), 矢量(57.597, 18.916, -95.490), 矢量(48.898, 11.493, -76.595), 矢量(-21.105, 1.969, -11.236));
		全局.SecondaryFireState = 数组(真, 真, 真, 真, 假, 假, 真, 假, 假, 真, 假, 真, 假, 真, 真, 真, 真, 真, 真, 假, 真, 真, 假, 真, 真, 假, 假, 真, 真, 假, 真, 真, 假, 假, 真,
			假, 假, 真, 真, 假, 真, 真, 真, 真, 假, 真, 真, 真, 真, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 真, 真, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 真);
		全局.Creator = 数组(自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串(
			"mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串(
			"mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串(
			"mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串(
			"mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串(
			"mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("mzlnot"),
			自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"),
			自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串(
			"Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串(
			"Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串(
			"Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("Gardenia"), 自定义字符串("mzlnot"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  月球基地              45                               小枫 无心")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(“地平线”月球基地);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(22.293, 13, -33.363), 矢量(28.540, 13, -43.254), 矢量(40.863, 12, -40.389), 矢量(26.686, 7, -37.873), 矢量(
			23.671, 13, -33.852), 矢量(50.936, 12, -34.169), 矢量(45.963, 13, -44.938), 矢量(46.965, 6.637, -47.918), 矢量(44.708, 13, -45.811),
			矢量(47.375, 14, -58.812), 矢量(60.867, 9.500, -62.671), 矢量(63.880, 14.077, -69.113), 矢量(54.461, 16.010, -73.568), 矢量(45.022,
			16.010, -75.056), 矢量(32.787, 13.987, -90.057), 矢量(36.424, 8, -93.445), 矢量(33.338, 13.987, -90.662), 矢量(-1.022, 15.019,
			-109.286), 矢量(7.243, 11.863, -98.682), 矢量(6.854, 6, -91.385), 矢量(7.942, 11.863, -99.485), 矢量(13.685, 5.899, -100.195), 矢量(
			15.610, 11.863, -106.440), 矢量(1.351, 9, -109.287), 矢量(-1.644, 15.008, -109.413), 矢量(-10.475, 10, -118.244), 矢量(-13.666, 10.097,
			-134.722), 矢量(-26.765, 3.922, -130.311), 矢量(-32.539, 10.010, -117.010), 矢量(-16.550, 3.010, -116.147), 矢量(-11.551, 10,
			-118.046), 矢量(-24.954, 2.912, -113.620), 矢量(-32.502, 10, -116.604), 矢量(-31.661, 3, -108.732), 矢量(-34.850, 10, -115.968), 矢量(
			7.400, 7, -84.431), 矢量(7.939, 11.863, -98.366), 矢量(-16.752, 2.731, -131.621), 矢量(-10.074, 10.080, -120.058), 矢量(-46.451, 4.500,
			-116.803), 矢量(-39.252, 4.500, -103.733), 矢量(-28.055, 3, -110.196), 矢量(-33.438, 10.010, -115.991), 矢量(-38.212, 10, -126.768),
			矢量(-17.858, 4.844, -148.196), 矢量(-16.378, 9, -144.596));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 真, 假, 假, 假, 假, 假, 假, 真,
			假, 真, 假, 真, 真, 真, 假, 假, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("无心任始终"), 自定义字符串("小枫"),
			自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("无心任始终"), 自定义字符串(
			"无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("小枫"), 自定义字符串("无心任始终"), 自定义字符串("小枫"), 自定义字符串("无心任始终"), 自定义字符串("小枫"), 自定义字符串("无心任始终"), 自定义字符串(
			"无心任始终"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"),
			自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("小枫"), 自定义字符串(
			"小枫"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("小枫"));
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  好莱坞                  8               难             小枫")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(好莱坞);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-27.810, 7.750, 19.426), 矢量(-2.962, 1.750, 14.176), 矢量(-12.112, 1.748, 11.639), 矢量(-21.104, 7.750,
			9.734), 矢量(-23.845, 1.325, 51.407), 矢量(-11.181, 5.860, 55.431), 矢量(-23.088, 0, 48.806), 矢量(-6.426, 0.602, 47.968), 矢量(-0.285,
			6.402, 48.433));
		全局.SecondaryFireState = 数组(假, 假, 假, 真, 假, 假, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假);
		全局.MapCreator = 自定义字符串("小枫");
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  监测站 直布罗陀  49                              斗鱼")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(监测站：直布罗陀);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(44.054, -6.025, -118.027), 矢量(38.285, -0.003, -112.717), 矢量(32.979, 6.561, -109.973), 矢量(34.307, 0,
			-97.515), 矢量(33.136, 4, -91.432), 矢量(28.363, 4, -105.776), 矢量(7.961, -2, -100.328), 矢量(6.580, 4, -103.604), 矢量(22.054, 4.325,
			-63.569), 矢量(13.299, 3, -69.541), 矢量(13.939, -5.159, -78.215), 矢量(11.207, -4.947, -87.552), 矢量(-0.527, -0.939, -91.114), 矢量(
			2.271, 2.525, -81.124), 矢量(5.758, 3, -76.895), 矢量(10.694, 3, -70.870), 矢量(35.173, 3, -47.690), 矢量(38.006, -5.012, -49.706), 矢量(
			32.573, -5.149, -55.752), 矢量(35.607, -1.996, -53.233), 矢量(30.301, 3, -53.773), 矢量(45.972, -5.149, -48.045), 矢量(70.599, -3.139,
			-34.012), 矢量(77.288, 3, -36.409), 矢量(63.811, -3.141, -26.663), 矢量(62.146, 2.028, -22.603), 矢量(62.924, -3, -42.322), 矢量(64.450,
			3, -43.155), 矢量(64.678, 3, -48.756), 矢量(61.932, 8.679, -47.447), 矢量(58.551, 3, -56.267), 矢量(54.724, 7.938, -49.852), 矢量(78.338,
			-3.139, -29.716), 矢量(78.994, 3, -34.469), 矢量(82.815, 3.037, -32.612), 矢量(89.605, 2.998, -22.772), 矢量(97.566, -1.841, -27.996),
			矢量(100.019, 2.756, -18.234), 矢量(97.516, 1, 17.779), 矢量(89.825, 6, 10.994), 矢量(74.397, 9, 23.777), 矢量(41.905, 3, 10.574), 矢量(
			46.756, 9, 10.142), 矢量(52.672, 3, 1.907), 矢量(50.072, 9, 6.963), 矢量(94.747, 5.819, 41.153), 矢量(83.135, -0.942, 48.798), 矢量(
			84.329, 5.942, 51.653), 矢量(82.151, -3.183, -24.084), 矢量(90.165, -3.073, -4.412));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 真, 假, 真, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 假, 假,
			假, 假, 真, 假, 假, 真, 假, 假, 假, 真, 假, 假, 真, 真);
		全局.MapCreator = 自定义字符串("斗鱼");
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  暴 雪世界            37                              太对了")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(暴雪世界);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-112.844, -3.250, 101.364), 矢量(-103.551, -1.075, 101.518), 矢量(-98.864, -1.201, 113.916), 矢量(-102.410,
			2.753, 128.031), 矢量(-62.970, 1.115, 107.528), 矢量(-59.392, 5.313, 102.611), 矢量(-59.337, 5.080, 88.009), 矢量(8.149, -0.973,
			98.124), 矢量(5.617, 5.737, 93.670), 矢量(11.657, -0.972, 91.605), 矢量(3.809, 4.791, 93.257), 矢量(-1.848, 2, 79.240), 矢量(-7.537,
			3.698, 76.195), 矢量(-6.036, 1.181, 60.340), 矢量(-6.686, 6.065, 56.054), 矢量(-9.360, 0.295, 42.211), 矢量(0.723, 3.604, 43.307), 矢量(
			5.155, -4, 2.692), 矢量(5.997, 2.207, 5.327), 矢量(8.638, -4.091, -5.297), 矢量(17.489, -0.819, -6.809), 矢量(0.944, -4, -9.933), 矢量(
			-1.066, 2.206, -0.392), 矢量(-2.390, -4.100, -9.056), 矢量(-12.572, -0.829, -6.918), 矢量(5.852, 0.006, 31.461), 矢量(3.903, 3.606,
			39.284), 矢量(9.124, 3.131, 81.256), 矢量(-8.063, -0.961, 112.194), 矢量(-63.911, 6.612, 83.586), 矢量(-71.765, 6.773, 96.236), 矢量(
			-67.862, 6.774, 106.090), 矢量(-60.948, 0.750, 123.840), 矢量(-58.209, -0.107, 127.010), 矢量(-61.350, 5.535, 133.693), 矢量(-48.537,
			-0.205, 135.156), 矢量(-45.124, 3.800, 128.503), 矢量(-6.081, 1.167, 60.127));
		全局.SecondaryFireState = 数组(假, 假, 假, 真, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 真, 假, 真, 真, 真, 假, 假, 假, 假, 假, 假,
			假, 真);
		全局.Creator = 数组(自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串(
			"太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"),
			自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串(
			"太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"),
			自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("太对了"), 自定义字符串("清尘丶"));
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  好莱坞                 16              难            斗鱼")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(好莱坞);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-21.633, 1.604, 6.246), 矢量(-22.379, 7.750, 9.089), 矢量(-18.254, 5.813, -4.874), 矢量(-25.963, 4.045,
			-17.930), 矢量(6.473, 1.614, -18.317), 矢量(7.243, 8.348, -21.747), 矢量(24.953, 6.797, -74.397), 矢量(-11.048, 9.750, -102.549), 矢量(
			-4.924, 10.010, -59.602), 矢量(-1.259, 1.604, -68.782), 矢量(-4.961, 10.061, -66.329), 矢量(5.573, 11.010, -68.812), 矢量(-6.876,
			1.604, -16.917), 矢量(0.905, 6.563, -20.818), 矢量(4.725, 3.731, -22.098), 矢量(2.667, 10.750, -29.301), 矢量(-28.679, 13.857,
			-12.361));
		全局.SecondaryFireState = 数组(假, 假, 假, 真, 假, 真, 真, 真, 假, 假, 假, 真, 假, 假, 假, 真);
		全局.MapCreator = 自定义字符串("斗鱼");
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  努巴尼                 52              中等       斗鱼")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(努巴尼);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(120.660, -4.181, 12.767), 矢量(122.107, 2.260, 17.398), 矢量(113.968, 5.413, 21.631), 矢量(116.156, 4.250,
			5.154), 矢量(112.665, 5.497, 21.825), 矢量(85.942, -0.313, 20.285), 矢量(86.290, 6.260, 20.248), 矢量(77.107, 6.250, 9.800), 矢量(69.679,
			6.250, 0.498), 矢量(68.580, 6.260, 15.459), 矢量(73.796, 0.075, -0.256), 矢量(79.635, 6.250, -8.758), 矢量(82.686, 7.084, -21.435), 矢量(
			148.771, -2.438, -7.854), 矢量(150.138, 4.194, -4.406), 矢量(154.529, -4.177, 12.725), 矢量(154.724, 2.250, 19.341), 矢量(136.529,
			-1.470, 39.413), 矢量(144.838, 2.250, 31.302), 矢量(146.352, -3.750, 41.661), 矢量(149.546, 2.260, 30.265), 矢量(123.935, -3.933,
			-13.424), 矢量(121.394, -3.763, -3.870), 矢量(119.689, 4.250, -0.361), 矢量(75.095, 6.250, -2.799), 矢量(17.868, -0.165, 15.003), 矢量(
			19.438, 6.250, 12.656), 矢量(14.533, 0.275, -4.755), 矢量(14.211, 2.013, -0.521), 矢量(14.320, 6.260, 6.418), 矢量(7.283, -0.176,
			19.687), 矢量(5.534, 6.250, 29.284), 矢量(25.410, 0.250, 37.231), 矢量(26.771, 6.250, 38.021), 矢量(48.749, 2.166, 10.708), 矢量(38.155,
			5.250, 7.736), 矢量(43.665, -1.925, 0.981), 矢量(49.062, 4.250, -2.657), 矢量(64.226, 6.250, -0.896), 矢量(70.208, 6.250, 1.073), 矢量(
			86.973, 0.772, -12.585), 矢量(78.751, 6.250, -18.595), 矢量(79.288, 6.250, -9.666), 矢量(93.940, 0.056, 3.464), 矢量(89.772, 6.250,
			11.141), 矢量(132.510, 3.211, 20.994), 矢量(147.975, 2.250, 25.084), 矢量(154.338, -0.433, -11.337), 矢量(158.348, 5.064, -3.138), 矢量(
			97.909, -1.750, 12.157), 矢量(92.110, 6.250, 13.272), 矢量(82.412, -0.175, 12.055), 矢量(78.666, 6.885, 10.098));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 真, 真, 假, 假, 假, 假, 假, 假, 真, 假, 真, 假,
			假, 假, 真, 假, 真, 假, 假, 假, 假, 真, 假, 真, 假, 真, 真, 假, 假);
		全局.MapCreator = 自定义字符串("斗鱼");
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  好莱坞                  20             难          斗鱼")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(好莱坞);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(14.748, 1.750, -39.560), 矢量(12.685, 10.750, -38.729), 矢量(-2.840, 10.010, -54.822), 矢量(-8.574, 1.604,
			-5.813), 矢量(19.414, 1.750, 12.549), 矢量(-0.042, 1.760, 12.432), 矢量(-4.288, 3.195, 22.009), 矢量(4.649, 8.358, -20.929), 矢量(-0.279,
			6.777, -27.981), 矢量(1.072, 11.104, -34.117), 矢量(-2.804, 10.010, -55.155), 矢量(13.539, 6.003, -62.121), 矢量(-0.851, 1.604,
			-68.880), 矢量(-5.129, 10.061, -66.242), 矢量(-20.538, 9.750, -100.629), 矢量(-18.057, 9.750, -124.045), 矢量(-22.347, 1.750,
			-125.452), 矢量(-21.075, 9.750, -125.947), 矢量(-16.924, 3.750, -148.657), 矢量(-42.484, 6.814, -131.036), 矢量(0.475, 1.601,
			-85.699));
		全局.SecondaryFireState = 数组(假, 假, 真, 真, 假, 假, 真, 假, 假, 假, 假, 真, 假, 真, 真, 假, 假, 假, 真, 真);
		全局.MapCreator = 自定义字符串("斗鱼");
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  尼泊尔 村庄         29                           m               第一控制点")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(尼泊尔);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-171.673, -97.110, -46.243), 矢量(-186.055, -98.281, -66.629), 矢量(-187.293, -92.225, -71.800), 矢量(
			-192.918, -91.879, -48.208), 矢量(-164.343, -98.432, -54.079), 矢量(-169.495, -97.137, -47.150), 矢量(-170.895, -90.083, -44.458),
			矢量(-179.881, -87.964, -1.513), 矢量(-202.346, -94.096, 38.857), 矢量(-196.911, -89.304, 34.358), 矢量(-218.603, -89.892, 13.395), 矢量(
			-204.247, -97.772, 53.805), 矢量(-193.109, -91.763, 48.593), 矢量(-205.856, -87.984, 1.495), 矢量(-192.989, -93.893, 22.734), 矢量(
			-181.002, -90.036, 26.955), 矢量(-155.575, -89.075, -10.380), 矢量(-147.665, -85.080, 50.238), 矢量(-174.647, -86.047, 5.809), 矢量(
			-168.182, -99.365, -71.163), 矢量(-174.238, -90, -33.670), 矢量(-152.276, -87.828, -35.490), 矢量(-150.941, -91.918, -68.106), 矢量(
			-147.424, -91.489, -56.463), 矢量(-180.415, -102.138, -89.357), 矢量(-184.436, -96.252, -77.844), 矢量(-189.137, -98.090, -53.445),
			矢量(-165.851, -89.185, -31.743), 矢量(-204.659, -94.260, 28.551), 矢量(-195.891, -98.482, 58.650));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 真, 真, 假, 假, 假, 假, 真, 假, 假, 真, 真, 真, 真, 真, 真, 假, 真, 真, 假, 假, 真, 真, 假);
		全局.Creator = 数组(自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串(
			"mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("海里睡人"), 自定义字符串("千夜"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("路过的羊"), 自定义字符串(
			"mzlnot"), 自定义字符串("路过的羊"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("路过的羊"), 自定义字符串("就是想要重建帝国"), 自定义字符串("清尘丶"), 自定义字符串(
			"就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("mzlnot"), 自定义字符串("晚枫林"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("吃柠檬吧"), 自定义字符串(
			"清尘丶"), 自定义字符串("mzlnot"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  尼泊尔                 41                           m")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(尼泊尔);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(98.449, 127.999, 2.960), 矢量(105.584, 128, -0.285), 矢量(99.708, 131.737, 1.001), 矢量(93.667, 131.897,
			-0.788), 矢量(70.489, 132.007, 3.271), 矢量(61.891, 134.654, -0.415), 矢量(80.085, 130, 12.115), 矢量(90.662, 135.070, 12.247), 矢量(
			70.205, 131.998, 2.872), 矢量(70.269, 130, -10.335), 矢量(71.187, 132.327, -20.146), 矢量(78.025, 131.800, -37.764), 矢量(72.603,
			129.690, -51.717), 矢量(70.404, 128.588, -66.088), 矢量(106.965, 136, -79.434), 矢量(111.198, 132, -21.429), 矢量(91.467, 135.132,
			-11.286), 矢量(71.688, 130.010, -0.587), 矢量(64.697, 132, -2.137), 矢量(55.126, 128.803, 30.438), 矢量(62.801, 128.804, 45.338), 矢量(
			59.122, 128.808, 62.021), 矢量(51.172, 129.793, 3.321), 矢量(56.313, 128.802, 22.078), 矢量(55.686, 130.002, 5.744), 矢量(62.517,
			134.665, -1.349), 矢量(67.361, 130, 13.189), 矢量(72.045, 132.327, 20.726), 矢量(79.823, 132.062, 33.263), 矢量(106.949, 132.080,
			65.056), 矢量(56.966, 128.838, 36.422), 矢量(55.250, 128.856, -24.141), 矢量(52.381, 130.009, -6.880), 矢量(61.404, 134.665, -0.035),
			矢量(80.038, 130, -11.875), 矢量(91.412, 135.132, -10.505), 矢量(112.045, 132, -25.973), 矢量(96.822, 132, -33.419), 矢量(55.369,
			128.816, -29.582), 矢量(83.673, 128.412, -0.280), 矢量(59.656, 128.533, 24.305), 矢量(55.511, 128.868, 24.251));
		全局.SecondaryFireState = 数组(假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 真, 假, 假, 真, 真, 真, 假, 假, 真, 假, 假, 真, 假, 假, 假, 假, 假, 真, 真, 真, 真, 假, 假, 假, 假,
			真, 真, 真, 真, 真, 假);
		全局.MapCreator = 自定义字符串("mzlnot");
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  沃斯卡亚             13                           斗鱼")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(沃斯卡娅工业区);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-80.850, -1.980, 50.235), 矢量(-83.860, 2.020, 50.332), 矢量(-75.523, 2.020, 67.901), 矢量(-77.583, 2.020,
			76.198), 矢量(-66.989, 2.020, 82.406), 矢量(-62.689, -2.980, 60.419), 矢量(-62.367, -3.980, 65.653), 矢量(-68.271, -2.980, 69.501), 矢量(
			-77.607, 2.020, 74.799), 矢量(-63.306, -0.406, 77.249), 矢量(-67.583, 2.020, 82.277), 矢量(-110.177, 2.269, 67.552), 矢量(-96.208,
			-1.980, 41.670), 矢量(-93.616, 6.029, 40.548));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 真, 假);
		全局.MapCreator = 自定义字符串("斗鱼");
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  圣诞国王大道      77                           斗鱼")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(圣诞节国王大道);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-7.362, 0.039, -13.835), 矢量(-3.768, 4.531, -21.669), 矢量(-12.330, 6.110, -16.084), 矢量(2.885, 6.774,
			-8.387), 矢量(8.922, 6, -15.658), 矢量(6.771, 0.065, -24.685), 矢量(5.453, 6.110, -26.265), 矢量(0.575, 6.010, -37.771), 矢量(-11.780,
			1.125, -38.399), 矢量(-6.372, 6, -40.010), 矢量(-31.539, 9.067, -33.350), 矢量(-25.391, 0.528, -41.636), 矢量(-24.622, 6, -43.113), 矢量(
			-49.015, 9.123, -37.597), 矢量(-95.770, 7.491, -25.022), 矢量(-96.780, 6.949, -7.542), 矢量(-111.921, 1.076, -11.831), 矢量(-119.637,
			3.036, -13.087), 矢量(-129.526, -1.016, -2.561), 矢量(-132.969, 5.543, 6.509), 矢量(-127.463, -1.361, 6.464), 矢量(-127.737, 5.813,
			10.253), 矢量(-143.987, 6.809, 10.075), 矢量(-117.071, 5.582, 5.726), 矢量(-87.947, 6.935, -9.594), 矢量(-94.904, 7.502, -24.207), 矢量(
			-86.664, 6.934, -17.881), 矢量(-54.204, -0.146, -40.902), 矢量(-49.428, 0.024, -29.525), 矢量(-39.068, 0.062, -30.987), 矢量(-37.638,
			1.122, -35.185), 矢量(-35.706, 9, -34.254), 矢量(-47.313, 9.123, -37.319), 矢量(2.141, 6.036, -33.172), 矢量(8.715, 6.007, -16.784),
			矢量(0.889, -0.104, -11.708), 矢量(-0.818, 5.488, -3.419), 矢量(-9.795, 0.894, -9.659), 矢量(-7.455, 0.055, -12.925), 矢量(-11.284,
			6.110, -15.654), 矢量(-5.544, 8.783, -22.427), 矢量(-6.439, 6.010, -38.903), 矢量(-0.596, 0.197, -41.035), 矢量(-6.301, 6, -41.880),
			矢量(-20.339, 6.010, -2.003), 矢量(-10.217, 16.906, 5.412), 矢量(4.633, 0.528, -13.658), 矢量(9.104, 6, -16.043), 矢量(-3.293, 14.586,
			-24.154), 矢量(-8.730, 0.816, -24.867), 矢量(-11.478, 6.110, -16.870), 矢量(-33.149, 9, -33.535), 矢量(-67.113, 4.500, -34.824), 矢量(
			-63.063, -0.095, -19.344), 矢量(-67.322, 5.021, -14.133), 矢量(-91.733, 1.056, 0.836), 矢量(-97.369, 6.939, -4.702), 矢量(-126.911,
			-1.332, 6.872), 矢量(-127.454, 5.673, 10.715), 矢量(-129.472, -1.382, 26.391), 矢量(-125.803, 3.080, 27.808), 矢量(-155.817, 0.071,
			41.405), 矢量(-156.341, -1.902, 11.063), 矢量(-131.462, -1.016, 0.219), 矢量(-153.866, 0.071, 5.871), 矢量(-156.904, 0.081, 16.500),
			矢量(-155.036, -3.206, 25.563), 矢量(-154.031, 0.107, 34.989), 矢量(-129.504, 6.315, 7.617), 矢量(-111.435, 1.071, 4.262), 矢量(-113.945,
			6.071, 5.330), 矢量(-105.634, 0.508, -3.979), 矢量(-104.188, 6.929, -4.127), 矢量(-89.851, 6.938, -7.652), 矢量(-70.363, 0.409,
			-44.545), 矢量(-71.504, 4.592, -40.348), 矢量(-63.818, -0.129, -35.104), 矢量(-48.448, 9.123, -37.503));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 真, 真, 假, 假, 假, 假, 假, 假, 假, 真, 真, 真, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 真, 真, 假, 假, 真, 假, 假, 真, 真, 假, 假, 真, 假, 真, 假, 假, 假, 真, 真, 真, 真, 假, 假, 假, 真, 真, 假, 真, 假, 假, 真, 假, 假, 真);
		全局.MapCreator = 自定义字符串("斗鱼");
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  渣克镇                 20            难")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(渣客镇);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-19.718, 6.459, -92.315), 矢量(-20.960, 13.504, -89.406), 矢量(-41.176, 12.527, -81.202), 矢量(-61.992,
			7.097, -121.260), 矢量(-101.811, 5.370, -129.604), 矢量(-99.400, 13.380, -134.193), 矢量(-101.367, 6.370, -146.263), 矢量(-101.737,
			12.603, -150.968), 矢量(-73.589, 12.412, -107.512), 矢量(-34.778, 13.491, -115.472), 矢量(-38.245, 4.428, -55.320), 矢量(-39.646,
			12.971, -56.123), 矢量(-26.658, 12.696, -65.419), 矢量(-37.603, 7.197, -115.404), 矢量(-47.580, 12.480, -71.086), 矢量(-31.454, 11.609,
			-84.214), 矢量(-31.226, 16.149, -95.449), 矢量(-61.976, 7.438, -94.647), 矢量(-65.423, 12.431, -103.055), 矢量(-62.627, 7.435,
			-105.439), 矢量(-64.199, 15.987, -101.145));
		全局.SecondaryFireState = 数组(假, 假, 真, 真, 假, 假, 假, 真, 真, 真, 假, 假, 真, 真, 假, 假, 假, 假, 假, 假);
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  艾兴瓦尔德          48          比较难       裤链")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(艾兴瓦尔德);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(15.402, 3.866, -32.047), 矢量(20.052, 9, -25.807), 矢量(7.737, 4.063, -36.094), 矢量(8.381, 9.895,
			-39.140), 矢量(5.038, 5.811, -57.498), 矢量(9.957, 5.815, -68.660), 矢量(12.188, 6.010, -80.631), 矢量(7.352, 11.271, -84.527), 矢量(
			21.188, 11.010, -73.235), 矢量(51.283, 21.707, -63.955), 矢量(48.992, 6.192, -72.114), 矢量(48.720, 11.493, -77.125), 矢量(50.306,
			18.460, -78.980), 矢量(62.271, 18.723, -89.825), 矢量(103.729, 12.694, -75.993), 矢量(92.751, 18.687, -68.325), 矢量(85.755, 14.371,
			-64.166), 矢量(89.055, 20.806, -63.184), 矢量(89.339, 14.966, -41.514), 矢量(109.662, 12.723, -47.766), 矢量(117.526, 18.857, -44.408),
			矢量(79.511, 12.664, -71.226), 矢量(77.758, 13.113, -87.609), 矢量(64.558, 12.403, -89.342), 矢量(62.297, 18.838, -94.224), 矢量(51.924,
			10.531, -98.333), 矢量(51.435, 17.886, -99.414), 矢量(58.438, 11.001, -88.212), 矢量(59.133, 18.046, -85.903), 矢量(34.995, 14,
			-79.630), 矢量(21.604, 4.865, -53.155), 矢量(16.707, 10.380, -43.277), 矢量(9.607, 10.363, -38.469), 矢量(-13.001, 3.474, -64.643), 矢量(
			-5.437, 7.012, -65.196), 矢量(50.053, 11.493, -75.791), 矢量(51.050, 18.406, -76.004), 矢量(49.881, 21.757, -65.366), 矢量(45.088,
			8.576, -93.981), 矢量(41.635, 10.667, -96.602), 矢量(50.563, 17.896, -100.424), 矢量(64.713, 17.819, -105.963), 矢量(70.537, 13.313,
			-77.416), 矢量(20.236, 5.809, -46.111), 矢量(-25.676, -0.793, -6.636), 矢量(12.496, 3.871, -27.771), 矢量(21.305, 11, -73.089), 矢量(
			72.783, 12.885, -66.826), 矢量(64.217, 11.804, -90.110));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 真, 假, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真,
			假, 假, 假, 假, 假, 假, 假, 真, 真, 真, 真, 真, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  绿洲城                 27           中等           m         关闭一次性技能")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(绿洲城);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(179.416, 7.999, -207.968), 矢量(174.933, 8, -213.209), 矢量(172.484, 13.572, -216.651), 矢量(137.216,
			7.500, -218.578), 矢量(131.592, 5.500, -222.604), 矢量(123.355, 12, -226), 矢量(128.570, 15.281, -234.943), 矢量(104.547, 8, -284.361),
			矢量(84.919, 5.500, -257.294), 矢量(100.360, 3.808, -246.635), 矢量(89.796, 2.500, -231.620), 矢量(97.071, 4.709, -241.486), 矢量(
			118.999, 11.500, -228.543), 矢量(110.423, 7.500, -242.734), 矢量(119.146, 12.010, -229.073), 矢量(130.911, 7.510, -219.121), 矢量(
			150.555, 7.500, -225.191), 矢量(158.512, 7.500, -216.685), 矢量(148.150, 2.376, -195.965), 矢量(154.209, 10.005, -192.596), 矢量(
			96.470, 2.250, -224.511), 矢量(135.251, 7.537, -253.678), 矢量(119.388, 3.574, -195.383), 矢量(113.382, 4.500, -212.374), 矢量(119.128,
			3.574, -195.987), 矢量(95.990, 2.500, -240.101), 矢量(97.159, 5.500, -252.844), 矢量(167.562, 7.500, -178.660));
		全局.SecondaryFireState = 数组(假, 假, 真, 假, 假, 假, 真, 真, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 真, 真, 真, 假, 真, 真, 假, 真);
		全局.MapCreator = 自定义字符串("mzlnot");
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  釜山                    22           中等          m酱")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(釜山);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-358.582, 10.652, 147.434), 矢量(-356.960, 10.459, 140.814), 矢量(-350.504, 10.653, 144.929), 矢量(
			-345.700, 12.073, 160.448), 矢量(-334.294, 12.013, 161.951), 矢量(-328.355, 17.034, 165.605), 矢量(-328.684, 13.700, 176.794), 矢量(
			-328.726, 16.979, 168.364), 矢量(-308.988, 12.082, 166.973), 矢量(-304.245, 10.857, 155.212), 矢量(-294.993, 12.037, 158.541), 矢量(
			-300.566, 16.491, 169.146), 矢量(-296.748, 10.904, 155.961), 矢量(-291.426, 12.729, 150.333), 矢量(-329.597, 15.074, 140.312), 矢量(
			-341.045, 8.290, 151.428), 矢量(-347.759, 10.974, 142.474), 矢量(-350.210, 12.435, 153.604), 矢量(-361.799, 12.037, 158.442), 矢量(
			-356.220, 16.252, 169.086), 矢量(-336.384, 14.257, 177.026), 矢量(-296.581, 12.050, 171.266), 矢量(-299.710, 16.479, 169.863));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 真, 假);
		全局.MapCreator = 自定义字符串("mzlnot");
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  釜山                    7              超难        隙中驹            第二关可能有bug")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(釜山);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		修改全局变量(CheckpointPosition, 添加至数组, 矢量(-385.345, 12.066, 178.685));
		修改全局变量(CheckpointPosition, 添加至数组, 矢量(-372.145, 11.878, 185.250));
		修改全局变量(CheckpointPosition, 添加至数组, 矢量(-360.881, 11.872, 173.792));
		修改全局变量(CheckpointPosition, 添加至数组, 矢量(-348.508, 11.225, 185.160));
		修改全局变量(CheckpointPosition, 添加至数组, 矢量(-320.851, 10.451, 180.606));
		修改全局变量(CheckpointPosition, 添加至数组, 矢量(-318.782, 12.073, 168.316));
		修改全局变量(CheckpointPosition, 添加至数组, 矢量(-313.294, 11.073, 179.218));
		修改全局变量(CheckpointPosition, 添加至数组, 矢量(-288.229, 12.050, 176.855));
		全局.SecondaryFireState = 空数组;
		修改全局变量(SecondaryFireState, 添加至数组, 假);
		修改全局变量(SecondaryFireState, 添加至数组, 假);
		修改全局变量(SecondaryFireState, 添加至数组, 假);
		修改全局变量(SecondaryFireState, 添加至数组, 假);
		修改全局变量(SecondaryFireState, 添加至数组, 假);
		修改全局变量(SecondaryFireState, 添加至数组, 假);
		修改全局变量(SecondaryFireState, 添加至数组, 假);
		全局.UltimateState = 空数组;
		修改全局变量(UltimateState, 添加至数组, 假);
		修改全局变量(UltimateState, 添加至数组, 假);
		修改全局变量(UltimateState, 添加至数组, 假);
		修改全局变量(UltimateState, 添加至数组, 假);
		修改全局变量(UltimateState, 添加至数组, 假);
		修改全局变量(UltimateState, 添加至数组, 假);
		修改全局变量(UltimateState, 添加至数组, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  里阿尔托            51            新手关        m酱     关闭一次性技能")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(里阿尔托);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-18.641, -1.251, -35.861), 矢量(-18.190, 2.271, -39.329), 矢量(-15.365, 6.750, -47.443), 矢量(-26.113,
			-1.608, -58.481), 矢量(-35.491, 4.750, -75.577), 矢量(-29.585, 1.423, -62.917), 矢量(-39.715, -1.250, -62.634), 矢量(-46.388, 1.354,
			-66.991), 矢量(-37.418, 4.760, -75.127), 矢量(-57.261, 1.954, -95.172), 矢量(-57.213, 2.600, -137.459), 矢量(-64.929, 4.869, -126.114),
			矢量(-53.826, 2.750, -121.878), 矢量(-35.048, 1.750, -105.213), 矢量(-13.428, -0.250, -79.512), 矢量(8.816, -0.250, -78.209), 矢量(
			36.887, 5.750, -70.098), 矢量(40.419, 1.987, -32.471), 矢量(47.803, 4.750, -33.474), 矢量(56.777, 4.760, -41.401), 矢量(43.685, 5.750,
			-44.627), 矢量(43.362, -1.250, -89.763), 矢量(42.955, 4.740, -87.702), 矢量(34.931, 5.750, -77.142), 矢量(13.740, -2.175, -58.456), 矢量(
			16.807, 1.431, -62.239), 矢量(16.541, 0.768, -46.901), 矢量(-13.884, 5.748, -49.773), 矢量(0.662, 5.750, -71.703), 矢量(34.939, 5.750,
			-86.092), 矢量(59.390, -0.250, -74.868), 矢量(54.813, -0.250, -74.897), 矢量(54.372, 3.740, -84.420), 矢量(62.983, 4.750, -39.688), 矢量(
			102.866, 0.929, -20.947), 矢量(105.279, 5.755, -30.807), 矢量(67.939, 4.760, -32.368), 矢量(63.892, 4.750, -39.855), 矢量(62.783,
			1.771, -59.477), 矢量(56.816, 1.770, -52.788), 矢量(5.927, 4.760, -35.518), 矢量(0.251, 5.798, -42.434), 矢量(-40.928, -1.598,
			-54.823), 矢量(-35.134, -1.750, -38.238), 矢量(-4.152, 5.798, -41.057), 矢量(-21.729, -1.250, -39.431), 矢量(-15.853, 5.746, -47.424),
			矢量(-26.202, -1.750, -36.192), 矢量(-17.490, 1.413, -39.111), 矢量(-27.526, -1.750, -54.583), 矢量(-16.551, 5.745, -53.424), 矢量(
			-82.941, 1.750, -104.662));
		全局.SecondaryFireState = 数组(假, 假, 假, 真, 假, 假, 假, 假, 真, 真, 真, 假, 真, 真, 真, 真, 真, 假, 假, 假, 真, 假, 真, 真, 假, 假, 真, 真, 真, 真, 假, 假, 真, 真, 假,
			真, 假, 假, 假, 真, 假, 真, 假, 真, 假, 假, 假, 假, 假, 假, 真);
		全局.MapCreator = 自定义字符串("mzlnot");
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  巴黎                   35                               m酱")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(巴黎);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-103.106, 12.098, -82.678), 矢量(-96.964, 12.100, -85.090), 矢量(-100.418, 15.010, -90.869), 矢量(-109.457,
			12.035, -50.738), 矢量(-114.897, 10, -54.759), 矢量(-112.911, 14.170, -65.577), 矢量(-89.628, 12.153, -39.892), 矢量(-77.499, 16.233,
			-42.090), 矢量(-84.910, 9.976, -30.328), 矢量(-78.038, 11.395, -39.994), 矢量(-75.471, 17.211, -42.802), 矢量(-30.022, 14.145, 1.731),
			矢量(-43.981, 13.990, -4.638), 矢量(-53.206, 12.024, 4.776), 矢量(-51.095, 14.990, -7.188), 矢量(-43.642, 11.990, 18.960), 矢量(-58.118,
			14.038, 20.339), 矢量(-106.159, 12.100, -28.817), 矢量(-111.983, 13.356, -37.512), 矢量(-50.569, 14.970, -8.945), 矢量(-8.283, 11.495,
			-23.915), 矢量(-16.296, 14.010, -33.347), 矢量(-8.713, 14, -70.744), 矢量(10.962, 10.024, -43.446), 矢量(-45.758, 16.005, 19.439), 矢量(
			-75.878, 11.082, -39.981), 矢量(-78.438, 10.146, -45.415), 矢量(-76.338, 17.188, -43.436), 矢量(-58.042, 13.047, -74.646), 矢量(
			-120.435, 11.138, -42.154), 矢量(-111.563, 11.015, -39.414), 矢量(-82.646, 14.389, -11.003), 矢量(-77.148, 14.325, -18.395), 矢量(
			-79.686, 14.451, -7.037), 矢量(-78.014, 10.488, -21.734), 矢量(-84.365, 12.089, -12.040));
		全局.SecondaryFireState = 数组(假, 假, 真, 假, 假, 真, 假, 假, 假, 假, 真, 假, 假, 假, 真, 假, 真, 假, 真, 真, 假, 真, 真, 真, 真, 假, 假, 真, 真, 假, 真, 假, 假, 假,
			假);
		全局.MapCreator = 自定义字符串("mzlnot");
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  好莱坞               26                              徐北游")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(好莱坞);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-32.624, -0.145, 58.334), 矢量(-33.844, 0, 50.705), 矢量(-30.937, 4.840, 49.109), 矢量(-14.816, 5.060,
			47.423), 矢量(4.438, 6.591, 45.001), 矢量(6.986, 0.003, 65.953), 矢量(17.196, 6.591, 60.623), 矢量(4.767, 0.004, 49.018), 矢量(0.120,
			6.133, 48.575), 矢量(-7.731, 3.069, 36.169), 矢量(0.187, 1.604, -19.069), 矢量(4.779, 3.731, -22.111), 矢量(2.128, 10.750, -28.208),
			矢量(13.893, 1.604, -47.295), 矢量(23.225, 2.700, -69.982), 矢量(11.262, 6.003, -70.105), 矢量(-6.504, 1.604, -9.802), 矢量(-25.578,
			7.750, 10.808), 矢量(-43.718, 1.795, -6.460), 矢量(-34.885, 4.425, -9.684), 矢量(-15.543, 5.802, -6.177), 矢量(-9.174, 1.604, -10.256),
			矢量(21.330, 1.610, -45.319), 矢量(18.813, 4.692, -30.285), 矢量(16.159, 6.839, -45.171), 矢量(10.423, 10.750, -39.438), 矢量(-2.784,
			10.010, -55.315));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 真, 假, 假, 真, 假, 真, 假, 假, 假, 假);
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  花村                  27                                            需关闭一次性技能")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(34.335, 3, -20.463), 矢量(35.215, 2, -24.281), 矢量(11.646, 0, -26.362), 矢量(-22.416, -0.925, -75.736),
			矢量(-8.577, 1, -98.146), 矢量(-1.178, 7.010, -91.175), 矢量(-3.465, 6.707, -19.483), 矢量(16.519, 6.836, -19.454), 矢量(12.318, 4.282,
			6.323), 矢量(-3.151, 1, 3.078), 矢量(-3.929, 8.138, 11.011), 矢量(35.951, 6, 17.491), 矢量(34.715, 13.963, 21.388), 矢量(47.844, 6,
			19.013), 矢量(48.903, 14.567, 17.543), 矢量(30.669, 2.524, -13.182), 矢量(29.866, 10.449, -2.514), 矢量(0.542, -0.925, -82.036), 矢量(
			7.887, 4.010, -77.154), 矢量(14.942, 4, -73.616), 矢量(42.581, 3, -75.573), 矢量(35.985, 3, -75.906), 矢量(5.883, 7.703, -2.453), 矢量(
			61.281, 0.342, 35.364), 矢量(43.260, 6, -6.437), 矢量(40.773, 6, -2.720), 矢量(30.561, 2.535, -13.039), 矢量(35.800, 0.203, 8.398));
		全局.SecondaryFireState = 数组(假, 假, 真, 真, 假, 真, 真, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 真, 真, 真, 假, 假, 假);
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  花村                  36                               匿名")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(66.334, -2.014, 7.337), 矢量(62.509, 1.378, -4.849), 矢量(62.930, 6, -3.801), 矢量(49.954, 6, 11.773), 矢量(
			71.036, -1.941, 1.988), 矢量(43.766, -0.176, 8.941), 矢量(39.166, 6, 15.907), 矢量(52.038, -1.233, 10.021), 矢量(49.683, 6, 6.415), 矢量(
			33.283, -0.060, -10.715), 矢量(40.621, 6, -1.821), 矢量(14.364, -1.667, -41.434), 矢量(16.058, 3.886, -44.162), 矢量(9.521, -1.755,
			-61.579), 矢量(0.264, 4, -58.940), 矢量(20.397, -1.863, -61.730), 矢量(13.918, 4, -75.225), 矢量(27.884, 2, -32.237), 矢量(28.433,
			10.454, -2.968), 矢量(1.438, 0.622, -18.240), 矢量(-3.958, 7.987, -11.095), 矢量(-15.570, 1, 2.796), 矢量(10.267, 11.229, 17.754), 矢量(
			8.918, 6.928, -22.176), 矢量(5.296, 0.521, -36.096), 矢量(-2.300, 5.010, -34.615), 矢量(-11.580, -0.988, -36.238), 矢量(-22.087, -1,
			-46.781), 矢量(-7.067, 1, -10.257), 矢量(-6.673, 7.999, -11.093), 矢量(7.787, 7.026, -19.105), 矢量(16.920, 0, -26.172), 矢量(15.569,
			6.792, -19.224), 矢量(12.706, 4.141, 6.802), 矢量(-1.752, 1.247, 6.773), 矢量(2.430, 1.010, -0.601), 矢量(12.104, 4.247, 6.452));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 真, 假, 真, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假,
			假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  花村                  124             新手          m")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		创建HUD文本(所有玩家(所有队伍), 自定义字符串("通关教学: b站up:Stancossin\r\n            BV1ii4y1M7dq"), 无, 无, 左边, 0, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串,
			默认可见度);
		全局.CheckpointPosition = 数组(矢量(-5.424, 1.002, -33.184), 矢量(-11.514, 1, -34.115), 矢量(-21.900, -1, -46.982), 矢量(-16.266, 3, -44.429),
			矢量(-8.955, 7, -25.354), 矢量(-5.841, 5, -36.122), 矢量(13.089, 7.071, -48.661), 矢量(-0.174, 4, -59.307), 矢量(21.293, 3.809, -69.792),
			矢量(14.229, 4, -74.725), 矢量(7.527, 7, -83.321), 矢量(-8.481, 2.540, -76.307), 矢量(13.996, 7.161, -49.004), 矢量(0.744, 5, -40.476),
			矢量(12.467, 6.756, -22.601), 矢量(12.744, 11.237, 17.559), 矢量(-7.701, 3.962, 20.818), 矢量(-15.009, -1.062, -22.712), 矢量(-12.853, 1,
			-34.091), 矢量(-38.779, 1, -62.121), 矢量(-8.341, 5, -37.052), 矢量(-13.880, 1, -25.959), 矢量(-14.705, -1.163, -18.847), 矢量(-7.959, 1,
			-14.562), 矢量(-7.178, 8.005, -10.587), 矢量(4.782, 8.001, -10.771), 矢量(28.992, 10.470, -4.497), 矢量(4.936, 7.724, -1.149), 矢量(
			1.717, 1, 0.060), 矢量(25.854, 6, 9.836), 矢量(17.756, 9.566, 16.298), 矢量(6.528, 8.027, 12.587), 矢量(6.448, 4, 26.183), 矢量(10.642,
			-0.882, 26.222), 矢量(6.730, 4, 27.955), 矢量(3.524, 2.398, 36.929), 矢量(-2.446, 3.980, 28.749), 矢量(-13.504, 3.701, 25.115), 矢量(
			-13.391, -1.033, -11.091), 矢量(-8.079, 1, -10.259), 矢量(-22.976, -1.249, -13.383), 矢量(-22.356, -1, -47.169), 矢量(-30.182, 1,
			-53.529), 矢量(-33.169, 1, -56.538), 矢量(-37.385, 1, -62.523), 矢量(-30.643, 1.010, -52.614), 矢量(-20.277, 3, -49.284), 矢量(-13.910,
			1.034, -35.532), 矢量(-12.221, 0.344, -17.511), 矢量(-13.405, -0.935, -24.677), 矢量(-12.804, 1, -31.534), 矢量(-36.942, 1, -65.436),
			矢量(-20.455, -0.925, -73.618), 矢量(-3.559, 4, -64.156), 矢量(-0.456, 7.010, -91.558), 矢量(-26.940, 1, -85.300), 矢量(9.833, 7,
			-80.990), 矢量(-7.222, 9, -63.924), 矢量(6.501, -1.500, -51.957), 矢量(0.608, 4.088, -58.869), 矢量(9.181, 3.766, -51.480), 矢量(12.738,
			7.081, -48.794), 矢量(29.592, 2, -33.200), 矢量(13.794, 6.751, -21.852), 矢量(-3.849, 7.140, -19.551), 矢量(-14.473, 3.870, 12.918),
			矢量(-13.383, 1, 27.514), 矢量(-16.159, 3.969, 22.852), 矢量(-13.211, 1, 3.722), 矢量(-15.074, 3.907, 12.231), 矢量(-3.622, 7.968,
			12.214), 矢量(5.925, 8.875, 20.818), 矢量(10.921, 4.092, 11.785), 矢量(25.200, 6, 10.104), 矢量(47.244, 6, 6.305), 矢量(62.057, 6,
			-12.589), 矢量(30.094, 10.492, -5.148), 矢量(29.170, 2, -27.303), 矢量(-15.935, -0.324, -33.881), 矢量(-15.770, 1, -60.027), 矢量(
			-20.641, 4, -55.814), 矢量(-9.636, 5, -37.378), 矢量(5.746, 7.915, -8.328), 矢量(11.495, 6.790, -20.891), 矢量(39.880, 6.090, -2.564),
			矢量(14.968, 11.233, 18.685), 矢量(8.991, 6.922, -19.557), 矢量(-13.931, 1, -27.458), 矢量(-5.050, 7.090, -19.670), 矢量(-4.476, 7.991,
			-11.193), 矢量(23.910, 6, 8.823), 矢量(6.687, 4, 27.622), 矢量(12.435, 11.224, 20.056), 矢量(24.684, 6, 10.753), 矢量(14.074, 0.544,
			-3.566), 矢量(13.488, 6.745, -20.327), 矢量(-0.620, 4, -59.956), 矢量(-8.400, 9, -64.796), 矢量(-3.029, 2.540, -82.036), 矢量(7.865,
			-1.903, -78.766), 矢量(6.522, 4, -75.171), 矢量(-3.344, -1.903, -67.532), 矢量(-2.279, 4, -66.091), 矢量(-9.352, 9, -65.984), 矢量(
			-21.108, 4, -58.162), 矢量(-32.713, 1, -68.298), 矢量(-21.884, 2.996, -66.304), 矢量(-20.536, 4, -56.080), 矢量(-10.030, 7, -27.601),
			矢量(14.428, 6.762, -20.269), 矢量(47.618, 6, 7.530), 矢量(35.614, 6, 16.152), 矢量(26.217, 6, 9.791), 矢量(27.714, 10.463, 5.149), 矢量(
			25.558, 1.429, -56.276), 矢量(17.294, 3.581, -51.659), 矢量(29.033, 1.835, -43.243), 矢量(24.248, 1.153, -30.697), 矢量(13.771, 6.750,
			-20.370), 矢量(43.772, 6, -5.522), 矢量(45.106, 6, 1.335), 矢量(48.870, 6.099, 4.550), 矢量(34.487, 0.033, -5.110), 矢量(28.609, 2,
			-28.223), 矢量(13.089, 0, -26.365));
		全局.SecondaryFireState = 数组(假, 假, 假, 真, 假, 真, 假, 真, 假, 假, 假, 真, 假, 真, 真, 假, 真, 假, 真, 真, 假, 假, 假, 真, 假, 真, 真, 假, 真, 假, 假, 假, 假, 假, 假,
			假, 假, 真, 假, 假, 真, 假, 假, 假, 假, 假, 假, 真, 真, 假, 真, 真, 真, 真, 真, 真, 真, 真, 真, 假, 假, 真, 真, 真, 真, 真, 假, 真, 假, 真, 假, 真, 真, 真, 真, 真, 真,
			真, 真, 真, 真, 真, 假, 真, 真, 真, 真, 真, 假, 真, 真, 真, 假, 真, 真, 真, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 真, 真, 真, 假, 假, 假, 真, 假, 假, 假, 真, 真,
			假, 假, 假, 真, 假);
		全局.MapCreator = 自定义字符串("mzlnot");
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  花村                  133            新手                         前99关同124花村前99关")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		创建HUD文本(所有玩家(所有队伍), 自定义字符串(
			"通关教学: b站up:Stancossin\r\n  前99关    BV1ii4y1M7dq\r\n99-124关  BV1TD4y1o74B\r\n124-133    BV11p4y1e7Hdo74B"), 无, 无, 左边, 0, 颜色(
			白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.CheckpointPosition = 数组(矢量(-5.424, 1.002, -33.184), 矢量(-11.514, 1, -34.115), 矢量(-21.900, -1, -46.982), 矢量(-16.266, 3, -44.429),
			矢量(-8.955, 7, -25.354), 矢量(-5.841, 5, -36.122), 矢量(13.089, 7.071, -48.661), 矢量(-0.174, 4, -59.307), 矢量(21.293, 3.809, -69.792),
			矢量(14.229, 4, -74.725), 矢量(7.527, 7, -83.321), 矢量(-8.481, 2.540, -76.307), 矢量(13.996, 7.161, -49.004), 矢量(0.744, 5, -40.476),
			矢量(12.467, 6.756, -22.601), 矢量(12.744, 11.237, 17.559), 矢量(-7.701, 3.962, 20.818), 矢量(-15.009, -1.062, -22.712), 矢量(-12.853, 1,
			-34.091), 矢量(-38.779, 1, -62.121), 矢量(-8.341, 5, -37.052), 矢量(-13.880, 1, -25.959), 矢量(-14.705, -1.163, -18.847), 矢量(-7.959, 1,
			-14.562), 矢量(-7.178, 8.005, -10.587), 矢量(4.782, 8.001, -10.771), 矢量(28.992, 10.470, -4.497), 矢量(4.936, 7.724, -1.149), 矢量(
			1.717, 1, 0.060), 矢量(25.854, 6, 9.836), 矢量(17.756, 9.566, 16.298), 矢量(6.528, 8.027, 12.587), 矢量(6.448, 4, 26.183), 矢量(10.642,
			-0.882, 26.222), 矢量(6.730, 4, 27.955), 矢量(3.524, 2.398, 36.929), 矢量(-2.446, 3.980, 28.749), 矢量(-13.504, 3.701, 25.115), 矢量(
			-13.391, -1.033, -11.091), 矢量(-8.079, 1, -10.259), 矢量(-22.976, -1.249, -13.383), 矢量(-22.356, -1, -47.169), 矢量(-30.182, 1,
			-53.529), 矢量(-33.169, 1, -56.538), 矢量(-37.385, 1, -62.523), 矢量(-30.643, 1.010, -52.614), 矢量(-20.277, 3, -49.284), 矢量(-13.910,
			1.034, -35.532), 矢量(-12.221, 0.344, -17.511), 矢量(-13.405, -0.935, -24.677), 矢量(-12.804, 1, -31.534), 矢量(-36.942, 1, -65.436),
			矢量(-20.455, -0.925, -73.618), 矢量(-3.559, 4, -64.156), 矢量(-0.456, 7.010, -91.558), 矢量(-26.940, 1, -85.300), 矢量(9.833, 7,
			-80.990), 矢量(-7.222, 9, -63.924), 矢量(6.501, -1.500, -51.957), 矢量(0.608, 4.088, -58.869), 矢量(9.181, 3.766, -51.480), 矢量(12.738,
			7.081, -48.794), 矢量(29.592, 2, -33.200), 矢量(13.794, 6.751, -21.852), 矢量(-3.849, 7.140, -19.551), 矢量(-14.473, 3.870, 12.918),
			矢量(-13.383, 1, 27.514), 矢量(-16.159, 3.969, 22.852), 矢量(-13.211, 1, 3.722), 矢量(-15.074, 3.907, 12.231), 矢量(-3.622, 7.968,
			12.214), 矢量(5.925, 8.875, 20.818), 矢量(10.921, 4.092, 11.785), 矢量(25.200, 6, 10.104), 矢量(47.244, 6, 6.305), 矢量(62.057, 6,
			-12.589), 矢量(30.094, 10.492, -5.148), 矢量(29.170, 2, -27.303), 矢量(-15.935, -0.324, -33.881), 矢量(-15.770, 1, -60.027), 矢量(
			-20.641, 4, -55.814), 矢量(-9.636, 5, -37.378), 矢量(5.746, 7.915, -8.328), 矢量(11.495, 6.790, -20.891), 矢量(39.880, 6.090, -2.564),
			矢量(14.968, 11.233, 18.685), 矢量(8.991, 6.922, -19.557), 矢量(-13.931, 1, -27.458), 矢量(-5.050, 7.090, -19.670), 矢量(-4.476, 7.991,
			-11.193), 矢量(23.910, 6, 8.823), 矢量(6.687, 4, 27.622), 矢量(12.435, 11.224, 20.056), 矢量(24.684, 6, 10.753), 矢量(14.074, 0.544,
			-3.566), 矢量(13.488, 6.745, -20.327), 矢量(-0.620, 4, -59.956), 矢量(-8.400, 9, -64.796), 矢量(-3.029, 2.540, -82.036), 矢量(7.865,
			-1.903, -78.766), 矢量(7.456, 4.024, -49.360), 矢量(-25.022, -0.820, -49.506), 矢量(5.816, 3.481, -48.516), 矢量(18.532, 3.559,
			-47.724), 矢量(27.437, 5.879, -17.167), 矢量(19.955, 8.010, -18.152), 矢量(25.277, 6.010, -10.782), 矢量(22.788, 6, -15.379), 矢量(
			26.872, 6, -17.481), 矢量(-15.832, 3, -46.399), 矢量(28.824, 3, -77.090), 矢量(37.467, 2, -32.365), 矢量(12.068, 0, -24.317), 矢量(
			10.106, 6.839, -19.969), 矢量(68.266, -1.889, 0.703), 矢量(36.410, -0.056, -11.848), 矢量(11.285, 6.797, -20.422), 矢量(74.959, -1.918,
			0.157), 矢量(46.860, 2, -25.301), 矢量(56.826, 1.539, -19.889), 矢量(36.847, -0.005, -8.008), 矢量(36.065, 6, 17.922), 矢量(34.715,
			13.953, 21.734), 矢量(48.547, 6, 19.290), 矢量(48.886, 14.567, 17.489), 矢量(-11.001, -0.988, -11.790), 矢量(-6.536, 7.984, -10.178),
			矢量(1.546, 4, 14.360), 矢量(8.485, 11.277, 24.218), 矢量(-10.010, 4, 12.262), 矢量(9.626, 9.415, 15.675), 矢量(-14.756, 0.086, 7.120),
			矢量(-10.572, 4, 13.961), 矢量(-1.071, -1.024, 32.877));
		全局.SecondaryFireState = 数组(假, 假, 假, 真, 假, 真, 假, 真, 假, 假, 假, 真, 假, 真, 真, 假, 真, 假, 真, 真, 假, 假, 假, 真, 假, 真, 真, 假, 真, 假, 假, 假, 假, 假, 假,
			假, 假, 真, 假, 假, 真, 假, 假, 假, 假, 假, 假, 真, 真, 假, 真, 真, 真, 真, 真, 真, 真, 真, 真, 假, 假, 真, 真, 真, 真, 真, 假, 真, 假, 真, 假, 真, 真, 真, 真, 真, 真,
			真, 真, 真, 真, 真, 假, 真, 真, 真, 真, 真, 假, 真, 真, 真, 假, 真, 真, 真, 假, 假, 假, 真, 真, 真, 真, 真, 假, 真, 假, 假, 真, 真, 真, 假, 假, 真, 真, 真, 真, 真, 假,
			真, 真, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 假, 假);
		全局.MapCreator = 自定义字符串("mzlnot");
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  花村                  42")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(13.089, 0, -26.365), 矢量(29.893, 2, -25.485), 矢量(32.697, 2.933, -21.771), 矢量(44.752, -1.006, -45.627),
			矢量(2.120, -0.990, -82.022), 矢量(7.771, 4, -76.948), 矢量(-23.492, -1, -46.744), 矢量(-6.185, 5, -36.275), 矢量(-10.439, 7, -26.117),
			矢量(16.638, 6.834, -20.739), 矢量(13.175, 4.228, 6.525), 矢量(49.433, 2, -24.433), 矢量(27.887, 6.523, 10.259), 矢量(29.036, 10.420,
			2.390), 矢量(28.668, 10.502, -5.908), 矢量(46.791, 6, -0.194), 矢量(49.191, 14.567, 18.816), 矢量(52.762, -1, -2.468), 矢量(55.361,
			0.888, 5.126), 矢量(50.297, 6, 8.255), 矢量(-14.767, 3.934, 11.256), 矢量(-0.391, 3.981, 20.246), 矢量(-4.048, 7.970, 12.221), 矢量(
			-15.042, 3, -44.749), 矢量(-9.023, -0.920, -75.119), 矢量(-2.301, 4, -66.847), 矢量(-16.318, 3.674, -51.304), 矢量(13.185, 7.071,
			-49.084), 矢量(14.555, 4, -74.706), 矢量(28.875, 2.268, -36.788), 矢量(17.019, 3.501, -44.632), 矢量(20.141, 3.974, -40.541), 矢量(
			27.520, 2, -31.618), 矢量(40.812, -1.854, -39.315), 矢量(34.521, 1.728, -47.694), 矢量(18.521, 3.607, -47.910), 矢量(20.613, 2.476,
			-57.867), 矢量(23.771, 2.910, -68.942), 矢量(15.431, 3.976, -53.577), 矢量(1.968, 5, -41.521), 矢量(27.610, 0, 4.676), 矢量(27.849,
			10.445, 3.608), 矢量(34.715, 13.953, 22.512), 矢量(12.953, 6.738, -20.721), 矢量(0.056, 4, -59.690));
		全局.SecondaryFireState = 数组(真, 假, 真, 真, 假, 真, 真, 假, 真, 假, 真, 真, 假, 假, 假, 真, 假, 真, 假, 真, 假, 假, 真, 真, 假, 真, 真, 真, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 真, 真, 真, 真, 真);
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  圣诞花村           20                                 百合")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(圣诞节花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(41.478, 5.998, 17.808), 矢量(35.336, 6, 17.910), 矢量(34.715, 13.963, 21.569), 矢量(48.046, 6.472, 18.228),
			矢量(49.306, 14.557, 17.435), 矢量(53.573, 4.398, -30.715), 矢量(58.396, 6.010, -15.645), 矢量(62.898, 1.382, -4.150), 矢量(57.280,
			2.820, 5.252), 矢量(39.448, 6.090, -4.962), 矢量(29.854, 10.476, -4.170), 矢量(45.638, 6, -12.148), 矢量(40.461, 6, -5.431), 矢量(-7.397,
			7.999, -10.523), 矢量(-16.636, 3.972, 11.373), 矢量(-19.405, -1.149, -12.283), 矢量(-15.916, 0.807, -3.700), 矢量(-16.281, 3.974,
			11.086), 矢量(-17.197, 3.869, 15.266), 矢量(-13.648, 1, 26.932), 矢量(-15.923, -1, 9.208));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假);
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  努巴尼               62                                 匿名")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(努巴尼);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(74.990, 6.249, 12.188), 矢量(74.031, 6.250, -2.699), 矢量(80.127, 0.260, -14.581), 矢量(75.675, 6.250,
			-13.982), 矢量(74.271, 6.260, -1.238), 矢量(95.977, 0.800, -1.809), 矢量(93.242, 6.250, 8.398), 矢量(42.995, -0.750, -16.786), 矢量(
			47.461, 1.682, -9.813), 矢量(47.952, -2.175, 7.344), 矢量(53.123, -2, 17.214), 矢量(52.736, -2.175, 10.677), 矢量(27.757, 6.250,
			38.545), 矢量(8.705, 6.250, 37.833), 矢量(5.561, 1.498, 21.154), 矢量(35.329, 5.250, 10.789), 矢量(53.653, 2.375, 15.813), 矢量(64.141,
			6.958, 19.776), 矢量(119, -3.925, 21.829), 矢量(124.457, 0.282, 14.140), 矢量(114.633, 5.468, 23.764), 矢量(131.240, -3.750, 37.048),
			矢量(158.555, 4.250, 10.923), 矢量(154.249, -3.740, -6.318), 矢量(151.503, 4.337, -5.655), 矢量(153.790, -3.750, -8.338), 矢量(153.217,
			4.337, -6.222), 矢量(153.350, -3.750, -8.856), 矢量(152.166, 4.337, -7.043), 矢量(152.110, -3.750, -8.972), 矢量(152.793, 4.337,
			-6.354), 矢量(155.320, -3.740, -6.770), 矢量(151.300, 4.337, -6.402), 矢量(154.646, -3.750, -7.806), 矢量(152.747, 4.163, -7.378), 矢量(
			148.362, -2.422, -8.387), 矢量(149.681, 4.144, -5.548), 矢量(202.108, -3.801, -11.003), 矢量(201.002, 0.209, -1.013), 矢量(200.080,
			4.199, 43.257), 矢量(177.961, 4.250, 14.783), 矢量(145.547, -3.750, -9.109), 矢量(159.375, -3.915, 15.580), 矢量(154.760, 2.250,
			18.664), 矢量(158.423, 4.250, 1.260), 矢量(141.277, -2.546, 13.204), 矢量(138.764, 2.250, 20.065), 矢量(125.600, -3.926, 2.280), 矢量(
			123.961, 0.263, 12.256), 矢量(114.850, 5.210, 21.759), 矢量(126.046, -5.763, -14.637), 矢量(86.195, 6.250, 19.002), 矢量(21.986, 4.571,
			16.252), 矢量(13.831, 0.075, 5.404), 矢量(14.786, 6.250, 6.622), 矢量(20.671, 4.408, 18.032), 矢量(8.021, 6.250, 28.420), 矢量(53.499,
			2.353, 13.043), 矢量(121.876, 2.250, 21.381), 矢量(117.525, 4.250, 4.461), 矢量(77.192, 6.250, -21.579), 矢量(69.616, 4.614, -25.604),
			矢量(86.265, 4.260, -29.214));
		全局.SecondaryFireState = 数组(假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 假, 真, 假, 假, 真, 假, 假, 真, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假,
			假, 真, 假, 真, 真, 真, 真, 假, 假, 假, 假, 假, 假, 假, 真, 真, 真, 假, 假, 假, 假, 真, 真, 假, 真, 假, 假);
		全局.Creator = 数组(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("就是想要重建帝国"),
			自定义字符串("mzlnot"), 自定义字符串("就是想要重建帝国"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串(
			"就是想要重建帝国"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  阿努比斯           97              经典")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(阿努比斯神殿);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(7.915, -2.235, 0.320), 矢量(9.049, 2.327, 0.682), 矢量(9.880, 5.042, 11.281), 矢量(14.658, 10.414,
			10.092), 矢量(-3.242, 3.453, 4.920), 矢量(-17.048, 0.569, 27.466), 矢量(-18.466, 4.510, 30.233), 矢量(-24.279, 4.520, 37.527), 矢量(
			-23.280, 7.937, 43.519), 矢量(-33.388, 10.200, 43.863), 矢量(-48.642, 9.543, 37.438), 矢量(-37.769, 4.776, 28.951), 矢量(-46.507,
			9.509, 32.782), 矢量(-44.850, 3.411, 43), 矢量(-52.823, 5.563, 45.824), 矢量(-50.717, 9.543, 38.147), 矢量(-40.682, 10.210, 48.051),
			矢量(-30.235, 1.470, 60.069), 矢量(-31.903, 5.523, 59.678), 矢量(-32.285, 9.005, 57.498), 矢量(-22.102, 6.388, 58.186), 矢量(-12.763,
			10.419, 53.974), 矢量(-8.554, 4.663, 83.586), 矢量(-6.003, 7.815, 92.016), 矢量(-15.615, 4.798, 88.104), 矢量(-18.536, 9.903, 89.636),
			矢量(-27.032, 14.217, 87.287), 矢量(-11.558, 4.752, 104.185), 矢量(-17.339, 10.921, 105.181), 矢量(-7.991, 4.668, 112.599), 矢量(-15.626,
			10.890, 108.302), 矢量(-16.437, 4.976, 108.057), 矢量(-16.480, 10.896, 109.374), 矢量(-1.588, 4.753, 106.367), 矢量(-0.597, 7.902,
			91.912), 矢量(-4.119, 12.834, 85.847), 矢量(4.808, 3.521, 73.763), 矢量(4.863, 8.507, 66.058), 矢量(-3.260, 1.402, 64.103), 矢量(-6.997,
			5.563, 60.178), 矢量(-11.328, 10.406, 54.655), 矢量(-2.297, 12.533, 40.017), 矢量(-16.851, 4.641, 29.563), 矢量(-23.715, 3.874,
			20.807), 矢量(-26.173, 10.903, 18.710), 矢量(-45.140, 1.513, 32.881), 矢量(-45.724, 9.543, 32.312), 矢量(-47.638, 9.510, 22.050), 矢量(
			-36.620, 5.009, 8.849), 矢量(-33.949, 10.476, 10.088), 矢量(-35.352, 5.509, 23.874), 矢量(-27.280, 10.903, 18.262), 矢量(-13.020,
			0.932, 13.902), 矢量(-25.793, 7.888, 44.275), 矢量(-14.245, 10.479, 51.989), 矢量(-2.402, 3.566, 64.647), 矢量(4.412, 8.507, 67.181),
			矢量(-10.099, 0.257, 99.497), 矢量(-13.371, 1.251, 102.990), 矢量(-9.884, 4.668, 103.787), 矢量(1.702, 4.131, 98.403), 矢量(1.731, 4.747,
			111.276), 矢量(1.203, 2.013, 93.886), 矢量(-5.300, 6.778, 93.277), 矢量(-5.853, 12.872, 84.817), 矢量(-9.109, 3.230, 69.437), 矢量(
			-15.540, 8.013, 70.136), 矢量(-25.652, 10.411, 68.599), 矢量(-31.587, 9.005, 56.770), 矢量(-24.945, 8.020, 48.038), 矢量(-14.401,
			8.002, 70.274), 矢量(-11.374, 14.421, 80.373), 矢量(-26.721, 14.227, 82.471), 矢量(-30.661, 1.479, 66.596), 矢量(-31.276, 9.005,
			57.056), 矢量(-15.252, 10.813, 53.138), 矢量(-8.990, 12.035, 18.274), 矢量(16.304, 4.107, 16.172), 矢量(-31.846, 6.509, 27.854), 矢量(
			-5.876, 0.891, 31.087), 矢量(-6.205, 8.856, 34.100), 矢量(-32.697, 10.200, 45.877), 矢量(-14.876, 10.658, 52.388), 矢量(-29.720, 9.015,
			56.615), 矢量(-19.664, 10.923, 106.115), 矢量(9.880, 8.507, 65.509), 矢量(-6.613, 8.002, 68.984), 矢量(-7.761, 14.421, 80.073), 矢量(
			-45.406, 3.411, 42.829), 矢量(-36.176, 1.990, 49.025), 矢量(-17.101, 1.498, 60.313), 矢量(-14.204, 6.289, 50.393), 矢量(-11.427,
			12.488, 47.877), 矢量(-3.828, 0.835, 34.555), 矢量(-5.224, 8.842, 33.420), 矢量(-10.287, 12.543, 42.070), 矢量(-12.238, 12.521,
			48.733), 矢量(-63.462, 1.521, 47.273));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 真, 真, 假, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 真,
			真, 真, 假, 真, 假, 假, 真, 真, 假, 假, 真, 假, 真, 假, 假, 假, 假, 假, 假, 真);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  伊里奥斯           52                                   m")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(伊利奥斯);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(110.677, 60.367, -157.975), 矢量(108.175, 64.415, -157.645), 矢量(98.046, 65.563, -156.716), 矢量(78.464,
			68.068, -156.390), 矢量(73.633, 64.484, -170.633), 矢量(83.799, 67.653, -179.345), 矢量(73.432, 66.871, -179.198), 矢量(66.047, 66.839,
			-169.404), 矢量(41.404, 68.689, -163.868), 矢量(16.096, 68.517, -164.283), 矢量(29.469, 57.367, -162.218), 矢量(32.194, 60.399,
			-167.898), 矢量(22.568, 60.367, -175.782), 矢量(6.297, 63.658, -178.836), 矢量(0.899, 67.534, -180.911), 矢量(3.035, 65.254, -160.745),
			矢量(-25.181, 68.531, -149.850), 矢量(15.872, 60.997, -159.911), 矢量(27.544, 62.507, -149.399), 矢量(37.964, 61.309, -156.658), 矢量(
			40.646, 68.699, -162.564), 矢量(71.691, 68.068, -156.764), 矢量(54.360, 65.026, -156.749), 矢量(-10.475, 64.613, -148.330), 矢量(
			-14.591, 68.068, -151.287), 矢量(-13.502, 64.484, -170.412), 矢量(-17.179, 68.068, -161.602), 矢量(1.758, 65.229, -157.361), 矢量(
			-38.208, 60.688, -147.500), 矢量(-41.675, 65.546, -155.841), 矢量(2.064, 64.067, -153.054), 矢量(62.052, 60.496, -143.538), 矢量(
			64.514, 66.625, -168.037), 矢量(65.126, 66.651, -178.813), 矢量(115.683, 64.899, -184.838), 矢量(93.726, 58.152, -186.841), 矢量(
			54.983, 65.077, -161.209), 矢量(86.949, 58.367, -147.704), 矢量(57.655, 64.218, -147.465), 矢量(-7.873, 60.367, -182.052), 矢量(5.888,
			60.511, -185.744), 矢量(-23.691, 58.544, -186.832), 矢量(-61.997, 60.367, -159.080), 矢量(-42.917, 66.475, -180.466), 矢量(-13.359,
			58.464, -185.344), 矢量(-13.267, 64.624, -180.716), 矢量(1.589, 67.528, -180.595), 矢量(1.890, 64.304, -154.567), 矢量(27.017, 61.217,
			-150.052), 矢量(69.884, 64.484, -181.152), 矢量(50.469, 62.486, -178.397), 矢量(27.603, 60.464, -183.471), 矢量(8.472, 60.464,
			-176.259));
		全局.SecondaryFireState = 数组(假, 假, 真, 假, 假, 假, 假, 真, 真, 假, 假, 假, 假, 假, 假, 真, 真, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 真, 假, 真, 真, 真, 假, 真, 假,
			真, 真, 真, 真, 假, 假, 真, 真, 假, 假, 假, 假, 假, 真, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串(
			"mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串(
			"mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串(
			"mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("JvaCqhx"), 自定义字符串(
			"mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("JvaCqhx"), 自定义字符串("略胜一筹"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"),
			自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("花开堪折直须折"), 自定义字符串("略胜一筹"), 自定义字符串("花开堪折直须折"), 自定义字符串("略胜一筹"), 自定义字符串(
			"就是想要重建帝国"), 自定义字符串("略胜一筹"), 自定义字符串("花开堪折直须折"), 自定义字符串("就是想要重建帝国"), 自定义字符串("清尘丶"), 自定义字符串("就是想要重建帝国"), 自定义字符串("清尘丶"), 自定义字符串(
			"此人已匿名"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"), 自定义字符串("就是想要重建帝国"));
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  伊里奥斯           8                                    果酱")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(伊利奥斯);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(329.953, -23.682, -44.008), 矢量(332.226, -14.754, -33.798), 矢量(329.490, -24.284, -5.458), 矢量(328.650,
			-20.729, 4.082), 矢量(313.008, -14.812, -12.294), 矢量(342.987, -23.641, -27.609), 矢量(348.689, -23.615, -32.043), 矢量(354.364,
			-17.920, -41.798), 矢量(365.170, -26.954, -17.622));
		全局.SecondaryFireState = 数组(真, 假, 假, 假, 假, 真, 假, 假);
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  多拉多               23                                 百合")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(多拉多);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(66.184, 8.993, 3.923), 矢量(62.464, 9.120, 8.583), 矢量(50.745, 2, 3.645), 矢量(47.436, 9.342, 5.403), 矢量(
			50.128, 9, 2.137), 矢量(41.081, 10.640, 28.053), 矢量(105.217, 18, -3.978), 矢量(54.733, 13.421, 24.100), 矢量(16.357, 0.934, 2.637),
			矢量(20.215, 9.875, 1.688), 矢量(-4.466, 8.200, 2.242), 矢量(52.626, 9, 4.307), 矢量(87.453, 11, 12.710), 矢量(86.133, 20, 15.706), 矢量(
			101.119, 20, 28.848), 矢量(127.609, 10.632, 6.250), 矢量(128.375, 18.010, 7.195), 矢量(149.603, 11, 38.324), 矢量(174.032, 11, 44.406),
			矢量(173.678, 19.110, 45.389), 矢量(168.500, 11, 46.428), 矢量(168.866, 16.988, 51.103), 矢量(183.376, 13.980, 31.596), 矢量(162.052, 11,
			26.481));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 真, 真, 真, 真, 假, 真, 真, 假, 真, 真, 假, 真, 真, 假, 假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串(
			"源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("清尘丶"), 自定义字符串("就是想要重建帝国"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"),
			自定义字符串("星刻的竜骑士"), 自定义字符串("清尘丶"), 自定义字符串("mzlnot"), 自定义字符串("mzlnot"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串(
			"源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("源氏喜欢被安娜睡"), 自定义字符串("就是想要重建帝国"), 自定义字符串("星刻的竜骑士"));
	}
}

规则("[自定义]哪些技能可以使用(如果要开启大招,请关掉 英雄-设置-大招自动充能 )")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		"技能1(S)"
		全局.DefaultAliblty1Enabled = 真;
		"技能2(E)"
		全局.DefaultAliblty2Enabled = 真;
		"辅助攻击模式(右键)"
		全局.DefaultSecondaryEnabled = 真;
		"终极技能"
		全局.DefaultUltimateEnabled = 真;
		全局.bot_position = 矢量(0, 0, 0);
		全局.bot_direction = 矢量(0, 0, 0);
	}
}

//工坊设置
规则("[自定义]地图工坊设置")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.PioneerModeEnabled = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("是否允许开拓"), 假, 0);
		全局.DisableContinuousCreation = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("连续开拓"), 假, 1);
		全局.JudgeWhenLanding = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("落地进点"), 真, 2);
		全局.OneTimeAbility = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("一次性技能"), 真, 3);
		全局.CheatRecord = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("跳关提醒"), 真, 4);
		"机器人设置"
		全局.BotEnabled = 地图工坊设置开关(自定义字符串("机器人设置"), 自定义字符串("是否开启机器人"), 假, 0);
		全局.ActionEditModeEnabled = 地图工坊设置开关(自定义字符串("机器人设置"), 自定义字符串("是否编辑机器人动作"), 假, 1);
		全局.bot_max_action_time = 地图工坊设置整数(自定义字符串("机器人设置"), 自定义字符串("最大教学时间"), 60, 30, 120, 2);
		全局.bot_num = 地图工坊设置整数(自定义字符串("机器人设置"), 自定义字符串("机器人数量"), 2, 1, 4, 3);
		"目标点颜色"
		全局.RGB[0] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈红"), 255, 0, 255, 0);
		全局.RGB[1] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈绿"), 255, 0, 255, 1);
		全局.RGB[2] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈蓝"), 0, 0, 255, 2);
		全局.RGB[3] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈不透明度"), 255, 0, 255, 3);
		"超级跳起飞点颜色"
		全局.RGB[4] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈红"), 208, 0, 255, 4);
		全局.RGB[5] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈绿"), 68, 0, 255, 5);
		全局.RGB[6] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈蓝"), 180, 0, 255, 6);
		全局.RGB[7] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈不透明度"), 255, 0, 255, 7);
		"小球颜色"
		全局.RGB[8] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球红"), 154, 0, 255, 8);
		全局.RGB[9] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球绿"), 110, 0, 255, 9);
		全局.RGB[10] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球蓝"), 147, 0, 255, 10);
		全局.RGB[11] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球不透明度"), 255, 0, 255, 11);
		"判定圈大小"
		全局.RingRadius[0] = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("目标点圈大小"), 1.500, 0.500, 4, 0);
		全局.RingRadius[1] = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串(" 起始点圈大小"), 2, 0.200, 5, 1);
		全局.RingRadius[2] = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("起飞点圈大小"), 2, 0.200, 4, 2);
		全局.SphereRadius = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("小球显示大小"), 2, 0.200, 5, 3);
		全局.SphereJudgeRadius = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("小球判定大小"), 1.800, 0.200, 5, 4);
	}
}

规则("Debug")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.BotEnabled == 真;
	    全局.ActionEditModeEnabled == 真;
	}

	动作
	{
        全局.action_type[1] = 自定义字符串("是否W/S");
		全局.action_type[2] = 自定义字符串("是否A/D");
		全局.action_type[3] = 自定义字符串("是否跳跃");
		全局.action_type[4] = 自定义字符串("是否辅助攻击模式");
		全局.action_type[5] = 自定义字符串("是否下蹲");
		全局.action_type[6] = 自定义字符串("转视角速度");
		全局.action_type[7] = 自定义字符串("转视角最终方向");
		全局.action_type[8] = 自定义字符串("持续时间");


		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("机器人速度"), 速度(主机玩家.Bot), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("玩家速度"), 速度(主机玩家), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("机器人阈值"), 阈值(主机玩家.Bot), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("玩家阈值"), 阈值(主机玩家), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("机器人朝向"), 面朝方向(主机玩家.Bot), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("玩家朝向"), 面朝方向(主机玩家), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("机器人位置"), 所选位置(主机玩家.Bot), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("玩家位置"), 所选位置(主机玩家), 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("bot_start_direction"), 主机玩家.bot_start_direction, 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(主机玩家, 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("bot_position"), 主机玩家.bot_direction, 无, 顶部, 50, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(主机玩家, 自定义字符串("f+R切换编辑模式\nQ/E切换动作\nshift/ctrl切换子动作\n左右键调整数值\n喷漆保存位置\nf+空格删除最后动作"), 无, 无, 左边, 12, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
	}
}

规则("显示动作")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.ActionEditModeEnabled == 真;
		已重生(事件玩家) == 真;
		事件玩家 == 主机玩家;
	}

	动作
	{
		创建HUD文本(事件玩家, 自定义字符串("{0}动作序号", 事件玩家.edit_mode?自定义字符串("[编辑中]"):自定义字符串("")), 自定义字符串("{0}/{1}", 事件玩家.action_idx + 1, 数量(事件玩家.actions)), 无, 右边, 2, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		For 玩家变量(事件玩家, action_type, 0, 数量(全局.action_type) - 1, 1);
			创建HUD文本(事件玩家, 单次赋值(全局.action_type[单次赋值(事件玩家.action_type) + 1]), 数量(全局.action_value[单次赋值(事件玩家.action_type)]) > 1?全局.action_value[单次赋值(事件玩家.action_type)][事件玩家.current_action[单次赋值(事件玩家.action_type)]]:事件玩家.current_action[单次赋值(事件玩家.action_type)], 事件玩家.action_s_idx == 单次赋值(事件玩家.action_type)?自定义字符串("<-"):自定义字符串(""), 右边, 单次赋值(事件玩家.action_type + 3), 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		End;
	}
}


规则("Create Clones Team 1")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.actions != 无;
	}

	动作
	{
		全局.action_value[0] = 数组(0, 1, -1);
		全局.action_value[1] = 数组(0, 1, -1);
		全局.action_value[2] = 数组(0, 1, -1);
		全局.action_value[3] = 数组(0, 1, -1);
		全局.action_value[4] = 数组(0, 1, -1);
		全局.action_value[5] = 自定义字符串("数值");
		全局.action_value[6] = 自定义字符串("方向");
		全局.action_value[7] = 自定义字符串("数值");

		全局.bot_name = 数组(自定义字符串("8号实验体"), 自定义字符串("孤独的铁球"), 自定义字符串("渣客镇王者"), 自定义字符串("角斗冠军"), 自定义字符串("社会大佬"));
		全局.bot_action = 数组(自定义字符串("晒太阳"), 自定义字符串("对旅店老板重拳出击"), 自定义字符串("吃香蕉"), 自定义字符串("开着作弊器与黑影PK"),
			自定义字符串("安娜面前呼呼大睡"), 自定义字符串("拯救艾泽拉斯"), 自定义字符串("和堡垒学说话"), 自定义字符串("喝纳米可乐"), 
			自定义字符串("4400炸鱼"), 自定义字符串("试驾DVA的机甲"), 自定义字符串("挖狂鼠埋的宝藏"), 自定义字符串("酒馆5连鸡"),
			自定义字符串("潘达利亚玩泥巴"), 自定义字符串("偷温斯顿的香蕉"), 自定义字符串("偷温斯顿的香蕉"), 自定义字符串("探索地下城"));
		调用子程序(CreateBot);
    }
}

规则("CreateBot")
{
	事件
	{
		子程序;
		CreateBot;
	}

	动作
	{
		For 全局变量(bot_idx, 0, 全局.bot_num, 1);
			生成机器人(英雄(破坏球), 队伍2, 全局.bot_idx + 1, 全局.bot_position, 全局.bot_direction);
			全局.Bot[全局.bot_idx] = 此栏位的玩家(全局.bot_idx + 1, 队伍2);
			开始为机器人强制设置名称(全局.Bot[全局.bot_idx], 全局.bot_name[全局.bot_idx]);
		End;
    }
}

规则("机器人初始化")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.actions != 无;
		已重生(事件玩家) == 真;
		是否是机器人(事件玩家) == 真;
	}

	动作
	{
		事件玩家.keyboard_enabled = 真;
		事件玩家.owner = 无;
		事件玩家.Level = 0;
		事件玩家.FreeMode = 真;
		事件玩家.action_time = 0;
		事件玩家.bot_action = 数组随机取值(全局.bot_action);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 事件玩家.owner == 无?自定义字符串("{0} 正在{1}", 事件玩家, 事件玩家.bot_action):自定义字符串("{0} 正在教 {1}({2}s)", 事件玩家, 事件玩家.owner, 全局.bot_max_action_time - 事件玩家.action_time), 右边, 栏位(事件玩家) - 50, 颜色(白色), 颜色(白色), 颜色(橙色), 可见性，排序规则和字符串, 默认可见度);
	}
}

规则("房主重置所有机器人")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.actions != 无;
		正在交流(主机玩家, 终极技能状态) == 真;
		按钮被按下(主机玩家, 按钮(互动)) == 真;
	}

	动作
	{
		If(!实体存在(全局.Bot[0]));
			调用子程序(CreateBot);
		End;
		For 全局变量(bot_idx, 0, 全局.bot_num, 1);
			全局.Bot[全局.bot_idx].Level = 0;
			停止追踪玩家变量(全局.Bot[全局.bot_idx], action_time);
			全局.Bot[全局.bot_idx].action_time = 0;
			全局.Bot[全局.bot_idx].bot_action = 数组随机取值(全局.bot_action);
			全局.Bot[全局.bot_idx].owner = 无;
		End;
	}
}

规则("按F+R进入编辑模式")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.actions != 无;
		全局.ActionEditModeEnabled == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		事件玩家 == 主机玩家;
        事件玩家.bot_state != 2;
		事件玩家.IsSpectating == 假;
		事件玩家.Level + 1 < 数量(全局.CheckpointPosition);
	}

	动作
	{
		If(事件玩家.edit_mode == 0);
			事件玩家.bot_state = 0;
			设置状态(事件玩家, 无, 定身, 9999);
			事件玩家.bot_position = 全局.bot_start_position[事件玩家.Level + 1];
			事件玩家.bot_start_direction = 全局.bot_start_direction[事件玩家.Level + 1];
			If(事件玩家.bot_position == 无);
				事件玩家.bot_position = 所选位置(事件玩家);
			End;
			If(事件玩家.bot_start_direction == 无);
				事件玩家.bot_start_direction = 面朝方向(事件玩家);
			End;
			事件玩家.actions = 全局.actions[事件玩家.Level + 1];
			事件玩家.action_idx = 0;
			If(数量(事件玩家.actions) == 0);
				事件玩家.actions[事件玩家.action_idx] = 数组(0, 0, 0, 0, 0, 0, 0, 无, 0);
			End;
			事件玩家.current_action = 事件玩家.actions[事件玩家.action_idx];
			事件玩家.action_s_idx = 0;
			事件玩家.edit_mode = 1;
		Else;
			事件玩家.actions[事件玩家.action_idx] = 事件玩家.current_action;
			全局.bot_start_position[事件玩家.Level + 1] = 事件玩家.bot_position;
			全局.bot_start_direction[事件玩家.Level + 1] = 事件玩家.bot_start_direction;
			全局.actions[事件玩家.Level + 1] = 事件玩家.actions;
			事件玩家.edit_mode = 0;
			事件玩家.bot_state = 1;
			清除状态(事件玩家, 定身);
		End;
	}
}

规则("按shift/ctrl选择子动作")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		事件玩家.edit_mode == 1;
		(按钮被按下(事件玩家, 按钮(蹲下)) || 按钮被按下(事件玩家, 按钮(技能1))) == 真;
	}

	动作
	{
		If(按钮被按下(事件玩家, 按钮(技能1)));
			事件玩家.action_s_idx -= 1;
			If(事件玩家.action_s_idx < 0);
				事件玩家.action_s_idx = 数量(全局.action_type) - 2;
			End;
		Else;
			事件玩家.action_s_idx += 1;
			If(事件玩家.action_s_idx >= 数量(全局.action_type) - 1);
				事件玩家.action_s_idx = 0;
			End;
		End;
	}
}

规则("左/右键调整参数")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		事件玩家.edit_mode == 1;
		(按钮被按下(事件玩家, 按钮(主要攻击模式)) || 按钮被按下(事件玩家, 按钮(辅助攻击模式))) == 真;
	}

	动作
	{
		If(全局.action_value[事件玩家.action_s_idx] == 自定义字符串("数值"));
			If(按钮被按下(事件玩家, 按钮(辅助攻击模式)));
				事件玩家.current_action[事件玩家.action_s_idx] += 0.01;
				等待(0.016, 无视条件);
				等待(0.500, 当为“假”时中止);
				While(按钮被按下(事件玩家, 按钮(辅助攻击模式)));
					事件玩家.current_action[事件玩家.action_s_idx] += 0.01;
					等待(0.016, 无视条件);
					等待(0.030, 当为“假”时中止);
				End;
			Else If(按钮被按下(事件玩家, 按钮(主要攻击模式)) && 事件玩家.current_action[事件玩家.action_s_idx] > 0);
				事件玩家.current_action[事件玩家.action_s_idx] -= 0.01;
				等待(0.016, 无视条件);
				等待(0.500, 当为“假”时中止);
				While(按钮被按下(事件玩家, 按钮(主要攻击模式)) && 事件玩家.current_action[事件玩家.action_s_idx] > 0);
					事件玩家.current_action[事件玩家.action_s_idx] -= 0.01;
					等待(0.016, 无视条件);
					等待(0.030, 当为“假”时中止);
				End;
			End;
		Else If(全局.action_value[事件玩家.action_s_idx] == 自定义字符串("方向"));
			If(按钮被按下(事件玩家, 按钮(主要攻击模式)));
				事件玩家.current_action[事件玩家.action_s_idx] = 面朝方向(事件玩家);
			Else;
				事件玩家.current_action[事件玩家.action_s_idx] = 无;
			End;
		Else;
			事件玩家.current_action[事件玩家.action_s_idx] += 1;
			If(事件玩家.current_action[事件玩家.action_s_idx] >= 数量(全局.action_value[事件玩家.action_s_idx]));
				事件玩家.current_action[事件玩家.action_s_idx] = 0;
			End;
		End;
	}
}


规则("喷漆保存位置和方向")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		正在使用喷漆交流(事件玩家) == 真;
		事件玩家.edit_mode == 1;
	}

	动作
	{
		事件玩家.bot_position = 所选位置(事件玩家);
		事件玩家.bot_start_direction = 面朝方向(事件玩家);
	}
}

规则("按E下一个动作")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
		事件玩家.edit_mode == 1;
	}

	动作
	{
		事件玩家.actions[事件玩家.action_idx] = 事件玩家.current_action;
		事件玩家.action_idx += 1;
		If(事件玩家.action_idx >= 数量(事件玩家.actions));
			事件玩家.actions[事件玩家.action_idx] = 数组(0, 0, 0, 0, 0, 0, 0, 无, 0);
		End;
		事件玩家.action_s_idx = 0;
		事件玩家.current_action = 事件玩家.actions[事件玩家.action_idx];
	}
}

规则("按Q上一个动作")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		事件玩家.edit_mode == 1;
	}

	动作
	{
		事件玩家.actions[事件玩家.action_idx] = 事件玩家.current_action;
		If(事件玩家.action_idx > 0);
			事件玩家.action_idx -= 1;
			事件玩家.action_s_idx = 0;
			事件玩家.current_action = 事件玩家.actions[事件玩家.action_idx];
		End;
	}
}

规则("按f+空格删除动作")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		事件玩家.edit_mode == 1;
		事件玩家.action_idx == 数量(事件玩家.actions) - 1;
		事件玩家.action_idx >= 0;
	}

	动作
	{
		修改玩家变量(事件玩家, actions, 根据索引从数组中移除, 事件玩家.action_idx);
		事件玩家.action_idx -= 1;
		事件玩家.current_action = 事件玩家.actions[事件玩家.action_idx];
		小字体信息(事件玩家, 自定义字符串("动作已删除"));
	}
}

规则("按X召唤机器人")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		全局.actions != 无;
		(正在交流(事件玩家, 需要帮助) || 正在交流(事件玩家, 需要治疗)) == 真;
		事件玩家.FreeMode == 假;
		事件玩家.GameComplete == 假;
		事件玩家.edit_mode == 0;
	}

	动作
	{
		If(事件玩家.Bot != 无);
			小字体信息(数组(事件玩家, 事件玩家.Bot), 自定义字符串("{0}{1}", 事件玩家.Bot, 全局.SmallHint[29]));
		Else If(全局.actions[事件玩家.Level + 1] == 无);
			小字体信息(数组(事件玩家, 已过滤的数组(全局.Bot, 当前数组元素.owner == 无)), 全局.SmallHint[26]);
		Else;
			事件玩家.Bot = 数组随机取值(已过滤的数组(全局.Bot, 当前数组元素.owner == 无));
			If(事件玩家.Bot == 无);
				小字体信息(事件玩家, 全局.SmallHint[27]);
			Else;
				小字体信息(数组(事件玩家, 事件玩家.Bot), 自定义字符串("{0}{1}", 事件玩家.Bot, 全局.SmallHint[28]));
				事件玩家.Bot.action_time = 0;
				事件玩家.Bot.owner = 事件玩家;
				交流(事件玩家.Bot, 正在赶来);
				
				事件玩家.bot_position = 全局.bot_start_position[事件玩家.Level + 1];
				事件玩家.bot_start_direction = 全局.bot_start_direction[事件玩家.Level + 1];
				事件玩家.actions = 全局.actions[事件玩家.Level + 1];
				事件玩家.bot_tips = 全局.bot_tips[事件玩家.Level + 1];
				事件玩家.Bot.Level = 事件玩家.Level;
				事件玩家.Bot.sphere_state = 全局.SpherePosition[事件玩家.Level + 1] ? 假 : 真;

				调用子程序(ResetBot);
				事件玩家.bot_state = 0;
				If(事件玩家.Bot != 无);
					小字体信息(数组(事件玩家, 事件玩家.Bot), 自定义字符串("{0}{1}", 事件玩家.Bot, 全局.SmallHint[29]));
				End;	
				等待(0.5, 无视条件);
				事件玩家.bot_state = 1;
				追踪玩家变量频率(单次赋值(事件玩家.Bot), action_time, 全局.bot_max_action_time, 1, 速率及最终值);
			End;
		End;
	}
}

规则("ReleaseBot")
{
	事件
	{
		子程序;
		ReleaseBot;
	}

	动作
	{
		等待直到(事件玩家.bot_state == 1, 10);
		If(事件玩家.edit_mode == 0);
			事件玩家.action_idx = 0;
			事件玩家.bot_position = 无;
			事件玩家.actions = 无;
			事件玩家.bot_start_direction = 无;
		End;
        事件玩家.bot_state = 0;
		事件玩家.bot_position = 无;
		事件玩家.Bot.Level = 0;
		停止追踪玩家变量(事件玩家.Bot, action_time);
		事件玩家.Bot.action_time = 0;
		事件玩家.Bot.bot_action = 数组随机取值(全局.bot_action);
		事件玩家.Bot.owner = 无;
		事件玩家.Bot = 无;
	}
}

规则("ReleaseBot2")
{
	事件
	{
		子程序;
		ReleaseBot2;
	}

	动作
	{
		If(事件玩家.owner != 无);
			If(事件玩家.owner.edit_mode == 0);
				事件玩家.owner.action_idx = 0;
				事件玩家.owner.bot_position = 无;
				事件玩家.owner.bot_start_direction = 无;
				事件玩家.owner.actions = 无;
			End;
			事件玩家.owner.bot_state = 0;
			事件玩家.owner.bot_tips = 无;
			事件玩家.owner.Bot = 无;
		End;
		事件玩家.Level = 0;
		停止追踪玩家变量(事件玩家, action_time);
		事件玩家.action_time = 0;
		事件玩家.bot_action = 数组随机取值(全局.bot_action);
		事件玩家.owner = 无;
	}
}

规则("bot计时")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		是否是机器人(事件玩家) == 真;
		(事件玩家.action_time >= 全局.bot_max_action_time || 事件玩家.owner.Bot != 事件玩家) == 真;
	}

	动作
	{
		交流(事件玩家, 再见);
		小字体信息(数组(事件玩家.owner, 事件玩家), 全局.SmallHint[31]);
		调用子程序(ReleaseBot2);
	}
}

规则("ReleaseBot")
{
	事件
	{
		持续 - 每名玩家;
		队伍2;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		事件玩家.owner == 无;
		是否是机器人(事件玩家) == 真;
		相距距离(全局.bot_position, 所选位置(事件玩家)) > 1;
	}

	动作
	{
		停止按下按钮(事件玩家, 按钮(蹲下));
		事件玩家.keyboard_status_ctrl = 假;
		停止按下按钮(事件玩家, 按钮(跳跃));
		事件玩家.keyboard_status_space = 假;
		停止按下按钮(事件玩家, 按钮(辅助攻击模式));
		事件玩家.keyboard_status_right = 假;
		设置状态(事件玩家, 无, 定身, 0.050);
		施加推力(事件玩家, 速率(事件玩家) * 1, -1, 至地图, 取消相反运动);
		停止定向阈值(事件玩家);
		设置状态(事件玩家, 无, 定身, 1);
		等待(0.50, 无视条件);
		传送(事件玩家, 全局.bot_position);
		开始朝向(事件玩家, 全局.bot_direction, 300, 至地图, 方向及角速率);
		等待(1, 无视条件);
		小字体信息(所有玩家(所有队伍), 自定义字符串("{0}{1}", 事件玩家, 全局.SmallHint[30]));
	}
}

规则("发感谢释放机器人")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		事件玩家.Bot != 无;
		正在交流(事件玩家, 感谢) == 真;
	}

	动作
	{
		交流(事件玩家.Bot, 不用谢);
		调用子程序(ReleaseBot);
	}
}

规则("ResetBot")
{
	事件
	{
		子程序;
		ResetBot;
	}

	动作
	{
        事件玩家.bot_state = 0;
		// 事件玩家.bot_position = 全局.actions[事件玩家.Level + 1][0];
		// 事件玩家.bot_start_direction = 全局.actions[事件玩家.Level + 1][1];
		// 事件玩家.actions = 全局.actions[事件玩家.Level + 1][2];
		事件玩家.action_idx = 0;
		停止按下按钮(事件玩家.Bot, 按钮(蹲下));
		事件玩家.Bot.keyboard_status_ctrl = 假;
		停止按下按钮(事件玩家.Bot, 按钮(跳跃));
		事件玩家.Bot.keyboard_status_space = 假;
		停止按下按钮(事件玩家.Bot, 按钮(辅助攻击模式));
		事件玩家.Bot.keyboard_status_right = 假;
		设置状态(事件玩家.Bot, 无, 定身, 0.050);
		施加推力(事件玩家.Bot, 速率(事件玩家.Bot) * 1, -1, 至地图, 取消相反运动);
		停止定向阈值(事件玩家.Bot);
		设置状态(事件玩家.Bot, 无, 定身, 1);
		事件玩家.bot_direction = 事件玩家.bot_start_direction;
		开始朝向(事件玩家.Bot, 事件玩家.bot_direction, 500, 至地图, 方向及角速率);
		等待(0.25, 无视条件);
		传送(事件玩家.Bot, 事件玩家.bot_position);
		停止定向阈值(事件玩家.Bot);
		设置状态(事件玩家.Bot, 无, 定身, 1);
		等待(0.25, 无视条件);
		传送(事件玩家.Bot, 事件玩家.bot_position);
		等待(1, 无视条件);
		事件玩家.bot_state = 1;
	}
}

规则("按Q重置tp")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		事件玩家.Bot != 无;
		事件玩家.bot_state == 1;
		事件玩家.edit_mode == 0;
	}

	动作
	{
		调用子程序(ResetBot);
	}
}

规则("按R定向阈值")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		全局.BotEnabled == 真;
		事件玩家.Bot != 无;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		事件玩家.bot_position == 真;
		事件玩家.bot_state == 1;
		事件玩家.edit_mode == 0;
	}

	动作
	{
		事件玩家.bot_state = 2;
		For 玩家变量(事件玩家, action_idx, 0, 数量(事件玩家.actions), 1);
			If(事件玩家.bot_tips != 无 && 事件玩家.bot_tips[0] == 事件玩家.action_idx);
				小字体信息(数组(事件玩家.Bot, 事件玩家), 事件玩家.bot_tips[1]);
			End;
			事件玩家.current_action = 事件玩家.actions[事件玩家.action_idx];
			If(全局.action_value[0][事件玩家.current_action[0]] != 0 || 全局.action_value[1][事件玩家.current_action[1]] != 0);
				开始定向阈值(事件玩家.Bot, 矢量(单次赋值(全局.action_value[1][事件玩家.current_action[1]]), 0, 单次赋值(全局.action_value[0][事件玩家.current_action[0]])), 1, 至玩家, 添加至现有阈值, 方向和幅度);
			Else;
				停止定向阈值(事件玩家.Bot);
			End;
			If(全局.action_value[2][事件玩家.current_action[2]] == 1);
				开始按下按钮(事件玩家.Bot, 按钮(跳跃));
				事件玩家.Bot.keyboard_status_space = 真;
			Else If(全局.action_value[2][事件玩家.current_action[2]] == -1);
				停止按下按钮(事件玩家.Bot, 按钮(跳跃));
				事件玩家.Bot.keyboard_status_space = 假;
			End;
			If(全局.action_value[3][事件玩家.current_action[3]] == 1);
				开始按下按钮(事件玩家.Bot, 按钮(辅助攻击模式));
				事件玩家.Bot.keyboard_status_right = 真;
			Else If(全局.action_value[3][事件玩家.current_action[3]] == -1);
				停止按下按钮(事件玩家.Bot, 按钮(辅助攻击模式));
				事件玩家.Bot.keyboard_status_right = 假;
			End;
			If(全局.action_value[4][事件玩家.current_action[4]] == 1);
				开始按下按钮(事件玩家.Bot, 按钮(蹲下));
				事件玩家.Bot.keyboard_status_ctrl = 真;
			Else If(全局.action_value[4][事件玩家.current_action[4]] == -1);
				停止按下按钮(事件玩家.Bot, 按钮(蹲下));
				事件玩家.Bot.keyboard_status_ctrl = 假;
			End;
			If(事件玩家.current_action[6] != 无 && 事件玩家.current_action[5] > 0);
				开始朝向(事件玩家.Bot, 单次赋值(事件玩家.current_action[6]), 单次赋值(事件玩家.current_action[5] * 100), 至地图, 方向及角速率);
			End;
			等待(事件玩家.current_action[7], 无视条件);
		End;
		等待(1, 无视条件);
		调用子程序(ResetBot);
	}
}

//自定义文本
规则("[自定义]地图文本")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.MapHint[0] = 自定义字符串("快到碗里来");
        全局.MapHint[1] = 自定义字符串("在这里起飞");
        全局.MapHint[2] = 自定义字符串("先来拿糖果");
	}
}

规则("[自定义]快捷键提示文本")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.ShortKeyHint[0] = 自定义字符串("重新开始 = F + Q");
        全局.ShortKeyHint[1] = 自定义字符串("阵亡观战 = F + E (按空格切换视角)");
        全局.ShortKeyHint[2] = 自定义字符串("开关隐身 = 任意表情");
        全局.ShortKeyHint[3] = 自定义字符串("自由移动 = F + V");
        全局.ShortKeyHint[4] = 自定义字符串("到上一关 = F + Ctrl");
        全局.ShortKeyHint[5] = 自定义字符串("到下一关 = Ctrl + Q + R");
        全局.ShortKeyHint[6] = 自定义字符串("阵亡复位 = 长按Q");
        全局.ShortKeyHint[7] = 自定义字符串("开关键盘 = Q + E");
        全局.ShortKeyHint[8] = 自定义字符串("切换模式 = R + Space");
        全局.ShortKeyHint[9] = 自定义字符串("快速选关 = 长按 V");
        全局.ShortKeyHint[10] = 自定义字符串("开关环境碰撞 = R");
        全局.ShortKeyHint[11] = 自定义字符串("删除最后一关 = 长按 R + E");
		全局.ShortKeyHint[12] = 自定义字符串("鼠标左/右键选择\n语音(上)更换英雄");
	}
}

规则("[自定义]隐藏说明文本")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.HiddenHint[0] = 自定义字符串("仓鼠跑酷地图合集代码：\n 9ZDS3  | 0C1Q7 | VWA5E\n HSCNX | DA92T | ETB2E");
        全局.HiddenHint[1] = 自定义字符串("教学图代码：Z4DBC");
        全局.HiddenHint[2] = 自定义字符串("编辑器代码：11NXY  快来开拓吧");
        全局.HiddenHint[3] = 自定义字符串("保存点位教学：b站up:Stan_sin\r\n  BV1da4y1W7uA");
		全局.HiddenHint[4] = 自定义字符串("正在观战, R开始演示, 鼠标左/右键切换观战玩家, F+E退出");
	}
}

规则("[自定义]小字体信息")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.SmallHint[0] = 自定义字符串("不能再继续开拓了​");
        全局.SmallHint[1] = 自定义字符串("不要乱跑");
        全局.SmallHint[2] = 自定义字符串("超级跳开拓模式");
        全局.SmallHint[3] = 自定义字符串("正常开拓模式");
        全局.SmallHint[4] = 自定义字符串("传送点模式");
        全局.SmallHint[5] = 自定义字符串("通关了!用时:");
        全局.SmallHint[6] = 自定义字符串(".但是他作弊了~");
        全局.SmallHint[7] = 自定义字符串("拿到糖果了!");
        全局.SmallHint[8] = 自定义字符串("糖果还没拿到!");
        全局.SmallHint[9] = 自定义字符串("要先拿糖果哦!");
        全局.SmallHint[10] = 自定义字符串("开拓者已开拓​");
        全局.SmallHint[11] = 自定义字符串("坐标错误");
        全局.SmallHint[12] = 自定义字符串("继续长按将清除最后一关​");
        全局.SmallHint[13] = 自定义字符串("起点已清除​");
        全局.SmallHint[14] = 自定义字符串("最后一关已删除​");
        全局.SmallHint[15] = 自定义字符串("请不要连续开拓​");
        全局.SmallHint[16] = 自定义字符串("请站在地上设置开拓起点​");
        全局.SmallHint[17] = 自定义字符串("开启隐身​");
        全局.SmallHint[18] = 自定义字符串("关闭隐身​");
        全局.SmallHint[19] = 自定义字符串("自由移动​");
        全局.SmallHint[20] = 自定义字符串("关闭自由移动​");
        全局.SmallHint[21] = 自定义字符串("不要转弯");
        全局.SmallHint[22] = 自定义字符串("请在地面上起跳");
        全局.SmallHint[23] = 自定义字符串("不要乱跑");
        全局.SmallHint[24] = 自定义字符串("点位间距太短");
        全局.SmallHint[25] = 自定义字符串("{0}: 卡关了吗? 发送需要治疗/帮助(X)让教练演示一下", 英雄图标字符串(英雄(破坏球)));
        全局.SmallHint[26] = 自定义字符串("这关太简单了, 教练懒得教");
        全局.SmallHint[27] = 自定义字符串("教练正忙, 请稍候再试");
        全局.SmallHint[28] = 自定义字符串("准备中");
        全局.SmallHint[29] = 自定义字符串("就绪, F+E观战, R开始演示");
        全局.SmallHint[30] = 自定义字符串("空闲中");
		全局.SmallHint[31] = 自定义字符串("到时间了, 教练要去耍了");
		全局.SmallHint[32] = 自定义字符串("可以F+E观看键位, R开始演示");
	}
}

规则("[自定义]定时更新目标点描述")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		If(全局.RoomAliveHoursLeft == 0 && 比赛时间 == 0);
			设置目标点描述(所有玩家(所有队伍), 自定义字符串("房间即将重启​"), 可见和字符串);
		Else;
			设置目标点描述(所有玩家(所有队伍), 自定义字符串("本局游戏时间还剩：​{0}小时​{1}分钟​", 全局.RoomAliveHoursLeft, 取整(比赛时间 / 60, 下)), 可见和字符串);
		End;
		等待(1, 无视条件);
		循环;
	}
}

规则("[自定义]HUD指引文本")
{
	事件
	{
		子程序;
		CreateHUDText;
	}

	动作
	{
		创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(
			"代码：{0}\n编辑器版本：{1}", 全局.code, 全局.version),
			左边, 0, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("\r\n\r\n"), 左边, 1, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(" "), 右边, 1, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("\r\n{0} 双击互动键（{1}）查看快捷键列表", 技能图标字符串(英雄(托比昂), 按钮(技能2)), 输入绑定字符串(按钮(互动))), 左边, 98, 无, 无, 自定义颜色(220,
			220, 220, 200), 可见和字符串, 默认可见度);
		If(全局.BotEnabled && 全局.actions != 无);
			创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("发送需要治疗/帮助(X)召唤教练(部分关卡可用)\n发送感谢释放, Q重置, R开始演示\nf + e观看键位\n如果演示失败, 等几秒后重试一次"), 左边, 4, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		End;
		If(全局.PioneerModeEnabled == 真);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), !实体存在(全局.Pioneer) && 数量(全局.CheckpointPosition) == 0 && 在地面上(当前数组元素)), 自定义字符串("互动{0}+装填{1} 在当前位置开拓​",
				输入绑定字符串(按钮(互动)), 输入绑定字符串(按钮(装填))), 无, 无, 顶部, 5, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.GameComplete && !实体存在(全局.Pioneer) && 数量(全局.CheckpointPosition) != 0), 自定义字符串(
				"互动{0}+装填{1} 成为开拓者,继续开拓​", 输入绑定字符串(按钮(互动)), 输入绑定字符串(按钮(装填))), 无, 无, 顶部, 5, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.GameComplete && 实体存在(全局.Pioneer)), 自定义字符串("当前开拓者: {0}", 全局.Pioneer), 无, 无, 顶部, 5, 颜色(橙色), 颜色(白色),
				颜色(白色), 可见和字符串, 始终不可见);
			创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("\r\n已开拓关卡数:{0}", 数量(全局.CheckpointPosition) - 1), 右边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
			创建HUD文本(添加至数组(添加至数组(空数组, 全局.Pioneer), 无)[1 * !(全局.PioneerLandingPosition != 无)], 自定义字符串("已开拓 长按互动确认,短按互动重新开拓​"), 无, 无, 顶部, 5, 颜色(
				橙色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		Else;
			创建HUD文本(所有玩家(所有队伍), 自定义字符串("最好成绩: {0}/{1}S", 全局.BestScore[0], 全局.BestScore[1]), 无, 无, 右边, -2, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		End;
		If(全局.Tips != 无);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), !当前数组元素.GameComplete), 无, 无, 自定义字符串("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), 顶部, 99, 无, 无, 无, 可见, 默认可见度);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), !当前数组元素.GameComplete), 无, 无, 自定义字符串("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), 顶部, 99, 无, 无, 无, 可见, 默认可见度);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), !当前数组元素.GameComplete), 无, 无, 自定义字符串("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), 顶部, 99, 无, 无, 无, 可见, 默认可见度);
		End;
	}
}

//子程序
规则("创建闯关者HUD文本")
{
	事件
	{
		子程序;
		CreatePlayerHUDText;
	}

	动作
	{
		创建HUD文本(已过滤的数组(事件玩家, !事件玩家.GameComplete), 自定义字符串("第​{0}关 {1}", 事件玩家.Level + 1, 全局.Creator[事件玩家.Level]?自定义字符串("作者: {0}", 全局.Creator[事件玩家.Level]):(全局.MapCreator?自定义字符串("作者: {0}", 全局.MapCreator):自定义字符串(""))), 无, 无, 顶部, 4, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		事件玩家.HUDEntity[0] = 上一个文本ID;
		If(全局.PioneerModeEnabled == 真);
			创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("{0}:{1}", 事件玩家.playerNickname, 事件玩家.Level), 右边, 999 - 事件玩家.Level, 颜色(白色), 颜色(白色), 颜色(橙色), 可见性，排序规则和字符串, 默认可见度);
			事件玩家.HUDEntity[1] = 上一个文本ID;
		Else;
			创建HUD文本(已过滤的数组(事件玩家, !事件玩家.GameComplete), 无, 无, 自定义字符串("检查点: {0} / {1} ({2}s)", 事件玩家.Level + 1, 数量(全局.CheckpointPosition) - 1,  事件玩家.ScoreOfThisRound), 顶部, 5,
				颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
			事件玩家.HUDEntity[2] = 上一个文本ID;
			创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("{0}: {2}S/第{1}关", 事件玩家.playerNickname, 事件玩家.Level, 事件玩家.ScoreOfThisRound), 右边,
				事件玩家.BestScore, 颜色(白色), 颜色(白色), 颜色(橙色), 可见性，排序规则和字符串, 默认可见度);
			事件玩家.HUDEntity[3] = 上一个文本ID;
		End;
		创建HUD文本((事件玩家.FreeMode||(事件玩家.GameComplete&&全局.Pioneer!=事件玩家)) ? 事件玩家 : 无, 英雄图标字符串(全部英雄[事件玩家.chooseHero]), 字符串("{0} {1}", 字符串("英雄"), 事件玩家.chooseHero + 1),
			全部英雄[事件玩家.chooseHero], 右边, 1001, 颜色(白色), 颜色(白色), 颜色(白色), 可见性，排序规则和字符串, 默认可见度);
		事件玩家.HUDEntity[4] = 上一个文本ID;
    }
}

规则("创建闯关者效果")
{
	事件
	{
		子程序;
		CreatePlayerEffect;
	}

	动作
	{
        创建地图文本(事件玩家.Invisible ? 无 : 所有玩家(所有队伍), 事件玩家.playerNickname, 事件玩家, 1, 不要截取, 可见，位置和字符串, 事件玩家.playerColor, 默认可见度);
		事件玩家.MapEntity[0] = 上一个文本ID;
		创建效果(数组(已过滤的数组(事件玩家, 数量(全局.CheckpointPosition) != 0), 事件玩家.Bot), 环, 颜色(绿色), 全局.CheckpointPosition[事件玩家.Level], 全局.RingRadius[1], 可见，位置和半径);
		事件玩家.EffectEntity[0] = 最后创建的实体;
		创建图标(数组(已过滤的数组(事件玩家, !事件玩家.GameComplete), 事件玩家.Bot), 全局.CheckpointPosition[事件玩家.Level + 1], 旗帜, 可见和位置, 颜色(黄色), 真);
		事件玩家.IconEntity[0] = 最后创建的实体;
		创建效果(数组(已过滤的数组(事件玩家, !事件玩家.GameComplete), 事件玩家.Bot), 环, 自定义颜色(全局.RGB[0], 全局.RGB[1], 全局.RGB[2], 全局.RGB[3]), 全局.CheckpointPosition[事件玩家.Level + 1],
			全局.RingRadius[0], 可见，位置和半径);
		事件玩家.EffectEntity[1] = 最后创建的实体;
		创建效果(数组(已过滤的数组(事件玩家, !事件玩家.GameComplete), 事件玩家.Bot), 光柱, 自定义颜色(全局.RGB[0], 全局.RGB[1], 全局.RGB[2], 全局.RGB[3]),
			全局.CheckpointPosition[事件玩家.Level + 1], 全局.RingRadius[0], 可见，位置和半径);
		事件玩家.EffectEntity[2] = 最后创建的实体;
		创建地图文本(数组(已过滤的数组(事件玩家, !事件玩家.GameComplete), 事件玩家.Bot), 全局.MapHint[0], 全局.CheckpointPosition[事件玩家.Level + 1], 2, 不要截取, 可见，位置和字符串, 颜色(白色),
			始终不可见);
		事件玩家.MapEntity[1] = 上一个文本ID;
		创建效果(数组(已过滤的数组(事件玩家, 全局.UltimateState[事件玩家.Level + 1] != 假), 事件玩家.Bot), 环, 自定义颜色(全局.RGB[4], 全局.RGB[5], 全局.RGB[6], 全局.RGB[7]),
			全局.UltimateState[事件玩家.Level + 1], 全局.RingRadius[2], 可见，位置和半径);
		事件玩家.EffectEntity[3] = 最后创建的实体;
		创建效果(数组(已过滤的数组(事件玩家, 全局.UltimateState[事件玩家.Level + 1] != 假), 事件玩家.Bot), 光柱, 自定义颜色(全局.RGB[4], 全局.RGB[5], 全局.RGB[6], 全局.RGB[7]),
			全局.UltimateState[事件玩家.Level + 1], 全局.RingRadius[2], 可见，位置和半径);
		事件玩家.EffectEntity[4] = 最后创建的实体;
		创建地图文本(数组(已过滤的数组(事件玩家, 全局.UltimateState[事件玩家.Level + 1] != 假), 事件玩家.Bot), 全局.MapHint[1], 全局.UltimateState[事件玩家.Level + 1], 2, 不要截取, 可见，位置和字符串,
			颜色(白色), 始终不可见);
		事件玩家.MapEntity[2] = 上一个文本ID;
		If(全局.SpherePosition != 无);
			"小球"
			创建效果(数组(已过滤的数组(事件玩家, 事件玩家.sphere_state == 假 && !事件玩家.GameComplete), 事件玩家.Bot), 球, 自定义颜色(全局.RGB[8], 全局.RGB[9], 全局.RGB[10], 全局.RGB[11]),
				全局.SpherePosition[事件玩家.Level + 1] + 矢量(0, 0.800, 0), 全局.SphereRadius, 可见，位置和半径);
			事件玩家.EffectEntity[5] = 最后创建的实体;
			"小球图标"
			创建地图文本(数组(已过滤的数组(事件玩家, 事件玩家.sphere_state == 假 && !事件玩家.GameComplete), 事件玩家.Bot), 全局.MapHint[2], 全局.SpherePosition[事件玩家.Level + 1] + 矢量(0,
				1.500, 0), 2, 不要截取, 可见，位置和字符串, 颜色(白色), 始终不可见);
			事件玩家.MapEntity[3] = 上一个文本ID;
			创建图标(数组(已过滤的数组(事件玩家, 事件玩家.sphere_state == 假 && !事件玩家.GameComplete), 事件玩家.Bot), 全局.SpherePosition[事件玩家.Level + 1] + 矢量(0, 0.800, 0), 加号, 可见，位置和颜色,
				颜色(橙色), 真);
			事件玩家.IconEntity[1] = 最后创建的实体;
		End;
	}
}

规则("创建Tips")
{
	事件
	{
		子程序;
		CreateTips;
	}

	动作
	{
		If(全局.Tips != 无);
			创建HUD文本(已过滤的数组(事件玩家, 全局.Tips[事件玩家.Level + 1] && !事件玩家.GameComplete && !事件玩家.FreeMode && !按钮被按下(事件玩家, 按钮(互动))), 自定义字符串(
				"{0}:　　　　　　　　　　　　　　　　　　　　　▼\n{1}\n", 英雄图标字符串(英雄(破坏球)), 全局.Tips[事件玩家.Level + 1]), 无, 无, 顶部, 100, 颜色(青绿色), 无, 无, 可见和字符串, 默认可见度);
			事件玩家.Entity[17] = 上一个文本ID;
		End;
	}
}

规则("变成球")
{
	事件
	{
		子程序;
		ResetBall;
	}

	动作
	{
		If(所用英雄(事件玩家) == 英雄(破坏球));
			While(!正在使用技能 1(事件玩家));
				事件玩家.IsReady = 假;
				设置启用技能 1(事件玩家, 真);
				可用按钮(事件玩家, 按钮(技能1));
				等待(0.250, 无视条件);
				按下按键(事件玩家, 按钮(技能1));
				等待直到 (正在使用技能 1(事件玩家), 0.500);
				事件玩家.IsReady = 真;
			End;
			If(!(事件玩家.FreeMode || 事件玩家.GameComplete) || 事件玩家 == 全局.Pioneer);
				禁用按钮(事件玩家, 按钮(技能1));
				禁用按钮(事件玩家, 按钮(主要攻击模式));
			End;
		End;
	}
}

规则("[子程序] 设置技能")
{
	事件
	{
		子程序;
		SetAbility;
	}

	动作
	{
		事件玩家.Ability1Used = 假;
		事件玩家.Ability2Used = 假;
		事件玩家.SecondaryFireUsed = 假;
		If(事件玩家.GameComplete || 事件玩家.FreeMode || 事件玩家.IsSpectating);
			If(全局.Pioneer != 事件玩家);
				可用按钮(事件玩家, 按钮(技能1));
				可用按钮(事件玩家, 按钮(主要攻击模式));
			End;
			设置启用技能 1(事件玩家, 全局.DefaultAliblty1Enabled && 全局.Pioneer != 事件玩家);
			设置启用技能 2(事件玩家, 全局.DefaultAliblty2Enabled);
			设置辅助攻击模式启用(事件玩家, 全局.DefaultSecondaryEnabled);
			设置启用终极技能(事件玩家, 全局.DefaultUltimateEnabled);
		Else;
			设置启用技能 1(事件玩家, 全局.Ability1State[事件玩家.Level]);
			设置启用技能 2(事件玩家, 全局.Ability2State[事件玩家.Level]);
			设置辅助攻击模式启用(事件玩家, 全局.SecondaryFireState[事件玩家.Level]);
			设置启用终极技能(事件玩家, 全局.UltimateState[事件玩家.Level]);
			禁用按钮(事件玩家, 按钮(主要攻击模式));
		End;
	}
}

规则("[子程序 ] 重置当前关卡")
{
	事件
	{
		子程序;
		Reset;
	}

	动作
	{
		While(全局.JumpState[事件玩家.Level] == 自定义字符串("跳跃点"));
			事件玩家.Level += 1;
		End;
		If(全局.Pioneer != 事件玩家);
			事件玩家.ultimate_log = 空数组;
		End;
		事件玩家.ultimate_info = 空数组;
		If(事件玩家.movementCollision == 真);
			事件玩家.movementCollision = 假;
			开启与环境的移动碰撞(事件玩家);
			设置引力(事件玩家, 100);
			设置移动速度(事件玩家, 100);
			设置技能冷却(事件玩家, 按钮(蹲下), 0);
		End;
		If(所用英雄(事件玩家) != 英雄(破坏球));
			播放效果(所有玩家(所在队伍(事件玩家)), 布丽吉塔恢复包护甲声音, 无, 事件玩家, 100);
			等待(0.300, 无视条件);
			开始强制玩家选择英雄(事件玩家, 英雄(破坏球));
			事件玩家.SpectatingState = 假;
		End;
		调用子程序(ResetBall);
		设置状态(事件玩家, 无, 定身, 0.250);
		事件玩家.UltimateUsed = 假;
		事件玩家.IsReady = 假;
		事件玩家.sphere_state = 全局.SpherePosition[事件玩家.Level + 1] ? 假 : 真;
		事件玩家.HintFreq += 1;
		If(事件玩家.sphere_state == 假 && 事件玩家.HintFreq % 5 == 1);
			小字体信息(事件玩家, 全局.SmallHint[9]);
		End;
		If(全局.BotEnabled && 全局.actions != 无);
			If(事件玩家.HintFreq % 30 == 15 && 全局.actions[事件玩家.Level + 1] != 无 && 数量(已过滤的数组(全局.Bot, 当前数组元素.owner == 无)) > 0 && 事件玩家.Bot == 无);
				小字体信息(事件玩家, 全局.SmallHint[25]);
			Else If(事件玩家.HintFreq % 20 == 3 && 全局.actions[事件玩家.Level + 1] != 无 && 事件玩家.Bot != 无);
				小字体信息(事件玩家, 全局.SmallHint[32]);
			End;
		End;
		If(水平速度(事件玩家) >= 6.900);
			设置辅助攻击模式启用(事件玩家, 假);
			设置启用技能 1(事件玩家, 假);
			设置启用技能 2(事件玩家, 假);
			设置启用终极技能(事件玩家, 假);
		End;
		If(事件玩家 == 全局.Pioneer);
			全局.PioneerStarted = 假;
			全局.PioneerLandingPosition = 无;
			全局.PioneerSpherePosition = 无;
		End;
		If(!全局.PioneerModeEnabled && 事件玩家.Level == 0);
			停止追踪玩家变量(事件玩家, ScoreOfThisRound);
			事件玩家.ScoreOfThisRound = 0;
		End;
		施加推力(事件玩家, 方向(眼睛位置(事件玩家) + 眼睛位置(事件玩家) * 面朝方向(事件玩家), 所选位置(事件玩家)), 1, 至地图, 取消相反运动);
		等待(0.032, 无视条件);
		If((相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius) && 数量(
			全局.CheckpointPosition) != 0);
			传送(事件玩家, 全局.CheckpointPosition[事件玩家.Level]);
		End;
		事件玩家.IsReady = 真;
		If(事件玩家 == 全局.Pioneer);
			全局.PioneerStarted = 真;
		End;
		设置技能冷却(事件玩家, 按钮(辅助攻击模式), 0);
		设置技能冷却(事件玩家, 按钮(技能1), 0);
		设置技能冷却(事件玩家, 按钮(技能2), 0);
		施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
		If(全局.UltimateState[事件玩家.Level + 1] != (假 || 0));
			事件玩家.ultimate_info[0] = 全局.CheckpointPosition[事件玩家.Level];
			事件玩家.ultimate_info[1] = 全局.UltimateState[事件玩家.Level + 1];
			事件玩家.ultimate_info[2] = 事件玩家.ultimate_info[0] + 方向(事件玩家.ultimate_info[0], 事件玩家.ultimate_info[1]) * 1000;
			事件玩家.ultimate_info[3] = 与此方向的水平角度(方向(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]));
			事件玩家.ultimate_worked = 真;
		Else;
			事件玩家.ultimate_worked = 假;
			事件玩家.ultimate_info = 空数组;
		End;
		If(事件玩家.ultimate_log == 自定义字符串("已开启"));
			事件玩家.ultimate_worked = 真;
		End;
		If(事件玩家.Level < 事件玩家.cheat);
			事件玩家.cheat = 0;
		End;
	}
}

//创建文本
规则("[多行字符串] 快捷键说明")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.ShowHotKey), 无, 无, 自定义字符串("－－－－－－－－－－－－－－－－－－－－"), 左边, 10, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		For 全局变量(Idx, 0, 数量(全局.ShortKeyHint) - 1, 1);
        	创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.ShowHotKey), 无, 无, 单次赋值(全局.ShortKeyHint[全局.Idx]), 左边, 全局.Idx + 11, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		End;
		创建HUD文本(已过滤的数组(所有玩家(队伍1), 当前数组元素.FreeMode||(当前数组元素.GameComplete&&全局.Pioneer!=当前数组元素)), 无, 无,
			全局.ShortKeyHint[12], 右边, 2001, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
	}
}

规则("[多行字符串] 隐藏说明文本")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		创建HUD文本(所有玩家(队伍2), 全局.HiddenHint[4], 无, 无, 顶部, 17, 颜色(天蓝色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
		创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.ShowHotKey), 无, 无, 自定义字符串("－－－－－－－－－－－－－－－－－－－－"), 左边, 27, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		For 全局变量(Idx, 0, 3, 1);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.ShowHotKey), 无, 无, 单次赋值(全局.HiddenHint[全局.Idx]), 左边, 单次赋值(全局.Idx + 28), 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
		End;
		If(全局.code == 自定义字符串("11NXY"));
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.ShowHotKey), 无, 无, 单次赋值(全局.HiddenHint[3]), 左边, 单次赋值(31), 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
		End;
	}
}

//初始化
规则("创建开拓者效果")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.PioneerModeEnabled == 真;
	}

	动作
	{
        创建效果(已过滤的数组(全局.Pioneer, 全局.PioneerLandingPosition != 假), 环, 颜色(黄色), 全局.PioneerLandingPosition, 全局.RingRadius[0], 可见，位置和半径);
        创建效果(已过滤的数组(全局.Pioneer, 全局.PioneerLandingPosition != 假), 光柱, 颜色(黄色), 全局.PioneerLandingPosition, 全局.RingRadius[0], 可见，位置和半径);
        创建效果(已过滤的数组(全局.Pioneer, 全局.Pioneer.UltimateUsed != (假 || 0)), 环, 颜色(亮紫色), 全局.Pioneer.UltimateUsed, 全局.RingRadius[2], 可见，位置和半径);
        创建效果(已过滤的数组(全局.Pioneer, 全局.Pioneer.UltimateUsed != (假 || 0)), 光柱, 颜色(亮紫色), 全局.Pioneer.UltimateUsed, 全局.RingRadius[2], 可见，位置和半径);
        "小球"
        创建效果(已过滤的数组(全局.Pioneer, 全局.PioneerSpherePosition != 假), 球, 自定义颜色(全局.RGB[8], 全局.RGB[9], 全局.RGB[10], 全局.RGB[11]),
            全局.PioneerSpherePosition + 矢量(0, 0.800, 0), 全局.SphereRadius, 可见，位置和半径);
        "小球图标"
        创建图标(已过滤的数组(全局.Pioneer, 全局.PioneerSpherePosition != 假), 全局.PioneerSpherePosition + 矢量(0, 0.800, 0), 加号, 可见，位置和颜色, 颜色(橙色), 真);
    }
}

规则("玩家初始化")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		事件玩家.Level = 0;
		事件玩家.ScoreOfThisRound = 0;
		事件玩家.chooseHero = 0;
		事件玩家.mistake = 0;
		事件玩家.cheat = 0;
		事件玩家.HintFreq = 0;
		事件玩家.InteractPressState = 0;
		事件玩家.IsReady = 真;
		事件玩家.ShowHotKey = 假;
		事件玩家.playerTittle = 首个(已过滤的数组(全局.Vips, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家)));
		事件玩家.playerNickname = 事件玩家.playerTittle ? (事件玩家.playerTittle[1] ? 事件玩家.playerTittle[1] : 自定义字符串("{0}", 事件玩家)) : 自定义字符串("{0}",
			事件玩家);
		事件玩家.playerColor = 事件玩家.playerTittle ? (事件玩家.playerTittle[2] == 颜色(白色) ? 自定义颜色(随机整数(0, 255), 随机整数(0, 255), 随机整数(0, 255), 255)
			: 事件玩家.playerTittle[2]) : 颜色(白色);
		If(是否是机器人(事件玩家) == 假);
			传送(事件玩家, 全局.CheckpointPosition[事件玩家.Level]);
			事件玩家.FreeMode = 假;
			调用子程序(ValidationPlayerData);
        	调用子程序(CreatePlayerHUDText);
        	调用子程序(CreateTips);
			调用子程序(ResetBall);
        	调用子程序(CreatePlayerEffect);
		End;
		事件玩家.Invisible = 假;
		事件玩家.IsSpectating = 假;
		事件玩家.movementCollision = 假;
		事件玩家.SpectatingState = 假;
		对所有玩家启用死亡回放(事件玩家);
		启用死亡回放时目标的HUD(事件玩家);
	}
}

规则("全局初始化")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		关闭游戏预设通告模式;
		关闭游戏预设计分模式;
		关闭游戏预设完成条件;
		关闭游戏预设音乐模式;
		隐藏计分板(所有玩家(所有队伍));
		If(数量(全局.CheckpointPosition) == 0);
			全局.CheckpointPosition = 空数组;
			全局.Ability1State = 空数组;
			全局.Ability2State = 空数组;
			全局.SecondaryFireState = 空数组;
			全局.Creator = 空数组;
			全局.UltimateState = 空数组;
		End;
		全局.RoomAliveHoursLeft = 4;
		全局.PlayersData = 空数组;
		设置比赛时间(1800);
		全局.PioneerLandingPosition = 无;
		全局.PioneerSpherePosition = 无;
        全局.BestScore[0] = 自定义字符串("");
        全局.BestScore[1] = 0;
        调用子程序(CreateHUDText);
	}
}

//存档
规则("验证玩家数据 ValidationPlayerData")
{
	事件
	{
		子程序;
		ValidationPlayerData;
	}

	动作
	{
		"如果数组中有玩家数据, 则将值赋给事件玩家 checkpoint, time, mistake, cheat"
		If(对任意为”真“(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家)));
			事件玩家.Level = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][1];
			事件玩家.ScoreOfThisRound = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][2];
			事件玩家.mistake = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][3];
			事件玩家.cheat = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][4];
			事件玩家.dataIndex = 数组值的索引(全局.PlayersData, 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0]) / 5;
		"反之, 将 玩家昵称, checkpoint, time, mistake, cheat 组成数组 添加到末尾索引"
		Else;
			事件玩家.dataIndex = 数量(全局.PlayersData);
			全局.PlayersData[数量(全局.PlayersData)] = 数组(自定义字符串("{0}", 事件玩家), 事件玩家.Level, 事件玩家.ScoreOfThisRound, 事件玩家.mistake, 事件玩家.cheat);
		End;
	}
}

规则("编辑玩家数据 EditPlayerData")
{
	事件
	{
		子程序;
		EditPlayerData;
	}

	动作
	{
		全局.PlayersData[事件玩家.dataIndex] = 事件玩家.Level < 数量(全局.CheckpointPosition) - 1 ? 数组(自定义字符串("{0}", 事件玩家), 事件玩家.Level,
			事件玩家.ScoreOfThisRound, 事件玩家.mistake, 事件玩家.cheat) : 数组(自定义字符串("{0}", 事件玩家), 0, 0, 0, 0);
	}
}

//关卡设置
规则("删除关卡后修复玩家关卡数")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Level >= 数量(全局.CheckpointPosition);
	}

	动作
	{
		事件玩家.Level = 数量(全局.CheckpointPosition) - 1;
		事件玩家.Level = 较大(事件玩家.Level, 0);
	}
}

规则("是否完成所有关卡 假")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Level < 数量(全局.CheckpointPosition) - 1;
	}

	动作
	{
		事件玩家.GameComplete = 假;
	}
}

规则("是否完成所有关卡 真")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		(数量(全局.CheckpointPosition) == 0 || 事件玩家.Level >= 数量(全局.CheckpointPosition) - 1) == 真;
	}

	动作
	{
		事件玩家.GameComplete = 真;
		调用子程序(SetAbility);
		If(全局.PioneerModeEnabled == 假 && 事件玩家.ScoreOfThisRound != 0);
			事件玩家.LastScore = 事件玩家.ScoreOfThisRound;
			If(事件玩家.cheat == 0);
				小字体信息(所有玩家(所有队伍), 自定义字符串("{0}{1}{2}", 事件玩家, 全局.SmallHint[5], 事件玩家.LastScore));
				事件玩家.BestScore = 事件玩家.ScoreOfThisRound;
				If(全局.BestScore[1] == 0 || 事件玩家.BestScore < 全局.BestScore[1]);
					全局.BestScore[0] = 自定义字符串("{0}", 事件玩家.playerNickname);
					全局.BestScore[1] = 事件玩家.LastScore;
				End;
			Else;
				小字体信息(所有玩家(所有队伍), 自定义字符串("{0}{1}{2}", 事件玩家, 全局.SmallHint[5],  自定义字符串("{0}{1}{2}", 事件玩家.LastScore, 全局.SmallHint[6], 英雄图标字符串(英雄(破坏球)))));
			End;
		End;
		停止追踪玩家变量(事件玩家, ScoreOfThisRound);
	}
}

规则("当玩家成为开拓者")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
	}

	动作
	{
		If(数量(全局.CheckpointPosition) < 1000);
			播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 100);
			事件玩家.FreeMode = 假;
			调用子程序(Reset);
		Else;
			小字体信息(事件玩家, 全局.SmallHint[0]);
			全局.PioneerStarted = 假;
			全局.Pioneer = 无;
		End;
		If(全局.UltimateState[事件玩家.Level + 1] != 假);
			施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
			大字体信息(事件玩家, 全局.SmallHint[1]);
			调用子程序(Reset);
		End;
		事件玩家.ultimate_log = 自定义字符串("已关闭");
		根据条件中止(事件玩家 != 全局.Pioneer);
		If(事件玩家.ultimate_log == 自定义字符串("已开启"));
			事件玩家.ultimate_worked = 真;
			小字体信息(事件玩家, 全局.SmallHint[2]);
		Else;
			事件玩家.ultimate_worked = 假;
			小字体信息(事件玩家, 全局.SmallHint[3]);
		End;
		事件玩家.UltimateUsed = 假;
	}
}

//技能设置
规则("记录玩家辅助攻击使用情况")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.SecondaryFireUsed == 假;
		正在使用辅助武器(事件玩家) == 真;
	}

	动作
	{
		事件玩家.SecondaryFireUsed = 真;
	}
}

规则("终极技能模拟CD(开始CD)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.DefaultUltimateEnabled == 真;
		正在使用终极技能(事件玩家) == 假;
		终极技能充能百分比(事件玩家) <= 1;
	}

	动作
	{
		事件玩家.UltimateCharge = 0;
	}
}

规则("一次性辅助攻击模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.OneTimeAbility == 真;
		事件玩家.FreeMode == 假;
		(!事件玩家.GameComplete || 事件玩家 == 全局.Pioneer) == 真;
		事件玩家.SecondaryFireUsed == 真;
		正在使用辅助武器(事件玩家) == 假;
	}

	动作
	{
		等待(0.500, 当为“假”时中止);
		If(相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius || !在地面上(事件玩家));
			If(事件玩家 != 全局.Pioneer || 全局.PioneerLandingPosition == 无);
				设置辅助攻击模式启用(事件玩家, 假);
			End;
		End;
	}
}

规则("一次性技能2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.OneTimeAbility == 真;
		事件玩家.FreeMode == 假;
		(!事件玩家.GameComplete || 事件玩家 == 全局.Pioneer) == 真;
		事件玩家.Ability2Used == 真;
		正在使用技能 2(事件玩家) == 假;
	}

	动作
	{
		等待(0.500, 当为“假”时中止);
		If(相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius || !在地面上(事件玩家));
			If(事件玩家 != 全局.Pioneer || 全局.PioneerLandingPosition == 无);
				设置启用技能 2(事件玩家, 假);
			End;
		End;
	}
}

规则("在地面上时 重置一次性技能")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.IsReady == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius;
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假 || 水平速度(事件玩家) < 6.900);
			调用子程序(SetAbility);
		End;
	}
}

规则("在地面上时 重置技能CD")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.IsReady == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius;
		技能冷却时间(事件玩家, 按钮(辅助攻击模式)) + 技能冷却时间(事件玩家, 按钮(技能1)) + 技能冷却时间(事件玩家, 按钮(技能2)) != 0;
	}

	动作
	{
		等待(0.032, 当为“假”时中止);
		设置技能冷却(事件玩家, 按钮(辅助攻击模式), 0);
		设置技能冷却(事件玩家, 按钮(技能1), 0);
		设置技能冷却(事件玩家, 按钮(技能2), 0);
	}
}

//玩家判定
规则("小球拾取")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.sphere_state == 假;
		事件玩家.IsReady == 真;
		事件玩家.FreeMode == 假;
		全局.Pioneer != 事件玩家;
		事件玩家.GameComplete == 假;
		相距距离(事件玩家, 全局.SpherePosition[事件玩家.Level + 1]) <= 全局.SphereJudgeRadius;
	}

	动作
	{
		事件玩家.sphere_state = !事件玩家.GameComplete && !事件玩家.FreeMode ? 真 : 假;
		小字体信息(事件玩家, 全局.SmallHint[7]);
		播放效果(事件玩家, 正面状态施加声音, 无, 事件玩家, 80);
	}
}

规则("闯关者到达下一关")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.IsReady == 真;
		事件玩家.FreeMode == 假;
		全局.Pioneer != 事件玩家;
		事件玩家.GameComplete == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level + 1]) <= 全局.RingRadius;
		(!全局.JudgeWhenLanding || 在地面上(事件玩家)) == 真;
		事件玩家.ultimate_worked == 假;
		事件玩家.edit_mode == 0;
	}

	动作
	{
		If(!事件玩家.sphere_state);
			调用子程序(Reset);
			小字体信息(事件玩家, 全局.SmallHint[8]);
			播放效果(事件玩家, 爆炸声音, 无, 事件玩家, 100);
			中止;
		End;
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 100);
		事件玩家.Level += 1;
		事件玩家.HintFreq = 0;
		调用子程序(EditPlayerData);
		If(事件玩家.Level < 数量(全局.CheckpointPosition));
			调用子程序(Reset);
		End;
		If(事件玩家.Bot != 无);
			调用子程序(ReleaseBot);
		End;
	}
}

规则("闯关者圈外触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer != 事件玩家;
		事件玩家.FreeMode == 假;
		事件玩家.GameComplete == 假;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level + 1]) > 全局.RingRadius[0];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假);
			等待(0.016, 当为“假”时中止);
			事件玩家.mistake += 1;
			调用子程序(Reset);
		End;
	}
}

规则("开拓者圈外触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		事件玩家.FreeMode == 假;
		全局.PioneerLandingPosition == 无;
		全局.PioneerStarted == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假);
			If(相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) < 全局.RingRadius[1] * 2);
				大字体信息(事件玩家, 全局.SmallHint[24]);
				调用子程序(Reset);
				If(事件玩家.UltimateUsed != 假);
					If(相距距离(事件玩家.UltimateUsed, 所选位置(事件玩家)) >= 2 * 全局.RingRadius[2]);
						大字体信息(事件玩家, 全局.SmallHint[24]);
						调用子程序(Reset);
					End;
				End;
			Else;
				播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 100);
				全局.PioneerLandingPosition = 所选位置(事件玩家);
				设置启用技能 2(事件玩家, 事件玩家.Ability2Used);
				设置辅助攻击模式启用(事件玩家, 事件玩家.SecondaryFireUsed);
				设置启用终极技能(事件玩家, 事件玩家.UltimateUsed);
			End;
		End;
	}
}

规则("闯关者圈内触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer != 事件玩家;
		事件玩家.FreeMode == 假;
		事件玩家.GameComplete == 假;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius[1];
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level + 1]) > 全局.RingRadius[0];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假 || 水平速度(事件玩家) < 6.900);
			事件玩家.sphere_state = 全局.SpherePosition[事件玩家.Level + 1] ? 假 : 真;
		End;
	}
}

规则("开拓者圈内触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		事件玩家.FreeMode == 假;
		全局.PioneerLandingPosition == 无;
		全局.PioneerStarted == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius[1];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假);
			全局.PioneerSpherePosition = 无;
		End;
	}
}

规则("开拓者离开比赛")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	条件
	{
		全局.PioneerModeEnabled == 真;
		事件玩家 == 全局.Pioneer;
	}

	动作
	{
		全局.PioneerStarted = 假;
		全局.PioneerLandingPosition = 无;
		全局.Pioneer = 数组随机取值(已过滤的数组(所有玩家(所有队伍), 当前数组元素.GameComplete && 当前数组元素 != 事件玩家 && 当前数组元素 != 最后(全局.Creator)));
	}
}

规则("当玩家离开比赛")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	动作
	{
		If(事件玩家.Bot != 无);
			调用子程序(ReleaseBot);
		End;
		For 玩家变量(事件玩家, i, 0, 数量(事件玩家.MapEntity), 1);
			消除地图文本(事件玩家.MapEntity[事件玩家.i]);
		End;
		For 玩家变量(事件玩家, i, 1, 数量(事件玩家.HUDEntity), 1);
			消除HUD文本(事件玩家.HUDEntity[事件玩家.i]);
		End;
		For 玩家变量(事件玩家, i, 0, 数量(事件玩家.EffectEntity), 1);
			消除效果(事件玩家.EffectEntity[事件玩家.i]);
		End;
		For 玩家变量(事件玩家, i, 0, 数量(事件玩家.IconEntity), 1);
			消除图标(事件玩家.IconEntity[事件玩家.i]);
		End;
	}
}

规则("相移")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		具有状态(事件玩家, 相移) == 假;
	}

	动作
	{
		等待(0.250, 无视条件);
		清除状态(事件玩家, 相移);
		设置状态(事件玩家, 无, 相移, 9999);
	}
}

规则("阵亡复位")
{
	事件
	{
		玩家阵亡;
		双方;
		全部;
	}

	条件
	{
		被攻击方.IsSpectating == 假;
        是否是机器人(事件玩家) == 假;
	}

	动作
	{
		被攻击方.IsReady = 假;
		If(全局.Pioneer == 事件玩家 && 全局.PioneerLandingPosition == 无);
			全局.PioneerStarted = 假;
		End;
		If(!全局.PioneerModeEnabled && 事件玩家.Level == 0);
			停止追踪玩家变量(被攻击方, ScoreOfThisRound);
			被攻击方.ScoreOfThisRound = 0;
		End;
		被攻击方.FacingDirection = 面朝方向(被攻击方);
		清除状态(被攻击方, 相移);
		设置状态(被攻击方, 无, 相移, 16200);
		等待(0.032, 无视条件);
		If(全局.Pioneer == 事件玩家);
			If(全局.PioneerLandingPosition != 无);
				传送(被攻击方, 全局.PioneerLandingPosition);
			Else;
				传送(被攻击方, 全局.CheckpointPosition[被攻击方.Level]);
			End;
			等待(0.016, 无视条件);
			复活(被攻击方);
		Else;
			If(事件玩家.FreeMode || 事件玩家.GameComplete);
				传送(被攻击方, 最近的可行走位置(所选位置(被攻击方)));
				复活(被攻击方);
			Else If(数量(全局.CheckpointPosition) != 0);
				传送(被攻击方, 全局.CheckpointPosition[被攻击方.Level]);
				等待(0.016, 无视条件);
				复活(被攻击方);
			End;
		End;
		等待(0.500, 无视条件);
		设置朝向(被攻击方, 被攻击方.FacingDirection, 至地图);
		被攻击方.IsReady = 真;
		If(全局.Pioneer == 事件玩家 && 全局.PioneerLandingPosition == 无);
			全局.PioneerStarted = 真;
		End;
		调用子程序(ResetBall);
	}
}

禁用 规则("球形态关闭主要攻击模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用技能 1(事件玩家) == 真;
	}

	动作
	{
		设置主要攻击模式启用(事件玩家, 假);
	}
}

禁用 规则("开启主要攻击模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用技能 1(事件玩家) == 假;
		(事件玩家.FreeMode || 事件玩家.GameComplete) == 真;
	}

	动作
	{
		设置主要攻击模式启用(事件玩家, 真);
	}
}

//房间设置
规则("房间存活倒计时")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		比赛时间 == 0;
		全局.RoomAliveHoursLeft != 0;
	}

	动作
	{
		等待(1, 无视条件);
		全局.RoomAliveHoursLeft -= 1;
		设置比赛时间(3600);
	}
}

规则("跑酷模式计时开始")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.PioneerModeEnabled == 假;
		事件玩家.FreeMode == 假;
		事件玩家.IsReady == 真;
		事件玩家.GameComplete == 假;
		相距距离(所选位置(事件玩家), 首个(全局.CheckpointPosition)) > 全局.RingRadius;
		已重生(事件玩家) == 真;
	}

	动作
	{
		If(事件玩家.Level == 0);
			停止追踪玩家变量(事件玩家, ScoreOfThisRound);
			事件玩家.ScoreOfThisRound = 0;
		End;
		追踪玩家变量频率(事件玩家, ScoreOfThisRound, 16200, 1, 全部禁用);
	}
}

规则("通关或自由模式下无CD")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 != 全局.Pioneer;
		(事件玩家.GameComplete || 事件玩家.FreeMode) == 真;
		((技能冷却时间(事件玩家, 按钮(辅助攻击模式)) + 技能冷却时间(事件玩家, 按钮(技能1)) + 技能冷却时间(事件玩家, 按钮(技能2)) != 0) || 终极技能充能百分比(事件玩家) < 100) == 真;
	}

	动作
	{
		设置技能冷却(事件玩家, 按钮(辅助攻击模式), 0);
		设置技能冷却(事件玩家, 按钮(技能1), 0);
		设置技能冷却(事件玩家, 按钮(技能2), 0);
		设置终极技能充能(事件玩家, 100);
	}
}

//热键
规则("设置互动键按下状态")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		按钮被按下(全局.Pioneer, 按钮(互动)) == 真;
		全局.PioneerLandingPosition != 无;
	}

	动作
	{
		全局.Pioneer.InteractPressState = 1;
		等待(1, 当为“假”时中止);
		全局.Pioneer.InteractPressState = 2;
	}
}

规则("松开1帧后清除按下状态")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		按钮被按下(全局.Pioneer, 按钮(互动)) == 假;
	}

	动作
	{
		等待(0.016, 无视条件);
		全局.Pioneer.InteractPressState = 0;
	}
}


规则("[热键] 按R, 取消环境碰撞")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		(事件玩家.FreeMode || (事件玩家.GameComplete && 全局.Pioneer != 事件玩家)) == 真;
		事件玩家.IsSpectating == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
		按钮被按下(事件玩家, 按钮(近身攻击)) == 假;
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
	}

	动作
	{
		禁用 等待(1, 当为“假”时中止);
		事件玩家.movementCollision = !事件玩家.movementCollision;
		If(事件玩家.movementCollision);
			取消与环境的移动碰撞(事件玩家, 假);
			设置引力(事件玩家, 50);
			设置移动速度(事件玩家, 150);
			小字体信息(事件玩家, 自定义字符串("已取消环境碰撞"));
		Else;
			开启与环境的移动碰撞(事件玩家);
			设置引力(事件玩家, 100);
			设置移动速度(事件玩家, 100);
			小字体信息(事件玩家, 自定义字符串("已开启环境碰撞"));
		End;
	}
}

规则("左右键选择英雄")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		(事件玩家.FreeMode || (事件玩家.GameComplete && 全局.Pioneer != 事件玩家)) == 真;
		(按钮被按下(事件玩家, 按钮(主要攻击模式)) || 按钮被按下(事件玩家, 按钮(辅助攻击模式))) == 真;
	}

	动作
	{
		If(按钮被按下(事件玩家, 按钮(主要攻击模式)));
			事件玩家.chooseHero += 事件玩家.chooseHero == 数量(全部英雄) - 1 ? 1 - 数量(全部英雄) : 1;
		Else If(按钮被按下(事件玩家, 按钮(辅助攻击模式)));
			事件玩家.chooseHero -= 事件玩家.chooseHero == 0 ? 1 - 数量(全部英雄) : 1;
		End;
		预加载英雄(事件玩家, 全部英雄[事件玩家.chooseHero]);
	}
}

规则("语音上, 更换英雄")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		(事件玩家.FreeMode || (事件玩家.GameComplete && 全局.Pioneer != 事件玩家)) == 真;
		正在交流(事件玩家, 语音（上）) == 真;
	}

	动作
	{
		播放效果(所有玩家(所在队伍(事件玩家)), 布丽吉塔恢复包护甲声音, 无, 事件玩家, 100);
		等待(0.300, 无视条件);
		开始强制玩家选择英雄(事件玩家, 全部英雄[事件玩家.chooseHero]);
		事件玩家.SpectatingState = 假;
	}
}

规则("[热键] 开拓者放置小球")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		全局.PioneerLandingPosition == 无;
		全局.PioneerSpherePosition == 无;
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		事件玩家.pioneer_mode != 自定义字符串("传送点");
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
	}

	动作
	{
		全局.PioneerSpherePosition = 所选位置(事件玩家);
	}
}

规则("[热键] 开拓者确认开拓")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		全局.PioneerLandingPosition != 无;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		事件玩家.InteractPressState == 2;
	}

	动作
	{
		If(事件玩家.UltimateUsed != (0 || 假) || 事件玩家.ultimate_log == 自定义字符串("已关闭"));
			全局.JumpState[事件玩家.Level] = 事件玩家.pioneer_mode == 自定义字符串("传送点");
			事件玩家.InteractPressState = 0;
			全局.CheckpointPosition[事件玩家.Level + 1] = 全局.PioneerLandingPosition;
			全局.SecondaryFireState[事件玩家.Level] = 事件玩家.SecondaryFireUsed;
			全局.UltimateState[事件玩家.Level + 1] = 事件玩家.UltimateUsed;
			全局.SpherePosition[事件玩家.Level + 1] = 全局.PioneerSpherePosition;
			全局.Creator[事件玩家.Level] = 自定义字符串("{0}", 事件玩家);
			全局.PioneerStarted = 假;
			全局.PioneerLandingPosition = 无;
			全局.PioneerSpherePosition = 无;
			全局.Pioneer = 无;
			小字体信息(所有玩家(所有队伍), 全局.SmallHint[10]);
			事件玩家.Level += 1;
			调用子程序(SetAbility);
		Else;
			事件玩家.InteractPressState = 0;
			全局.PioneerLandingPosition = 无;
			全局.PioneerSpherePosition = 无;
			调用子程序(Reset);
			If(事件玩家.ultimate_log == 自定义字符串("已开启"));
				事件玩家.ultimate_worked = 真;
			Else;
				事件玩家.ultimate_worked = 假;
			End;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 全局.SmallHint[11]);
		End;
	}
}

规则("[热键] 开拓者取消开拓")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		全局.PioneerLandingPosition != 无;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		事件玩家.InteractPressState == 1;
	}

	动作
	{
		设置辅助攻击模式启用(事件玩家, 真);
		可用按钮(事件玩家, 按钮(辅助攻击模式));
		事件玩家.InteractPressState = 0;
		全局.PioneerLandingPosition = 无;
		全局.PioneerSpherePosition = 无;
		调用子程序(Reset);
		If(事件玩家.pioneer_mode == 自定义字符串("超级跳"));
			事件玩家.ultimate_worked = 真;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 全局.SmallHint[2]);
		Else If(事件玩家.pioneer_mode == 自定义字符串("正常模式"));
			事件玩家.ultimate_worked = 假;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 全局.SmallHint[3]);
		Else If(事件玩家.pioneer_mode == 自定义字符串("传送点"));
			事件玩家.ultimate_worked = 假;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 全局.SmallHint[4]);
		End;
	}
}

规则("[热键] 删除最后一关")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.PioneerModeEnabled == 真;
		按钮被按下(主机玩家, 按钮(装填)) == 真;
		按钮被按下(主机玩家, 按钮(技能2)) == 真;
	}

	动作
	{
		If(数量(全局.CheckpointPosition) != 0);
			等待(0.500, 当为“假”时中止);
			小字体信息(主机玩家, 全局.SmallHint[12]);
			等待(1.500, 当为“假”时中止);
			修改全局变量(CheckpointPosition, 根据索引从数组中移除, 数量(全局.CheckpointPosition) - 1);
			修改全局变量(Ability1State, 根据索引从数组中移除, 数量(全局.Ability1State) - 1);
			修改全局变量(Ability2State, 根据索引从数组中移除, 数量(全局.Ability2State) - 1);
			修改全局变量(SecondaryFireState, 根据索引从数组中移除, 数量(全局.SecondaryFireState) - 1);
			修改全局变量(UltimateState, 根据索引从数组中移除, 数量(全局.UltimateState) - 1);
			修改全局变量(SpherePosition, 根据索引从数组中移除, 数量(全局.SpherePosition) - 1);
			全局.Pioneer = 最后(全局.Creator);
			修改全局变量(Creator, 根据索引从数组中移除, 数量(全局.Creator) - 1);
			全局.PioneerStarted = 假;
			全局.PioneerLandingPosition = 无;
			If(数量(全局.CheckpointPosition) == 0);
				小字体信息(所有玩家(所有队伍), 全局.SmallHint[13]);
			Else;
				小字体信息(所有玩家(所有队伍), 全局.SmallHint[14]);
			End;
		Else;
			小字体信息(所有玩家(所有队伍), 全局.SmallHint[14]);
		End;
	}
}

规则("[热键] 重新开始游戏")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		存活(事件玩家) == 真;
	}

	动作
	{
		If(事件玩家.Bot != 无);
			调用子程序(ReleaseBot);
		End;
		事件玩家.FreeMode = 假;
		If(事件玩家 == 全局.Pioneer);
			全局.Pioneer = 无;
			全局.PioneerLandingPosition = 无;
			全局.PioneerStarted = 假;
		End;
		事件玩家.Level = 0;
		事件玩家.HintFreq = 0;
		调用子程序(Reset);
	}
}

规则("[热键] 到上一关")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
	}

	动作
	{
		If(事件玩家.Bot != 无);
			调用子程序(ReleaseBot);
		End;
		事件玩家.HintFreq = 0;
		If(事件玩家.Level > 0);
			事件玩家.Level -= 1;
		End;
		While(全局.JumpState[事件玩家.Level] == 自定义字符串("跳跃点"));
			事件玩家.Level -= 1;
		End;
		If(事件玩家 == 全局.Pioneer);
			全局.Pioneer = 无;
			全局.PioneerLandingPosition = 无;
			全局.PioneerStarted = 假;
		End;
		调用子程序(Reset);
	}
}

规则("[热键] 到下一关")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		地图工坊设置开关(自定义字符串("快捷键"), 自定义字符串("跳关"), 真, 0) == 真;
	}

	动作
	{
		If(事件玩家.Bot != 无);
			调用子程序(ReleaseBot);
		End;
		事件玩家.HintFreq = 0;
		事件玩家.Level += 1;
		If(事件玩家.cheat == 0);
			事件玩家.cheat = 事件玩家.Level;
		End;
		等待(1, 当为“假”时中止);
		While(按钮被按下(事件玩家, 按钮(蹲下)) == 真 && 按钮被按下(事件玩家, 按钮(终极技能)) == 真 && 按钮被按下(事件玩家, 按钮(装填)) == 真);
			事件玩家.Level += 1;
			等待(0.100, 无视条件);
		End;
	}
}

规则("[热键] 成为开拓者")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.PioneerModeEnabled == 真;
		事件玩家.GameComplete == 真;
		实体存在(全局.Pioneer) == 假;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		在地面上(事件玩家) == 真;
	}

	动作
	{
		If(全局.DisableContinuousCreation && 事件玩家 == 最后(全局.Creator));
			小字体信息(事件玩家, 全局.SmallHint[15]);
		Else If(数量(全局.CheckpointPosition) == 0);
			If(在地面上(事件玩家) == 假);
				小字体信息(事件玩家, 全局.SmallHint[16]);
			Else;
				修改全局变量(CheckpointPosition, 添加至数组, 所选位置(事件玩家));
				修改全局变量(UltimateState, 添加至数组, 假);
				全局.Pioneer = 事件玩家;
			End;
		Else;
			全局.Pioneer = 事件玩家;
		End;
		事件玩家.ultimate_worked = 假;
		事件玩家.ultimate_log = 自定义字符串("已关闭");
		事件玩家.UltimateUsed = 假;
		事件玩家.pioneer_mode = 自定义字符串("正常模式");
		调用子程序(ResetBall);
	}
}

规则("[热键] 死亡观战")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
	}

	动作
	{
		事件玩家.IsSpectating = !事件玩家.IsSpectating;
		If(事件玩家.IsSpectating);
			关闭游戏预设复生模式(事件玩家);
			击杀(事件玩家, 无);
			可用按钮(事件玩家, 按钮(主要攻击模式));
			等待(0.20, 无视条件);
			If(事件玩家.SpectatingState == 假);
				按下按键(事件玩家, 按钮(跳跃));
				等待(0.20, 无视条件);
				事件玩家.SpectatingState = 真;
			End;
			If(事件玩家.Bot != 无);
				For 玩家变量(事件玩家, i, 1, 栏位(事件玩家.Bot), 1);
					按下按键(事件玩家, 按钮(主要攻击模式));
					等待(0.10, 无视条件);
				End;
			End;
		Else;
			开启游戏预设复生模式(事件玩家);
			复活(事件玩家);
			调用子程序(ResetBall);
		End;
	}
}

规则("[热键] 死亡观战切换视角")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		事件玩家.IsSpectating == 真;
	}

	动作
	{
		事件玩家.SpectatingState = !事件玩家.SpectatingState;
	}
}

规则("[热键]开拓者切换模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		地图工坊设置开关(自定义字符串("快捷键"), 自定义字符串("超级跳模式开拓"), 真, 1) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) < 全局.RingRadius[1];
	}

	动作
	{
		If(事件玩家.pioneer_mode == 自定义字符串("正常模式"));
			事件玩家.pioneer_mode = 自定义字符串("超级跳");
			事件玩家.ultimate_log = 自定义字符串("已开启");
			事件玩家.ultimate_worked = 真;
			小字体信息(事件玩家, 全局.SmallHint[2]);
		Else If(事件玩家.pioneer_mode == 自定义字符串("超级跳"));
			事件玩家.pioneer_mode = 自定义字符串("传送点");
			事件玩家.ultimate_log = 自定义字符串("已关闭");
			事件玩家.ultimate_worked = 假;
			小字体信息(事件玩家, 全局.SmallHint[4]);
			事件玩家.ultimate_info = 空数组;
		Else If(事件玩家.pioneer_mode == 自定义字符串("传送点"));
			事件玩家.pioneer_mode = 自定义字符串("正常模式");
			小字体信息(事件玩家, 全局.SmallHint[3]);
		End;
	}
}

规则("[热键] 位移")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		((全局.Pioneer == 事件玩家 && 事件玩家.pioneer_mode == 自定义字符串("传送点"))) == 真;
		// (事件玩家.FreeMode || (事件玩家.GameComplete && 全局.Pioneer != 事件玩家) || (全局.Pioneer == 事件玩家 && 事件玩家.pioneer_mode == 自定义字符串("传送点"))) == 真;
		事件玩家.IsSpectating == 假;
		正在使用技能 1(事件玩家) == 真;
	}

	动作
	{
		传送(事件玩家, 所选位置(事件玩家) + 面朝方向(事件玩家) * 5);
		设置引力(事件玩家, 0);
		While(按钮被按下(事件玩家, 按钮(主要攻击模式)));
			传送(事件玩家, 所选位置(事件玩家) + 面朝方向(事件玩家) * 0.500);
			施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
			等待(0.010, 当为“真”时重新开始);
		End;
		设置引力(事件玩家, 100);
	}
}

规则("[热键] 杀死玩家")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
	}

	动作
	{
		等待(0.500, 当为“假”时中止);
		击杀(事件玩家, 无);
	}
}


规则("[热键] 开关隐身")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用表情交流(事件玩家) == 真;
	}

	动作
	{
		事件玩家.Invisible = !事件玩家.Invisible;
		If(事件玩家.Invisible);
			设置不可见(事件玩家, 全部);
			大字体信息(事件玩家, 全局.SmallHint[17]);
		Else;
			大字体信息(事件玩家, 全局.SmallHint[18]);
			设置不可见(事件玩家, 全部禁用);
		End;
	}
}

规则("[热键] 开关自由模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(近身攻击)) == 真;
		在地面上(事件玩家) == 真;
	}

	动作
	{
		等待(0.500, 当为“真”时重新开始);
		事件玩家.FreeMode = !事件玩家.FreeMode;
		If(事件玩家.FreeMode);
			修改全局变量(Pioneer, 根据值从数组中移除, 事件玩家);
			小字体信息(事件玩家, 全局.SmallHint[19]);
			调用子程序(SetAbility);
			If(事件玩家.ScoreOfThisRound != 0);
				停止追踪玩家变量(事件玩家, ScoreOfThisRound);
			End;
			If(事件玩家.Bot != 无);
				调用子程序(ReleaseBot);
			End;
		Else;
			小字体信息(事件玩家, 全局.SmallHint[20]);
			调用子程序(Reset);
			If(事件玩家.ScoreOfThisRound != 0 && !事件玩家.GameComplete);
				追踪玩家变量频率(事件玩家, ScoreOfThisRound, 16200, 1, 全部禁用);
			End;
		End;
	}
}

规则("[热键] 显示或隐藏快捷键")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
		按钮被按下(事件玩家, 按钮(近身攻击)) == 假;
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 假;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
	}

	动作
	{
		等待直到 (!按钮被按下(事件玩家, 按钮(互动)), 9999);
		等待直到 (按钮被按下(事件玩家, 按钮(互动)), 0.300);
		If(按钮被按下(事件玩家, 按钮(互动)));
			事件玩家.ShowHotKey = !事件玩家.ShowHotKey;
		End;
	}
}

//超级跳
规则("开拓者超级跳")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_worked == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		垂直速度(事件玩家) != 0;
		事件玩家 == 全局.Pioneer;
		水平速度(事件玩家) > 12;
	}

	动作
	{
		If(相距距离(全局.CheckpointPosition[事件玩家.Level], 所选位置(事件玩家)) > 6);
			事件玩家.ultimate_info = 空数组;
			设置辅助攻击模式启用(事件玩家, 假);
			事件玩家.pioneer_outline_countdown = 50;
			事件玩家.UltimateUsed = 所选位置(事件玩家);
			事件玩家.ultimate_worked = 假;
			While(Y方向分量(所选位置(事件玩家)) - Y方向分量(事件玩家.UltimateUsed) <= 3 && 事件玩家.pioneer_outline_countdown >= 1);
				等待(0.020, 无视条件);
				事件玩家.pioneer_outline_countdown -= 1;
			End;
			If(事件玩家.pioneer_outline_countdown < 1);
				施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
				设置状态(事件玩家, 无, 冰冻, 0.500);
				传送(事件玩家, 全局.CheckpointPosition[事件玩家.Level]);
				等待(0.250, 无视条件);
				事件玩家.ultimate_worked = 真;
				事件玩家.UltimateUsed = 假;
				事件玩家.InteractPressState = 0;
				全局.PioneerLandingPosition = 无;
				调用子程序(SetAbility);
				全局.PioneerSpherePosition = 无;
			End;
		Else;
			大字体信息(事件玩家, 全局.SmallHint[24]);
		End;
	}
}

规则("防止乱跑")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.ultimate_worked == 真;
		垂直速度(事件玩家) > 0;
		相距距离(所选位置(事件玩家), 全局.UltimateState[事件玩家.Level + 1]) > 全局.RingRadius;
		事件玩家.GameComplete == 假;
		事件玩家.FreeMode == 假;
	}

	动作
	{
		等待(0.200, 当为“假”时中止);
		设置状态(事件玩家, 无, 定身, 0.500);
		调用子程序(Reset);
		If(事件玩家.HintFreq % 5 == 2);
			小字体信息(事件玩家, 全局.SmallHint[23]);
		End;
	}
}

规则("超级跳")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_worked == 真;
		正在使用辅助武器(事件玩家) == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		垂直速度(事件玩家) > 5;
		事件玩家 != 全局.Pioneer;
		相距距离(所选位置(事件玩家), 全局.UltimateState[事件玩家.Level + 1]) <= 全局.RingRadius[2];
	}

	动作
	{
		事件玩家.ultimate_worked = 假;
	}
}

规则("两点一线检测")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) < 事件玩家.ultimate_info[3] + 0.350;
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) > 事件玩家.ultimate_info[3] - 0.350;
		"这是长度"
		相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) <= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]) + 2;
		"这是长度"
		相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) >= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[1]) - 2;
		全局.UltimateState[事件玩家.Level + 1] != (假 || 0);
		事件玩家.FreeMode == 假;
	}

	动作
	{
		事件玩家.ultimate_outline_countdown = 2;
		等待(0.050, 当为“假”时中止);
		如条件为”真“则循环;
	}
}

规则("超出两点一线范围")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_outline_countdown > 0;
		事件玩家.FreeMode == 假;
		事件玩家 != 全局.Pioneer;
	}

	动作
	{
		事件玩家.ultimate_outline_countdown -= 1;
		等待(0.100, 无视条件);
		如条件为”真“则循环;
		If((全局.UltimateState[事件玩家.Level + 1] && 事件玩家.ultimate_worked) != 假);
			设置状态(事件玩家, 无, 定身, 0.500);
			大字体信息(事件玩家, 全局.SmallHint[23]);
			调用子程序(Reset);
		End;
	}
}

规则("超级跳模式圈外低速复位")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		水平速度(事件玩家) <= 12;
		正在使用辅助武器(事件玩家) == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.FreeMode == 假;
		(全局.Pioneer != 事件玩家 ? 事件玩家.GameComplete == 假 : 真) == 真;
		在地面上(事件玩家) == 真;
		(事件玩家.ultimate_worked == 假 ? 全局.UltimateState[事件玩家.Level + 1] != (假 || 0) : 真) == 真;
	}

	动作
	{
		等待(0.016, 当为“假”时中止);
		调用子程序(Reset);
	}
}

规则("超级跳模式出圈禁用抓钩")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.ultimate_worked == 真;
		正在使用辅助武器(事件玩家) == 假;
		事件玩家.FreeMode == 假;
		(全局.Pioneer != 事件玩家 ? 事件玩家.GameComplete == 假 : 真) == 真;
	}

	动作
	{
		设置辅助攻击模式启用(事件玩家, 假);
	}
}

规则("防止起步在空中")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_log == 自定义字符串("已开启");
		正在空中(事件玩家) == 真;
		事件玩家 == 全局.Pioneer;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.FreeMode == 假;
		事件玩家.UltimateUsed == 假;
	}

	动作
	{
		等待(0.200, 无视条件);
		根据条件中止(事件玩家.ultimate_worked == 假);
		小字体信息(事件玩家, 全局.SmallHint[22]);
		调用子程序(Reset);
	}
}

规则("开拓者两点一线写入")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer == 事件玩家;
		事件玩家.ultimate_worked == 真;
		事件玩家.ultimate_info == 空数组;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 5;
	}

	动作
	{
		事件玩家.ultimate_info[0] = 全局.CheckpointPosition[事件玩家.Level];
		事件玩家.ultimate_info[1] = 所选位置(事件玩家);
		事件玩家.ultimate_info[2] = 事件玩家.ultimate_info[0] + 方向(事件玩家.ultimate_info[0], 事件玩家.ultimate_info[1]) * 1000;
		事件玩家.ultimate_info[3] = 与此方向的水平角度(方向(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]));
	}
}

规则("开拓者两点一线清除")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer == 事件玩家;
		事件玩家.FreeMode == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 5;
	}

	动作
	{
		事件玩家.ultimate_info = 空数组;
	}
}

规则("开拓者两点一线检测")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) < 事件玩家.ultimate_info[3] + 0.300;
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) > 事件玩家.ultimate_info[3] - 0.300;
		"这是长度"
		禁用 相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) <= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]) + 2;
		"这是长度"
		禁用 相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) >= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[1]) - 2;
		事件玩家.FreeMode == 假;
		事件玩家.ultimate_log == 自定义字符串("已开启");
		事件玩家 == 全局.Pioneer;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 5;
	}

	动作
	{
		等待(0.500, 无视条件);
		如条件为”真“则循环;
		根据条件中止(事件玩家.ultimate_info == 空数组);
		根据条件中止(事件玩家.ultimate_worked == 假);
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 30);
		大字体信息(事件玩家, 全局.SmallHint[21]);
		事件玩家.ultimate_info = 空数组;
		调用子程序(Reset);
	}
}

规则("开关跳转指定关卡")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		事件玩家.edit_mode == 0;
		事件玩家.IsSpectating == 假;
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 假;
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
		按钮被按下(事件玩家, 按钮(技能1)) == 假;
		按钮被按下(事件玩家, 按钮(技能2)) == 假;
		按钮被按下(事件玩家, 按钮(终极技能)) == 假;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
		按钮被按下(事件玩家, 按钮(近身攻击)) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 假;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
	}

	动作
	{
		等待(0.650, 当为“假”时中止);
		事件玩家.JumpingCheckpoint = !事件玩家.JumpingCheckpoint;
		If(事件玩家.JumpingCheckpoint);
			创建HUD文本(事件玩家, 自定义字符串("左右移动鼠标来调整要前往的关卡\r\n　　　　　　【{0}】\r\n　　　左键确认，右键退出", 取整(数量(全局.CheckpointPosition) / 360 * (水平朝向角度(事件玩家)
				+ 180), 下)), 无, 无, 顶部, 5, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
			事件玩家.JumpingCheckpointHUD = 上一个文本ID;
			设置状态(事件玩家, 无, 定身, 9999);
		Else;
			消除HUD文本(事件玩家.JumpingCheckpointHUD);
			事件玩家.JumpingCheckpoint = 假;
			取消主要动作(事件玩家);
			清除状态(事件玩家, 定身);
		End;
	}
}

规则("跳转指定关卡")
{
	事件
	{
		持续 - 每名玩家;
		队伍1;
		全部;
	}

	条件
	{
		事件玩家.edit_mode == 0;
		事件玩家.IsSpectating == 假;
		事件玩家.JumpingCheckpoint != 假;
		(按钮被按下(事件玩家, 按钮(主要攻击模式)) || 按钮被按下(事件玩家, 按钮(辅助攻击模式))) == 真;
	}

	动作
	{
		If(按钮被按下(事件玩家, 按钮(主要攻击模式)));
			事件玩家.HintFreq = 0;
			If(事件玩家.cheat == 0 && 事件玩家.Level < 取整(数量(全局.CheckpointPosition) / 360 * (水平朝向角度(事件玩家) + 180), 下));
				事件玩家.cheat = 事件玩家.Level == 0 ? 1 : 事件玩家.Level;
			End;
			事件玩家.Level = 取整(数量(全局.CheckpointPosition) / 360 * (水平朝向角度(事件玩家) + 180), 下);
		Else If(按钮被按下(事件玩家, 按钮(辅助攻击模式)));
			消除HUD文本(事件玩家.JumpingCheckpointHUD);
			事件玩家.JumpingCheckpoint = 假;
			清除状态(事件玩家, 定身);
		End;
	}
}

//键盘
规则("Initial Global")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.xPos = 地图工坊设置实数(自定义字符串("键盘设置"), 自定义字符串("X-position"), -1.4, -3, 3, 0);
		全局.yPos = 地图工坊设置实数(自定义字符串("键盘设置"), 自定义字符串("Y-position"), -0.3, -2, 2, 0);
		全局.scale = 地图工坊设置实数(自定义字符串("键盘设置"), 自定义字符串("Scale"), 0.720, 0.300, 1, 1);
	}
}

规则("[热键] 开关键盘")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
	}

	动作
	{
		事件玩家.keyboard_enabled = !事件玩家.keyboard_enabled;
	}
}

规则("[热键] 按下跳跃")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
	}

	动作
	{
		事件玩家.keyboard_status_space = 真;
	}
}

规则("[热键] 松开跳跃")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(跳跃)) == 假;
	}

	动作
	{
		事件玩家.keyboard_status_space = 假;
	}
}

规则("[热键] 按下蹲")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
	}

	动作
	{
		事件玩家.keyboard_status_ctrl = 真;
	}
}

规则("[热键] 松开蹲")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
	}

	动作
	{
		事件玩家.keyboard_status_ctrl = 假;
	}
}

规则("[热键] 按下右键")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 真;
	}

	动作
	{
		事件玩家.keyboard_status_right = 真;
	}
}

规则("[热键] 松开右键")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(辅助攻击模式)) == 假;
	}

	动作
	{
		事件玩家.keyboard_status_right = 假;
	}
}

规则("[热键] 按下左键")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
	}

	动作
	{
		事件玩家.keyboard_status_left = 真;
	}
}

规则("[热键] 松开左键")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 假;
	}

	动作
	{
		事件玩家.keyboard_status_left = 假;
	}
}

规则("显示键盘")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.keyboard_enabled == 真;
	}

	动作
	{
		全局.textSize = 3.600;
		全局.textX = -0.353;
		全局.textY = 0.712;
		全局.text = 自定义字符串("Q");
		全局.button = 按钮(终极技能);
		全局.text = 自定义字符串("W");
		全局.textX += 0.269;
		创建地图文本(事件玩家, 单次赋值(自定义字符串("▒")), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(黑色), 始终不可见);
		事件玩家.MapEntity[18] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 3.700 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, Z方向分量(阈值(事件玩家)) > 0.100 ? 颜色(白色) : 自定义颜色(33, 33, 33, 255),
			始终不可见);
		事件玩家.MapEntity[19] = 上一个文本ID;
		全局.text = 自定义字符串("E");
		全局.textX += 0.269;
		全局.button = 按钮(技能2);
		全局.text = 自定义字符串("R");
		全局.textX += 0.269;
		全局.button = 按钮(装填);
		全局.textX += 0.538;
		创建地图文本(事件玩家, 事件玩家.keyboard_status_left ? 输入绑定字符串(按钮(主要攻击模式)) : 自定义字符串(""), 逐帧更新(眼睛位置(事件玩家)
			+ 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale)) * 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale)
			- 0.200 - 0.040 * 全局.scale) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家)) - 90) + 3 * 面朝方向(事件玩家))),
			3.200 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(白色), 始终不可见);
		事件玩家.MapEntity[20] = 上一个文本ID;
		全局.textX += 0.269;
		创建地图文本(事件玩家, 事件玩家.keyboard_status_right ? 输入绑定字符串(按钮(辅助攻击模式)) : 自定义字符串(""), 逐帧更新(眼睛位置(事件玩家)
			+ 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale)) * 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale)
			- 0.200 - 0.040 * 全局.scale) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家)) - 90) + 3 * 面朝方向(事件玩家))),
			3.200 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(白色), 始终不可见);
		事件玩家.MapEntity[21] = 上一个文本ID;
		"Row 2"
		全局.textY -= 0.253;
		全局.text = 自定义字符串("A");
		全局.textX = -0.229;
		创建地图文本(事件玩家, 单次赋值(自定义字符串("▒")), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(黑色), 始终不可见);
		事件玩家.MapEntity[22] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 3.700 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, X方向分量(阈值(事件玩家)) > 0.100 ? 颜色(白色) : 自定义颜色(33, 33, 33, 255),
			始终不可见);
		事件玩家.MapEntity[23] = 上一个文本ID;
		全局.text = 自定义字符串("S");
		全局.textX += 0.269;
		创建地图文本(事件玩家, 单次赋值(自定义字符串("▒")), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(黑色), 始终不可见);
		事件玩家.MapEntity[24] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 3.700 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, Z方向分量(阈值(事件玩家)) < -0.100 ? 颜色(白色) : 自定义颜色(33, 33, 33, 255),
			始终不可见);
		事件玩家.MapEntity[25] = 上一个文本ID;
		全局.text = 自定义字符串("D");
		全局.textX += 0.269;
		创建地图文本(事件玩家, 单次赋值(自定义字符串("▒")), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 颜色(黑色), 始终不可见);
		事件玩家.MapEntity[26] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 3.700 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, X方向分量(阈值(事件玩家)) < -0.100 ? 颜色(白色) : 自定义颜色(33, 33, 33, 255),
			始终不可见);
		事件玩家.MapEntity[27] = 上一个文本ID;
		全局.text = 自定义字符串("F");
		全局.textX += 0.269;
		全局.button = 按钮(互动);
		"Row 3"
		全局.textSize = 3;
		全局.textY -= 0.253;
		全局.text = 自定义字符串("Shift");
		全局.textX = -0.478;
		全局.button = 按钮(技能1);
		全局.text = 自定义字符串("V");
		全局.textX = 0.975;
		全局.button = 按钮(近身攻击);
		全局.textSize = 3.600;
		"Row 4"
		全局.textY -= 0.253;
		全局.text = 自定义字符串("Ctrl");
		全局.textX = -0.584;
		全局.button = 按钮(蹲下);
		全局.textSize = 2;
		创建地图文本(事件玩家, 单次赋值(全局.text == 自定义字符串("Shift") ? 自定义字符串("▒▒") : (全局.text == 自定义字符串("Space")
			? 自定义字符串("▒▒▒▒▒▒") : 自定义字符串("▒"))), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale)) * 地图矢量(右, 事件玩家, 旋转) + (
			全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家)) - 90) + 3 * 面朝方向(事件玩家))),
			4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 自定义颜色(0, 0, 0, 180), 始终不可见);
		事件玩家.MapEntity[28] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 单次赋值(全局.textSize * 全局.scale), 不要截取, 可见，位置，字符串和颜色, 事件玩家.keyboard_status_ctrl ? 颜色(白色) : 自定义颜色(33, 33,
			33, 255), 始终不可见);
		事件玩家.MapEntity[29] = 上一个文本ID;
		全局.text = 自定义字符串("Space");
		全局.textX = 0.446;
		全局.button = 按钮(跳跃);
		全局.textSize = 3;
		创建地图文本(事件玩家, 单次赋值(全局.text == 自定义字符串("Shift") ? 自定义字符串("▒▒") : (全局.text == 自定义字符串("Space")
			? 自定义字符串("▒▒▒▒▒▒") : 自定义字符串("▒"))), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale)) * 地图矢量(右, 事件玩家, 旋转) + (
			全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家)) - 90) + 3 * 面朝方向(事件玩家))),
			4 * 全局.scale, 不要截取, 可见，位置，字符串和颜色, 自定义颜色(0, 0, 0, 180), 始终不可见);
		事件玩家.MapEntity[30] = 上一个文本ID;
		创建地图文本(事件玩家, 单次赋值(全局.text), 逐帧更新(眼睛位置(事件玩家) + 300 * ((全局.xPos + 单次赋值(全局.textX * 全局.scale))
			* 地图矢量(右, 事件玩家, 旋转) + (全局.yPos + 单次赋值(全局.textY * 全局.scale) - 0.200) * 与此角度的相对方向(与此方向的水平角度(面朝方向(事件玩家)), 与此方向的垂直角度(面朝方向(事件玩家))
			- 90) + 3 * 面朝方向(事件玩家))), 单次赋值(全局.textSize * 全局.scale), 不要截取, 可见，位置，字符串和颜色, 事件玩家.keyboard_status_space ? 颜色(白色) : 自定义颜色(33, 33,
			33, 255), 始终不可见);
		事件玩家.MapEntity[31] = 上一个文本ID;
	}
}

规则("隐藏键盘")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.keyboard_enabled == 假;
	}

	动作
	{
		For 玩家变量(事件玩家, i, 18, 数量(事件玩家.MapEntity), 1);
			消除地图文本(事件玩家.MapEntity[事件玩家.i]);
		End;
	}
}

规则("炸房效果")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		总计消耗时间 > 16140;
	}

	动作
	{
		小字体信息(所有玩家(所有队伍), 自定义字符串("炸房倒计时: 60秒"));
		等待(50, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 10 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 9 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 8 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 7 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 6 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 5 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 4 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 3 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 2 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("— 1 —"));
		等待(1, 无视条件);
		大字体信息(所有玩家(所有队伍), 自定义字符串("Boom!"));
		等待(5, 无视条件);
		交流(所有玩家(所有队伍), 倒计时);
		等待(3, 无视条件);
		隐藏英雄HUD(所有玩家(所有队伍));
		隐藏游戏模式HUD(所有玩家(所有队伍));
		隐藏计分板(所有玩家(所有队伍));
		隐藏游戏模式地图UI(所有玩家(所有队伍));
		隐藏姓名板(所有玩家(所有队伍), 所有玩家(所有队伍));
		消除所有效果;
		消除所有图标;
		消除所有HUD文本;
		消除所有地图文本;
		移除所有机器人;
		等待(0.160, 无视条件);
		传送(所有玩家(所有队伍), 矢量(0, 500, 0));
		设置不可见(所有玩家(所有队伍), 全部);
		设置引力(所有玩家(所有队伍), 0);
		复活(所有玩家(所有队伍));
		开始镜头(所有玩家(所有队伍), (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2 + 与此角度的相对方向(比赛时间 * 7.500, -30) * 200, (
			最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2, 5);
		调用子程序(PlayDestroyMapEffect);
		等待(1, 无视条件);
		重新开始比赛;
	}
}


规则("播放破坏地图效果  PlayDestroyMapEffect -- by Mazattack#1183")
{
	事件
	{
		子程序;
		PlayDestroyMapEffect;
	}

	动作
	{
		If(当前地图 == 地图(监测站：直布罗陀));
			设置比赛时间(48 + 随机整数(与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 - 12, 与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 + -6));
		Else If(当前地图 == 地图(66号公路));
			设置比赛时间(48 + 随机整数(与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 - -6, 与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 + 12));
		Else;
			设置比赛时间(48 + 随机整数(与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 - 6, 与此方向的水平角度(方向(目标位置(1), 目标位置(0))) / 7.500 + 9));
		End;
		全局.Chase = (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2 + 与此角度的相对方向(随机整数(0, 359), 随机实数(-45, -60)) * 500;
		等待(0.016, 无视条件);
		持续追踪全局变量(Chase, (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2, 5, 终点及持续时间);
		While(相距距离(全局.Chase, (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2) > 1);
			播放效果(所有玩家(所有队伍), 有益爆炸, 颜色(天蓝色), 全局.Chase, 3);
			等待(0.016, 无视条件);
		End;
		For 全局变量(Idx, 0, 400, 1);
			播放效果(所有玩家(所有队伍), 有害爆炸, 颜色(橙色), (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2 + 与此角度的相对方向(随机实数(0, 360), 0)
				* 随机整数(0, (全局.Idx + 1) / 1), 随机整数(全局.Idx / 5, 全局.Idx));
			播放效果(所有玩家(所有队伍), 有害爆炸, 颜色(橙色), (最近的可行走位置(矢量(999, 999, 999)) + 最近的可行走位置(矢量(-999, -999, -999))) / 2 + 与此角度的相对方向(随机实数(0, 360), 0)
				* 随机整数(0, (全局.Idx + 1) / 1), 全局.Idx);
			等待(0.016, 无视条件);
		End;
	}
}