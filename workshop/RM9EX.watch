设置
{
	主程序
	{
		描述: ""
		模式名称: "Wrecking Ball Parkour"
	}

	大厅
	{
		比赛语音聊天: 启用
		玩家上限 队伍1: 12
		玩家上限 队伍2: 0
		观战者人数上限: 6
		返回大厅: 从不
		队列中的玩家可以加入: 是
	}

	模式
	{
		团队死斗
		{
			启用地图
			{
				马莱温多
                吉拉德堡
			}
		}

		突击模式
		{
			启用地图
			{
				66号公路
				圣诞节国王大道
				沃斯卡娅工业区
				监测站：直布罗陀
				花村
				伊利奥斯
				好莱坞
                艾兴瓦尔德
                万圣节艾兴瓦尔德
                阿努比斯神殿
                多拉多
			}
		}

		训练靶场
		{
			启用地图
			{
			}
		}

		禁用 运载目标
		{
			运载目标速度: 10%
		}

		综合
		{
			允许切换英雄: 关闭
			复生时间: 5%
			急救包刷新: 禁用
			消灭提示: 关闭
			消灭镜头: 关闭
			游戏模式开始: 即时
			英雄限制: 关闭
			随机英雄复生: 开启
		}
	}

	英雄
	{
		综合
		{
			无需装弹: 开启
			终极技能充能速度: 10%
			终极技能自动充能速度: 0%
			重生时终极技能充能完毕: 开启

			末日铁拳
			{
				上勾重拳 冷却时间: 12%
				火箭重拳 冷却时间: 6%
				终极技能（毁天灭地）: 关闭
				裂地重拳 冷却时间: 6%
			}

			源氏
			{
				重生时终极技能充能完毕: 开启
			}

			破坏球
			{
				终极技能（地雷禁区）: 关闭
				重力坠击 冷却时间: 0%
			}

			启用英雄
			{
				破坏球
			}
		}
	}

	地图工坊
	{
		小球不透明度: 109
		小球判定大小: 2.200
		小球显示大小: 2.500
		小球红: 255
		小球绿: 105
		小球蓝: 180
		是否允许开拓: 关闭
		目标点圈不透明度: 161
		目标点圈大小: 1.800
		起飞点圈不透明度: 94
		跳关提醒: 关闭
	}
}

变量
{
	全局:
		0: CheckpointPosition
		1: Ability1State
		2: Ability2State
		3: SecondaryFireState
		4: UltimateState
		5: Creator
		6: RingRadius
		7: JudgeWhenLanding
		8: DefaultAliblty1Enabled
		9: DefaultAliblty2Enabled
		10: DefaultSecondaryEnabled
		11: DefaultUltimateEnabled
		12: UltimateCD
		13: OneTimeAbility
		14: DisableContinuousCreation
		15: PioneerModeEnabled
		16: Pioneer
		17: PioneerStarted
		18: PioneerLandingPosition
		19: PioneerSpherePosition
		20: BestScore
		22: CurrentMap
		23: TeleportWhenEnterNextPosition
		24: cheat_log
		26: RGB
		27: JumpState
		28: CheatRecord
        29: PlayersData
		30: RoomAliveHoursLeft
		31: SpherePosition
		32: SphereRadius
		33: SphereJudgeRadius
		34: Tips


	玩家:
		0: Level
		1: BestScore
		2: LastScore
		3: ScoreOfThisRound
		4: GameComplete
		5: IsReady
		6: Invisible
		7: FreeMode
		8: InteractPressState
		9: FacingDirection
		10: UltimateCharge
		11: Ability1Used
		12: Ability2Used
		13: SecondaryFireUsed
		14: UltimateUsed
		15: IsSpectating
		16: ultimate_worked
		17: ultimate_log
		18: ultimate_info
		19: ultimate_outline_countdown
		20: pioneer_outline_countdown
		21: cheat
        22: mistake
        23: dataIndex
		24: cheat_log
		25: sphere_state
		26: pioneer_mode
		27: HintFreq
        
}

子程序
{
	0: SetAbility
	1: Reset
	3: MessageCall
	4: ResetBall
	5: EditPlayerData
	6: ValidationPlayerData
}

规则("禁用查看器")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		禁用查看器录制;
	}
}

规则("房主发感谢即可更新导出数据,随后在查看器导出全局数据")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		正在交流(主机玩家, 感谢) == 真;
	}

	动作
	{
		全局.CurrentMap = 当前地图;
		启用查看器录制;
		禁用查看器录制;
		小字体信息(主机玩家, 自定义字符串("点位数据已导出,请打开查看器复制"));
		小字体信息(主机玩家, 自定义字符串("别忘了选择当前地图和当前比赛模式哦！"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 吉拉德堡")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(万圣节吉拉德堡);
		当前游戏模式 == 游戏模式(团队死斗);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(185.720, 6, 74.634), 矢量(183.916, 7, 64.290), 矢量(182.209, 9, 97.063), 矢量(179.878, 6, 88.154), 矢量(
			202.473, 9, 79.737), 矢量(197.296, 16.500, 47.652), 矢量(190.741, 3.100, 52.287), 矢量(234.553, 5.200, 110.539), 矢量(223.524, 5,
			113.216), 矢量(188.137, 9, 113.601), 矢量(171.134, 6.997, 66.810), 矢量(170.061, 7, 57.186), 矢量(177.559, 0, 52.001), 矢量(215.944, 12,
			54.888), 矢量(213.665, 8, 49.204), 矢量(214.283, 16.500, 48.119), 矢量(229.476, 13, 59.892), 矢量(191.452, 3, 50.460), 矢量(222.891, 5,
			112.321), 矢量(187.271, 9, 114.553), 矢量(191.529, 3, 50.006), 矢量(186.113, 1, 66.360), 矢量(239.425, 2, 84.694), 矢量(232.525, 4.085,
			113.531), 矢量(213.512, 1.010, 82.146), 矢量(216.122, 8, 78.793), 矢量(197.027, 16.500, 70.500), 矢量(191.742, 1, 81.250), 矢量(199.313,
			9, 80.052));
		全局.SecondaryFireState = 数组(假, 真, 假, 真, 真, 假, 真, 假, 假, 真, 假, 假, 真, 假, 假, 假, 真, 真, 假, 真, 假, 真, 真, 真, 假, 真, 假, 假);
		全局.UltimateState = 数组(假, 假, 矢量(183.516, 6.092, 77.495), 假, 矢量(187.429, 6.092, 79.984), 矢量(206.061, 8.092, 60.271), 假, 假, 假, 假, 假,
			假, 假, 矢量(191.379, 4.605, 51.758), 假, 假, 假, 假, 假, 假, 假, 假, 矢量(193.122, 6.373, 51.812), 假, 矢量(222.681, 5.812, 112.001), 假, 假, 假,
			假);
		全局.Creator = 数组(自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(
			""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""),
			自定义字符串(""), 自定义字符串(""), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"));
		全局.JumpState = 数组(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 假, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) ")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
        全局.CheckpointPosition = 数组(矢量(-7.970, 5, -36.646), 矢量(-17.827, -1.249, -34.834), 矢量(-23.522, -1, -46.785), 矢量(-16.423, 3.010,
			-44.076), 矢量(-10.224, 7, -27.020), 矢量(-5.472, 5, -35.787), 矢量(12.879, 7.071, -49.094), 矢量(-0.059, 4, -58.664), 矢量(15.211, 4,
			-73.960), 矢量(6.704, 7.010, -83.536), 矢量(-8.287, 2.540, -76.757), 矢量(13.113, 7.071, -48.991), 矢量(0.974, 5, -40.761), 矢量(13.647,
			6.748, -21.739), 矢量(12.188, 11.229, 18.132), 矢量(-8.885, 3.939, 21.055), 矢量(-14.029, -0.985, -23.838), 矢量(-13.728, 1, -34.073),
			矢量(-38.340, 1, -61.726), 矢量(-8.717, 5, -36.720), 矢量(-15.095, -1.175, -18.227), 矢量(-5.603, 1, -14.827), 矢量(-6.218, 7.983,
			-10.297), 矢量(29.771, 10.463, -4.001), 矢量(4.936, 7.724, -0.271), 矢量(1.896, 1, 0.963), 矢量(24.571, 6, 10.505), 矢量(17.430, 9.582,
			17.291), 矢量(5.330, 7.965, 11.858), 矢量(5.295, 3.989, 26.929), 矢量(10.419, -0.645, 27.035), 矢量(7.024, 4, 27.758), 矢量(2.948, 2.374,
			37.042), 矢量(-2.681, 3.982, 28.844), 矢量(-12.652, -0.984, -10.839), 矢量(-8.332, 1, -10.371), 矢量(-23.014, -1.243, -14.536), 矢量(
			-22.956, -1, -47.039), 矢量(-29.779, 1, -53.810), 矢量(-19.537, 3, -49.068), 矢量(-13.374, 1, -34.237), 矢量(-11.655, 0.642, -18.095),
			矢量(-13.320, 1, -34.261), 矢量(-36.209, 1, -64.290), 矢量(-18.766, -0.925, -75.163), 矢量(-3.726, 4, -64.767), 矢量(0.946, 7.010,
			-91.455), 矢量(-25.943, 1, -85.285), 矢量(9.497, 7.010, -82.154), 矢量(-8.531, 9, -64.271), 矢量(5.126, -1.607, -52.860), 矢量(0.351,
			4.088, -58.982), 矢量(13.241, 7.071, -49.116), 矢量(29.992, 2, -31.590), 矢量(12.438, 6.757, -20.841), 矢量(-3.948, 7, -20.986), 矢量(
			-13.961, 1, 26.522), 矢量(-16.520, 3.943, 22.322), 矢量(-14.176, 1, 4.222), 矢量(-15.317, 3.892, 12.866), 矢量(-3.169, 7.982, 12.512),
			矢量(6.516, 9.334, 20.821), 矢量(11.427, 4.202, 11.429), 矢量(25.791, 6.010, 10.251), 矢量(48.748, 6, 6.422), 矢量(60.938, 6, -12.800),
			矢量(28.952, 10.464, -4.147), 矢量(27.492, 2, -28.421), 矢量(-15.738, -0.406, -32.690), 矢量(-17.715, 1, -60.746), 矢量(-20.186, 4,
			-57.163), 矢量(-9.210, 5, -36.549), 矢量(5.020, 7.884, -7.887), 矢量(13.404, 6.744, -21.422), 矢量(40.462, 6, -2.899), 矢量(13.628,
			11.233, 19.394), 矢量(9.034, 6.919, -20.135), 矢量(-13.474, 1, -26.738), 矢量(-4.469, 7.090, -19.937), 矢量(25.397, 6, 10.209), 矢量(
			6.158, 4, 27.519), 矢量(12.716, 11.217, 20.770), 矢量(23.933, 6, 10.061), 矢量(13.552, 0.983, -4.316), 矢量(13.762, 6.750, -20.753),
			矢量(-0.391, 4, -59.629), 矢量(-8.845, 9, -65.598), 矢量(-2.122, 2.416, -82.034), 矢量(7.332, -1.895, -79.102), 矢量(7.717, 4, -76.548),
			矢量(-3.670, -1.903, -68.131), 矢量(-1.876, 4, -66.865), 矢量(-9.314, 9, -64.665), 矢量(-21.257, 4, -57.560), 矢量(-31.961, 1, -69.186),
			矢量(-22.199, 2.996, -66.619), 矢量(-20.988, 4, -57.246), 矢量(-9.924, 7, -27.601), 矢量(13.045, 6.737, -20.514), 矢量(47.025, 6, 8.256),
			矢量(26.100, 6, 10.437), 矢量(28.869, 10.445, -3.015), 矢量(14.358, 4, -73.837), 矢量(29.467, 1.838, -42.993), 矢量(24.394, 0.839,
			-30.361), 矢量(12.704, 6.747, -20.655), 矢量(44.129, 6, -6.246), 矢量(49.006, 6, 5.169), 矢量(33.297, 0.046, -4.333), 矢量(27.619, 2,
			-28.483), 矢量(35.114, 2, -25.698), 矢量(35.610, 3, -21.791), 矢量(26.390, 0, 7.177), 矢量(26.657, 6, 9.987), 矢量(36.443, 0.133,
			-1.137), 矢量(5.383, 7.769, -4.487));
		全局.SecondaryFireState = 数组(假, 假, 假, 真, 假, 真, 假, 真, 假, 假, 真, 假, 真, 真, 假, 真, 假, 真, 真, 真, 假, 真, 真, 真, 假, 真, 假, 假, 假, 假, 假, 假, 假, 真, 假,
			假, 真, 假, 假, 假, 真, 真, 真, 真, 真, 真, 真, 真, 真, 假, 真, 真, 真, 真, 真, 真, 假, 真, 假, 真, 假, 假, 真, 真, 真, 真, 真, 真, 真, 假, 真, 真, 真, 真, 真, 真, 真,
			真, 真, 真, 真, 假, 假, 真, 真, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 真, 真, 真, 真, 假, 真, 假, 假, 真, 真, 假, 假, 真, 假, 假, 假, 假, 假, 真);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 矢量(15.024,
			-0.911, -4.082));
		全局.JumpState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 真, 假, 假, 假);
		全局.SpherePosition = 数组(0, 矢量(-11.048, 5.598, -32.761), 0, 矢量(-19.507, -0.247, -42.163), 0, 0, 矢量(-3.085, 1.617, -33.065), 0, 矢量(
			18.559, 5.917, -69.785), 0, 矢量(-2.064, 2.678, -82.603), 0, 0, 0, 0, 矢量(0.416, 7.013, 19.112), 0, 矢量(-13.780, 2.695, -29.762),
			0, 0, 0, 0, 0, 0, 0, 0, 矢量(-5.793, 7.070, -2.611), 0, 0, 0, 0, 0, 0, 0, 0, 0, 矢量(-17.098, 1.657, -11.920), 矢量(-29.580, -1.630,
			-7.877), 0, 矢量(-22.127, 5.275, -50.465), 0, 0, 0, 矢量(-39.208, 3.390, -60.093), 矢量(-29.840, 1.075, -67.855), 0, 0, 0, 0, 0, 矢量(
			-0.903, 4.113, -60.533), 0, 0, 矢量(26.134, -0.268, -45.243), 0, 0, 矢量(-14.359, 13.862, 13.720), 0, 0, 0, 0, 0, 0, 矢量(-2.184,
			3.334, -1.169), 矢量(42.960, 13.118, 5.203), 矢量(61.950, 9.838, -14.693), 矢量(43.149, 14.333, -8.723), 矢量(19.237, 14.474, -24.546),
			矢量(-7.453, 10.411, -34.170), 矢量(-13.542, 3.231, -52.611), 0, 0, 矢量(1.527, 13.585, -10.271), 矢量(13.876, 5.424, -30.545), 0, 0,
			矢量(18.810, 14.292, -11.433), 矢量(-13.348, 12.362, -23.474), 0, 0, 0, 矢量(23.367, 8.930, 26.959), 0, 矢量(18.741, 4.176, 6.909), 0,
			矢量(4.704, 9.416, -37.319), 矢量(-2.915, 7.011, -61.600), 矢量(0.990, -0.199, -79.566), 0, 0, 矢量(0.737, 0.056, -73.709), 0, 矢量(
			-1.398, 6.799, -68.631), 0, 矢量(-27.110, 1.012, -62.866), 0, 矢量(-21.002, 1.070, -61.693), 矢量(-13.731, 9.033, -43.396), 0, 矢量(
			27.505, 10.161, 1.814), 矢量(60.896, 6.212, 9.726), 0, 0, 矢量(21.044, 6.061, -68.303), 0, 0, 0, 0, 0, 矢量(18.937, 14.313, -25.205),
			矢量(33.993, 9.128, -25.726), 0, 0, 0, 0, 0);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 马莱温多")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(马莱温多);
		当前游戏模式 == 游戏模式(团队死斗);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(16.671, 0.981, -26.167), 矢量(16.556, 3, -19.696), 矢量(8.527, -1, -22.178), 矢量(7.228, 4.652, -19.076),
			矢量(-0.814, -3.500, -34.108), 矢量(-14.248, -2.990, -30.901), 矢量(-33.766, -2, 6.872), 矢量(-33.911, 4, 5.544), 矢量(-33.521, -2,
			10.577), 矢量(-34.833, 0.010, 19.375), 矢量(-19.744, 0, 11.620), 矢量(-12.911, 4.103, 13.443), 矢量(-0.027, 10.096, 0.739), 矢量(-5.195,
			5.037, 13.689), 矢量(-0.262, 10.103, 25.955), 矢量(0.169, 1.750, 34.510), 矢量(2.900, 2.282, 10.224), 矢量(31.990, 5.117, 31.136), 矢量(
			21.840, 8.314, 34.156), 矢量(31.538, 3.155, 26.356), 矢量(24.234, 8.713, 21.428), 矢量(32.704, 7.492, 23.932), 矢量(21.763, 9.046,
			35.607), 矢量(25.336, 8.822, 21.704), 矢量(17.680, 6.523, 6.135), 矢量(1.446, -1, -8.110), 矢量(-1.970, -1, -17.884), 矢量(-8.827, 5.114,
			-21.205), 矢量(-28.450, -2.041, -16.828), 矢量(-27.884, 3.010, -0.475), 矢量(-25.980, -2.070, -21.695), 矢量(-20.008, 2.004, -17.528),
			矢量(-7.754, 5.120, -19.574), 矢量(9.506, 3.095, -8.672), 矢量(-1.744, 5.125, -18.637), 矢量(-0.571, 2.673, 42.960), 矢量(-30.556, 4.750,
			20.132), 矢量(-33.340, 4, 9.512), 矢量(7.661, -2.046, -32.677), 矢量(8.150, -1, -27.877), 矢量(0.360, -3.478, -37.379), 矢量(-16.445, -3,
			-28.918), 矢量(22.512, 2.573, -17.646), 矢量(-19.053, -3, -31.734), 矢量(25.211, 8.828, 21.859), 矢量(16.766, 9, 31.436), 矢量(0.708,
			10.288, 0.880), 矢量(0.864, 1.751, 33.339), 矢量(-15.550, -2.692, -26.547), 矢量(-34.439, -6.063, 41.478));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真,
			真, 假, 真, 假, 假, 真, 假, 真, 真, 假, 假, 真, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 矢量(-14.678, 0.187, -26.220), 假, 假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"),
			自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"),
			自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"),
			自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"),
			自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("冰泽"), 自定义字符串("冰泽"), 自定义字符串("冰泽"), 自定义字符串("Exit"), 自定义字符串(
			"Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"));
		全局.CurrentMap = 地图(马莱温多);
		全局.JumpState = 数组(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 66号公路")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(66号公路);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-101.870, 16.188, -7.856), 矢量(-95.753, 12.632, -3.193), 矢量(-78.701, 10.867, -14.920), 矢量(-77.152,
			12.500, -0.719), 矢量(-58.663, 11.751, 21.533), 矢量(-78.994, 13.361, 12.514), 矢量(-78.445, 12.500, -1.532), 矢量(-106.843, 12.498,
			-21.750), 矢量(-83.475, 12.901, -28.662), 矢量(-95.753, 12.632, -3.193), 矢量(-77.585, 13.361, 13.251), 矢量(-54.676, 12.639, 15.244),
			矢量(-63.213, 10.867, 7.334), 矢量(-94.616, 14.301, 5.276), 矢量(-81.386, 12.843, -28.555), 矢量(-77.695, 13.361, 12.985), 矢量(-63.199,
			10.867, 7.490), 矢量(-45.271, 3.402, 8.547), 矢量(-42.127, 3.393, 4.095), 矢量(-37.314, 8.601, -10.975), 矢量(-33.873, 12.762,
			-12.425), 矢量(-27.075, 8.748, 1.281), 矢量(-20.946, 12.408, -15.101), 矢量(14.005, 8.532, -22.285), 矢量(24.602, 8.039, -12.530), 矢量(
			15.189, 7.771, 8.061), 矢量(46.720, 7.787, -0.588), 矢量(33.017, 5.651, 47.713), 矢量(20.768, 6.802, 17.449), 矢量(52.679, 10.913,
			45.607), 矢量(54.190, 0.223, 54.062), 矢量(43.960, 2.384, 56), 矢量(37.277, 0.226, 44.041), 矢量(52.854, 7.034, 20.646), 矢量(67.353,
			-0.043, 28.541), 矢量(64.567, 3.462, 26.769), 矢量(70.815, -0.024, 13.553), 矢量(65.629, 4.823, 14.794), 矢量(63.306, 9.264, 12.772),
			矢量(50.472, 2.368, 8.411), 矢量(50.950, 7.582, 11.044), 矢量(54.290, 12.828, 10.727), 矢量(62.885, 2.459, 15.798), 矢量(63.731, 9.275,
			12.097), 矢量(52.320, 7.770, -0.468), 矢量(46.641, 2.174, 0.812), 矢量(38.891, 6.978, 2.357), 矢量(32.989, 7.930, 1.952), 矢量(20.218,
			2.086, 12.656), 矢量(12.991, 7.678, 2.574), 矢量(20.438, 2.093, -10.370), 矢量(19.064, 8.006, -20.089), 矢量(15.809, 2.418, -15.876),
			矢量(30.792, 7.005, 8.196), 矢量(41.531, 2.094, 7.646), 矢量(14.029, 7.621, 2.572), 矢量(12.220, 2.252, -0.177), 矢量(36.898, 6.742,
			-10.907), 矢量(23.698, 2.094, -9.393), 矢量(48.486, 7.395, -0.793), 矢量(58.390, 2.156, 15.066), 矢量(50.586, 11.259, 44.158), 矢量(
			54.716, 0.545, 49.524), 矢量(50.188, 7.010, 48.617), 矢量(56.172, 9.022, 41.987), 矢量(72.126, 0.240, 42.513), 矢量(61.809, 9.224,
			12.917), 矢量(33.478, 2.095, 15.844), 矢量(24.551, 7.509, -12.364), 矢量(-26.697, 8.739, 0.266), 矢量(-18.127, 3.104, -5.492), 矢量(
			-18.485, 8.763, -15.114), 矢量(-17.634, 3.308, -33.227), 矢量(-24.060, 9.847, -34.578), 矢量(-29.027, 12.762, -27.139), 矢量(-39.582,
			3.504, -37.708), 矢量(-34.687, 12.598, -15.079), 矢量(0.126, 7.227, -20.109), 矢量(-10.471, 8.132, -9.527), 矢量(-49.583, 3.308,
			-12.280), 矢量(-49.682, 8.881, -16.343), 矢量(-42.115, 3.347, -0.062), 矢量(-35.746, 10.601, 3.870), 矢量(-34.191, 12.752, -11.601),
			矢量(-42.106, 3.347, 4.141), 矢量(-59.214, 11.751, 22.188), 矢量(-52.208, 6.500, 22.029), 矢量(-77.857, 13.128, 10.090), 矢量(-76.846,
			6.500, 10.874), 矢量(-79.634, 13.419, 11.470), 矢量(-76.911, 6.500, -0.744), 矢量(-77.326, 12.500, -0.621), 矢量(-77.262, 6.500,
			-1.427), 矢量(-108.313, 13.084, -21.332), 矢量(-97.450, 6.500, -31.707), 矢量(-103.393, 12.500, -25.263), 矢量(-102.920, 6.500,
			-21.568), 矢量(-83.464, 13.420, 9.494), 矢量(-88.580, 6.500, -27.985), 矢量(-80.271, 12.843, -28.530), 矢量(-83.416, 18.650, -22.219));
		全局.SecondaryFireState = 数组(假, 真, 真, 真, 真, 假, 真, 真, 真, 真, 真, 假, 真, 真, 真, 假, 真, 假, 真, 假, 假, 真, 真, 假, 真, 真, 真, 真, 真, 假, 假, 假, 真, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 假, 假, 假, 真, 真, 真, 真, 假, 假, 假, 假, 假, 假, 真, 真,
			假, 真, 假, 假, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 假, 真, 假, 假, 假, 真, 真, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 0, 假, 矢量(20.645, 2.171, -7.310), 假, 矢量(24.621, 2.186, 13.944), 假, 矢量(19.136,
			2.188, -9.265), 假, 矢量(37.218, 2.124, -14.471), 假, 矢量(54.788, 0.699, 28.936), 假, 假, 假, 假, 矢量(66.537, 0.066, 31.912), 假, 矢量(
			26.901, 2.081, 5.468), 假, 假, 假, 假, 假, 假, 假, 矢量(-36.315, 3.397, -29.852), 矢量(-24.843, 12.689, -16.292), 假, 假, 假, 假, 假, 假, 假, 矢量(
			-51.679, 6.592, 23.286), 假, 矢量(-62.660, 6.592, 10.421), 假, 假, 假, 假, 假, 矢量(-93.347, 6.592, -9.616), 假, 假, 假, 矢量(-83.757, 6.592,
			-11.520), 假, 假, 假);
		全局.JumpState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 沃斯卡亚工业区")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(沃斯卡娅工业区);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-7.718, 9.015, 38.725), 矢量(-13.974, 4.838, 46.089), 矢量(-19.066, 0.297, 43.138), 矢量(-28.550, 2.011,
			36.672), 矢量(-32.298, 1.944, 25.423), 矢量(-26.881, -1.318, 9.117), 矢量(-18.455, -6.979, -1.958), 矢量(-25.990, -4.438, 4.398), 矢量(
			-29.758, -0.381, 10.657), 矢量(-35.649, 2.796, 13.854), 矢量(-43.853, 4.592, 14.152), 矢量(-9.153, 9.005, 35.087), 矢量(-28.551, 2.785,
			41.085), 矢量(-18.003, 2.961, 54.234), 矢量(19.500, 4.243, 46.929), 矢量(31.542, -4.046, 72.066), 矢量(25.180, 1.020, 89.595), 矢量(
			-1.728, 1.920, 97.232), 矢量(-17.625, 2.952, 56.644), 矢量(-14.191, 4.836, 46.026), 矢量(22.166, -3.654, 41.449), 矢量(11.412, -1.980,
			76.513), 矢量(-30.441, 2.020, 73.943), 矢量(-29.667, 2.020, 108.528), 矢量(-64.943, 2.020, 96.583), 矢量(-99.742, 2.020, 76.147), 矢量(
			-84.450, 2.020, 48.578), 矢量(-78.521, 2.020, 75.100), 矢量(-67.448, 2.020, 81.713), 矢量(-73.123, 2.020, 69.082), 矢量(-84.102, 2.024,
			37.749), 矢量(-77.960, 0.020, 21.107), 矢量(-65.232, -0.609, 35.339), 矢量(-94.241, -0.725, 49.021), 矢量(-96.270, 2.513, 54.571), 矢量(
			-102.974, 2.020, 47.055), 矢量(-109.573, -2.073, 68.872), 矢量(-101.384, 2.020, 73.695), 矢量(-66.618, 2.020, 81.553), 矢量(-80.315,
			-0.073, 58.568), 矢量(-46.182, -0.054, 73.871), 矢量(-7.306, 3.096, 77.659), 矢量(-25.186, 0.383, 73.109), 矢量(-0.936, 5.281, 45.132),
			矢量(-29.638, 2.097, 69.758), 矢量(-21.672, -2.971, 118.573), 矢量(25.617, -4.046, 90.632), 矢量(25.817, 1.020, 89.765), 矢量(-29.658,
			2.097, 76.590), 矢量(-29.842, 2.106, 69.770), 矢量(0.084, 2.020, 103.680), 矢量(-47.214, 2.100, 89.700), 矢量(-60.517, 0.815, 59.714),
			矢量(-102.532, 2.020, 44.291), 矢量(-65.788, -0.609, 35.188), 矢量(-63.991, -0.406, 77.714), 矢量(-24.896, 0.383, 73.339), 矢量(-1.063,
			5.281, 44.932), 矢量(-14.016, 4.844, 45.677), 矢量(-18.253, -3.321, 51.870), 矢量(-17.753, 2.955, 54.888), 矢量(-21.438, -3.593,
			42.954), 矢量(-17.297, 2.946, 53.617), 矢量(-20.020, -3.290, 67.727), 矢量(-30.170, 2.020, 74.084), 矢量(-4.126, -3.920, 92.120), 矢量(
			-2.360, 1.920, 96.775), 矢量(-47.490, 2.104, 89.741), 矢量(-61.989, -3.980, 66.657), 矢量(-66.475, -2.980, 66.570), 矢量(-62.056,
			-2.480, 44.083), 矢量(-67.141, 2.520, 43.798), 矢量(-92.973, 6.020, 39.529), 矢量(-90.421, 2.020, 37.342), 矢量(-100.028, 2.020,
			40.007), 矢量(-93.171, 6.020, 39.313), 矢量(-60.556, 0.832, 59.848), 矢量(-47.655, -0.053, 74.131), 矢量(-55.790, 2.575, 80.341), 矢量(
			-55.790, -3.980, 80.341), 矢量(-65.747, 2.529, 52.303), 矢量(-62.675, -4.161, 73.074), 矢量(-49.301, 2.020, 89.054), 矢量(-13.797,
			-4.046, 113.369), 矢量(-16.968, 1.943, 79.383), 矢量(-3.401, -4.217, 82.955), 矢量(-2.397, 1.920, 96.797), 矢量(-18.749, -3.840,
			95.123), 矢量(-17.709, 2.964, 57.802), 矢量(-20.729, -3.287, 73.292), 矢量(-0.903, 5.287, 44.762), 矢量(12.908, 4.244, 46.895), 矢量(
			25.587, -4.046, 102.240), 矢量(-16.917, 1.020, 105.960), 矢量(-26.695, 2.020, 102.450), 矢量(-56.269, 2.576, 95.515), 矢量(-60.819,
			-4.066, 92.715), 矢量(-76.606, 2.020, 73.341), 矢量(-97.762, -3.980, 69.232), 矢量(-79.872, -1.980, 88.098), 矢量(-78.819, 2.194,
			81.570));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 真, 真, 真, 真, 真, 真, 假, 真, 真, 真, 真, 真, 真, 真, 真, 假, 假, 真, 假, 假, 真, 假, 假,
			真, 假, 真, 真, 真, 真, 假, 真, 真, 真, 真, 假, 真, 假, 真, 真, 真, 真, 真, 真, 真, 真, 假, 假, 假, 假, 假, 假, 假, 真, 假, 真, 真, 假, 真, 假, 真, 假, 假, 假, 真, 真,
			假, 假, 真, 真, 真, 真, 真, 假, 真, 假, 真, 假, 真, 假, 真, 真, 假, 真, 假, 真, 真, 真, 真);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 矢量(-55.102, -4.069, 62.388), 假, 矢量(-51.788, -4.071, 69.096), 假, 矢量(-12.548, -3.956, 102.714), 假, 矢量(-11.462, -3.805,
			97.180), 假, 矢量(-22.136, -3.170, 74.394), 假, 矢量(-14.273, -3.211, 66.909), 假, 假, 矢量(-9.028, -3.592, 100.041), 假, 假, 假, 矢量(
			-75.195, -3.991, 85.520), 假, 矢量(-93.547, -3.878, 81.104), 假);
		全局.Creator = 数组(自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串(
			"抱着奶喵0"), 自定义字符串("抱着奶喵0"), 自定义字符串("抱着奶喵0"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 吉拉德堡（蹭墙）")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(吉拉德堡);
		当前游戏模式 == 游戏模式(团队死斗);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(213.457, 8, 49.404), 矢量(216.900, 12, 47.581), 矢量(211.918, 16.500, 47.267), 矢量(196.537, 16.500,
			49.871), 矢量(186.997, 3.010, 56.065), 矢量(180.917, 8, 54.281), 矢量(177.521, 0, 51.778), 矢量(178.881, 7, 54.565), 矢量(193.118, 8,
			61.769), 矢量(186.951, 1, 71.149), 矢量(193.163, 8, 65.997), 矢量(192.684, 1.010, 80.265), 矢量(187.897, 6, 80.677), 矢量(200.718, 9,
			80.771), 矢量(206.570, 15.500, 85.534), 矢量(207.979, 9.037, 94.979), 矢量(206.130, 15.500, 88.959), 矢量(220.090, 8, 86.655), 矢量(
			229.322, 2.010, 87.223), 矢量(233.443, 8.949, 89.790), 矢量(233.712, 2, 99.725), 矢量(233.260, 9, 99.991), 矢量(228.843, 2.010,
			84.424), 矢量(227.955, 9, 79.888), 矢量(233.954, 8.937, 94.593), 矢量(234.557, 5.200, 111.231), 矢量(223.109, 5, 112.473), 矢量(188.261,
			9, 115.354), 矢量(169.036, 6.997, 65.697), 矢量(176.644, 7, 56.784), 矢量(192.321, 8, 54.216), 矢量(190.337, 3, 51.829), 矢量(212.445, 8,
			64.279), 矢量(215.304, 14, 65.393), 矢量(213.058, 8.010, 49.939), 矢量(213.502, 16.500, 48.002), 矢量(200.948, 8, 65.294), 矢量(196.820,
			16.500, 62.935), 矢量(199.351, 8, 50.243), 矢量(197.334, 16.500, 49.178));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串(
			"Exit"));
		全局.JumpState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 真);
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 66号公路（十元）")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(66号公路);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(62.435, 2.449, 15.489), 矢量(63.866, 9.279, 12.599), 矢量(52.595, 7.778, -0.755), 矢量(37.225, 2.175,
			3.927), 矢量(50.166, 7.936, 13.003), 矢量(37.063, 7.842, -0.964), 矢量(13.122, 4.052, 11.161), 矢量(18.287, 2.095, 8.861), 矢量(47.442,
			2.221, -2.129), 矢量(43.369, 6.980, -1.100), 矢量(35.367, 0.312, 59.334), 矢量(31.900, 5.807, 48.797), 矢量(42.443, 0.779, 41.795), 矢量(
			50.171, 6.277, 24.162), 矢量(66.419, 5.316, 35.913), 矢量(56.238, 0.273, 46.206), 矢量(49.511, 7.075, 46.483), 矢量(55.630, 9.365,
			42.772), 矢量(38.857, 0.902, 39.562), 矢量(53.428, 6.845, 20.911), 矢量(53.960, 12.869, 9.897), 矢量(71.693, -0.053, 7.492), 矢量(35.727,
			7.871, -0.021), 矢量(13.638, 8.921, -20.951), 矢量(15.662, 2.231, -15.483), 矢量(14.897, 8.364, -21.303), 矢量(13.731, 7.609, 1.777),
			矢量(30.618, 7.057, 9.146), 矢量(8.944, 8.688, -24.446), 矢量(-0.899, 2.627, -16.691), 矢量(-8.115, 8.136, -9.475), 矢量(-15.053, 8.533,
			-14.194), 矢量(-21.709, 14.561, -12.959), 矢量(-41.480, 3.347, 2.360), 矢量(-36.983, 10.584, 5.085), 矢量(-33.156, 12.752, -9.599), 矢量(
			-13.263, 12.033, -38.300), 矢量(-1.138, 6.932, -21.578), 矢量(-4.746, 8.617, -40.562), 矢量(-24.981, 8.699, -30.917), 矢量(-35.469,
			3.308, -30.241), 矢量(-31.459, 12.752, -25.591), 矢量(-24.025, 3.978, 9.925), 矢量(-35.836, 10.579, 6.051), 矢量(0.815, 7.358,
			-20.684), 矢量(-40.599, 8.656, -21.617), 矢量(-41.892, 3.346, 1.558), 矢量(-59.847, 11.751, 21.247), 矢量(-68.108, 10.867, 5.771), 矢量(
			-69.879, 12.846, 13.313), 矢量(-79.237, 12.500, -1.351), 矢量(-97.844, 6.500, -34.312), 矢量(-102.876, 12.500, -25.229), 矢量(-55.825,
			12.639, 15.423), 矢量(-72.599, 12.557, 16.384), 矢量(-94.840, 8.500, 8.891), 矢量(-84.700, 6.500, 16.008), 矢量(-80.988, 13.085,
			15.894), 矢量(-90.007, 9.985, 4.759), 矢量(-93.197, 6.500, -12.108), 矢量(-105.513, 14.106, -10.702));
		全局.SecondaryFireState = 数组(假, 假, 假, 真, 真, 真, 假, 真, 假, 真, 假, 假, 真, 假, 假, 假, 假, 假, 真, 真, 假, 真, 真, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假,
			真, 假, 假, 真, 假, 假, 真, 假, 真, 真, 真, 真, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 假, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 矢量(30.937, 2.190, 17.084), 矢量(31.609, 7.021, 19.943), 矢量(24.158, 6.726, 0.169), 假, 矢量(38.898,
			2.187, 10.476), 假, 假, 假, 假, 矢量(49.478, 0.315, 35.893), 假, 假, 假, 假, 假, 矢量(49.706, 0.317, 35.885), 矢量(53.073, 9.592, 11.993), 假,
			假, 矢量(25.771, 8.114, -10.338), 假, 假, 假, 假, 矢量(25.784, 8.192, -16.950), 假, 假, 假, 假, 假, 假, 假, 矢量(-29.089, 12.776, -25.617), 假, 假,
			矢量(-10.605, 8.627, -42.196), 假, 假, 假, 假, 假, 假, 假, 矢量(-52.135, 6.592, 23.756), 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("花开堪折直须折"), 自定义字符串("花开堪折直须折"), 自定义字符串("花开堪折直须折"), 自定义字符串("花开堪折直须折"), 自定义字符串(
			"石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"),
			自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"),
			自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串(
			"石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"),
			自定义字符串("石原里美"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"),
			自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("石原里美"), 自定义字符串("柠檬"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("柠檬"),
			自定义字符串("柠檬"), 自定义字符串("柠檬"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("十元"), 自定义字符串("Exit"), 自定义字符串("Exit"));
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里）好莱坞")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
        当前地图 == 地图(好莱坞);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-9.546, -0.146, 55.990), 矢量(17.753, 6.581, 60.165), 矢量(5.777, -0.147, 56.077), 矢量(5.251, 6.762,
			33.310), 矢量(1.689, 1.162, 32.073), 矢量(-21.438, 7.750, 9.729), 矢量(-19.455, 1.604, 7.050), 矢量(-52.830, -0.250, -14.789), 矢量(
			-22.408, 5.751, -9.063), 矢量(-25.943, 7.541, 5.949), 矢量(-1.872, 1.604, -16.399), 矢量(7.750, 12.903, -47.949), 矢量(-1.949, 1.604,
			-34.063), 矢量(17.802, 4.184, -41.107), 矢量(26.967, 1.635, -38.737), 矢量(8.839, 11.010, -69.137), 矢量(14.411, 1.604, -75.873), 矢量(
			-6.459, 10.010, -62.855), 矢量(-9.912, 1.729, -68.640), 矢量(29.326, 6.797, -84.417), 矢量(35.240, 1.604, -76.059), 矢量(22.551, 6.797,
			-81.103), 矢量(20.732, 1.619, -86.404), 矢量(5.829, 11.010, -68.986), 矢量(-11.218, 1.729, -68.723), 矢量(-14.833, 9.750, -100.841),
			矢量(-3.052, 1.526, -101.077), 矢量(-21.229, 9.760, -100.119), 矢量(-26.437, -0.258, -94.816), 矢量(12.300, 7.173, -102.051), 矢量(
			-1.595, 1.517, -101.324), 矢量(-36.591, 7.195, -111.819), 矢量(-32.979, -0.222, -113.249), 矢量(-21.460, 3.750, -142.316), 矢量(
			-24.385, 1.758, -130.410), 矢量(-24.572, 7.227, -134.814), 矢量(-17.146, 1.957, -88.538), 矢量(-4.525, 10.010, -54.810), 矢量(1.754,
			1.604, -40.764), 矢量(10.076, 10.992, -61.916), 矢量(16.184, 1.604, -48.971), 矢量(-6.114, 10.428, -60.478), 矢量(-23.548, 7.760,
			7.441), 矢量(-9.389, 6.797, 47.451), 矢量(-10.952, 6.361, 56.088), 矢量(-0.587, 6.054, 48.195), 矢量(-2.461, -0.146, 46.453), 矢量(
			-7.471, 1.604, 2.161), 矢量(-43.938, 1.795, -6.451), 矢量(-26.577, 2.302, 4.706), 矢量(-34.254, 13.784, -12.963), 矢量(-14.689, 5.503,
			-5.550), 矢量(-18.632, 1.604, 6.239), 矢量(-44.303, -0.396, 13.459), 矢量(-20.312, 1.604, 7.022), 矢量(2.920, 3.966, -12.280), 矢量(
			-0.751, 1.748, -7.586), 矢量(-20.246, 5.751, -7.354), 矢量(-21.334, 1.604, -5.832), 矢量(-37.276, 7.087, 1.393), 矢量(-36.963, 1.750,
			-9.194), 矢量(-22.386, 7.750, 10.303));
		全局.SecondaryFireState = 数组(真, 假, 真, 假, 真, 假, 真, 真, 真, 真, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真,
			真, 真, 假, 真, 假, 真, 真, 真, 假, 假, 假, 真, 真, 真, 真, 假, 假, 真, 真, 真, 假, 真, 假, 真, 假, 真);
		全局.UltimateState = 数组(假, 矢量(5.125, -0.054, 58.347), 假, 矢量(2.351, -0.056, 46.518), 假, 矢量(-2.619, 1.688, 24.822), 假, 矢量(-35.321,
			1.842, -2.030), 矢量(-44.025, -0.077, -10.343), 假, 假, 矢量(-5.518, 1.696, -38.789), 假, 矢量(8.518, 1.696, -49.630), 假, 矢量(23.225,
			1.695, -66.953), 假, 矢量(-10.719, 1.821, -68.972), 假, 矢量(11.719, 1.696, -77.851), 假, 矢量(31.957, 1.695, -89.001), 假, 矢量(14.216,
			1.695, -80.680), 假, 矢量(-13.450, 2.027, -85.885), 假, 矢量(-21.554, -0.167, -93.596), 假, 矢量(-0.386, 1.842, -105.704), 假, 矢量(
			-28.720, -0.165, -98.807), 假, 矢量(-35.862, 1.842, -138.548), 假, 矢量(-23.870, 1.842, -141.385), 假, 矢量(-13.355, 1.982, -70.931), 假,
			矢量(8.703, 1.696, -49.562), 假, 矢量(-3.118, 1.696, -51.101), 假, 假, 假, 假, 假, 矢量(-4.521, 1.688, 25.388), 矢量(-30.255, 1.842, -9.484),
			假, 矢量(-35.960, 1.923, -2.083), 假, 假, 矢量(-35.912, 1.842, -2.002), 矢量(-38.640, 1.842, -1.084), 矢量(-18.305, 1.778, -4.689), 假, 矢量(
			-6.432, 1.696, -13.745), 假, 矢量(-21.977, 1.842, 8.025), 假, 矢量(-22.564, 2.394, 7.675));
		全局.Creator = 数组(自定义字符串("斗鱼"), 自定义字符串("小枫"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"),
			自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"),
			自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("Exit"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"),
			自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"),
			自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("花开堪折直须折"), 自定义字符串("花开堪折直须折"),
			自定义字符串("花开堪折直须折"), 自定义字符串("花开堪折直须折"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("斗鱼"),
			自定义字符串("斗鱼"), 自定义字符串("斗鱼"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("小枫"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 好莱坞（清尘）")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(好莱坞);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-18.804, 1.604, -3.465), 矢量(-18.123, 5.751, -6.021), 矢量(-19.540, 1.604, -3.701), 矢量(-23.356, 5.751,
			-9.992), 矢量(-32.195, 4.435, -8.821), 矢量(-34.935, 1.750, -7.087), 矢量(-33.513, 4.425, -10.031), 矢量(-22.626, 5.751, -8.836), 矢量(
			-11.936, 1.750, -7.302), 矢量(-21.219, 1.604, 6.633), 矢量(-24.330, 7.750, 9.071), 矢量(-43.011, 1.750, -0.224), 矢量(-29.329, 13.857,
			-12.210), 矢量(-25.473, 7.760, 6.579), 矢量(5.677, 6.003, 41.026), 矢量(-9.918, 5.012, 44.829), 矢量(-23.552, 5.060, 47.228), 矢量(
			-28.338, 0, 50.134), 矢量(-30.684, 4.840, 49.335), 矢量(-27.851, 1.012, 41.817), 矢量(-26.680, 4.515, 39.002), 矢量(-18.465, 5.060,
			47.457), 矢量(-16.962, 0.007, 60.800), 矢量(-21.536, 3.274, 60.704), 矢量(-23.078, 1.187, 53.208), 矢量(-14.641, 5.012, 46.561), 矢量(
			7.187, -0.146, 57.339), 矢量(7.742, 1.993, 64.585), 矢量(4.049, 0.003, 66.021), 矢量(9.580, 3.230, 60.973), 矢量(17.472, 6.591,
			59.430), 矢量(6.576, 0.004, 49.939), 矢量(6.868, 6.591, 49.518), 矢量(-1.953, -0.136, 42.021), 矢量(5.606, 6.003, 42.057), 矢量(2.405,
			1.230, 33.029), 矢量(5.332, 6.003, 35.717), 矢量(-30.493, 1.541, 24.760), 矢量(-31.800, 5.168, 26.817), 矢量(-27.675, 7.750, 19.024),
			矢量(-28.468, 13.857, -12.014), 矢量(-6.844, 1.604, -13.736), 矢量(-0.050, 6.456, -21.362), 矢量(5.954, 8.348, -21.524), 矢量(6.470,
			1.604, -18.232), 矢量(5.214, 8.348, -21.510), 矢量(19.355, 1.625, -30.953), 矢量(25.327, 4.723, -30.493), 矢量(29.354, 3.895, -38.519),
			矢量(17.275, 7.291, -44.406), 矢量(10.652, 10.750, -39.494), 矢量(-1.073, 6.532, -28.106), 矢量(1.490, 10.732, -29.928), 矢量(6.936,
			7.340, -41.198), 矢量(4.061, 11.104, -38.736), 矢量(-3.132, 1.604, -41.937), 矢量(-4.428, 6.807, -46.438), 矢量(-3.650, 10.010,
			-54.790), 矢量(-5.076, 10.007, -65.811), 矢量(5.834, 11.010, -68.835), 矢量(-15.622, 5.750, -64.267), 矢量(-17.896, 9.750, -101.556),
			矢量(-33.830, -0.140, -113.855), 矢量(-36.520, 7.186, -112.664), 矢量(-39.138, 1.750, -129.576), 矢量(-41.847, 6.805, -128.893), 矢量(
			-29.197, 6.859, -136.480), 矢量(-23.920, 1.750, -142.504), 矢量(-26.168, 6.847, -137.093), 矢量(-23.481, 1.750, -125.397), 矢量(
			-21.983, 9.805, -126.139), 矢量(-36.730, 7.186, -112.164), 矢量(-23.816, 3.051, -92.852), 矢量(-25.836, -0.258, -91.575), 矢量(-21.108,
			3.190, -92.331), 矢量(-17.138, 9.750, -100.523), 矢量(-10.376, 9.749, -102.414), 矢量(23.886, 2.559, -95.005), 矢量(28.372, 6.983,
			-85.729), 矢量(24.374, 6.797, -77.862), 矢量(10.579, 6.003, -69.879), 矢量(8.329, 11.038, -69.698), 矢量(16.746, 1.604, -64.843), 矢量(
			13.849, 6.003, -58.705), 矢量(14.433, 1.750, -38.424), 矢量(12.949, 10.793, -39.295), 矢量(-2.779, 10.010, -54.438), 矢量(-16.475,
			5.751, -6.786), 矢量(3.015, 3.964, -11.888), 矢量(4.276, 8.348, -21.276), 矢量(3.490, 3.731, -22.499), 矢量(2.948, 10.750, -28.941),
			矢量(-28.397, 13.857, -12.345), 矢量(3.143, 3.964, -11.364), 矢量(0.948, 6.558, -20.576), 矢量(-7.823, 1.757, -13.681), 矢量(-16.251,
			1.750, -16.394), 矢量(-13.402, 5.751, -11.473), 矢量(-7.124, 6.688, -41.178), 矢量(0.372, 1.604, -42.233), 矢量(6.231, 7.435, -40.706),
			矢量(7.275, 12.903, -48.556), 矢量(12.816, 2.232, -70.226), 矢量(20.779, 8.059, -77.852), 矢量(2.612, 1.604, -70.354), 矢量(-3.933,
			3.899, -67.890), 矢量(-4.795, 10.007, -65.959), 矢量(10.704, 6.003, -69.462), 矢量(-3.065, 1.604, -9.074), 矢量(2.588, 3.974, -11.958),
			矢量(-28.245, 13.857, -13.668), 矢量(5.047, 6.647, 33.003), 矢量(-43.603, -0.250, 7.687), 矢量(-45.551, 1.750, -0.037), 矢量(-43.779,
			1.795, -6.357), 矢量(-34.925, 13.884, -13.229), 矢量(-0.010, 11.010, -54.656), 矢量(16.207, 1.604, -58.906), 矢量(16.408, 6.496,
			-46.382), 矢量(15.234, 4.960, -62.313), 矢量(9.049, 11.010, -68.747), 矢量(22.938, 6.974, -83.006), 矢量(-9.343, 9.750, -102.914), 矢量(
			-2.384, 11.834, -112.077), 矢量(-8.399, 2.026, -116.341), 矢量(-12.218, 9.750, -111.669), 矢量(-35.956, 7.186, -112.393), 矢量(-24.711,
			3.051, -92.869), 矢量(-32.355, -0.257, -104.483), 矢量(-38.556, 5.687, -111.651), 矢量(-28.059, 9.750, -116.174), 矢量(-16.701, 3.750,
			-145.317), 矢量(-24.464, 7.232, -134.735), 矢量(-28.629, 6.847, -139.316), 矢量(-41.553, 6.805, -130.857), 矢量(-10.156, 9.750,
			-105.183), 矢量(31.811, 1.604, -82.417), 矢量(30.606, 6.797, -81.451), 矢量(2.599, 3.976, -13.535), 矢量(-12.234, 3.438, -61.194), 矢量(
			-2.368, 1.604, -68.647), 矢量(-4.979, 10.007, -65.988), 矢量(-24.199, 1.778, -107.476), 矢量(-36.224, 7.186, -112.573), 矢量(11.440,
			7.165, -101.099), 矢量(2.319, 13, -68.937), 矢量(9.847, 6.003, -54.688), 矢量(6.940, 12.903, -49.692), 矢量(-2.296, 6.270, -28.902),
			矢量(1.284, 11.104, -32.564), 矢量(-28.197, 13.857, -13.444), 矢量(2.649, 1.604, -42.483), 矢量(3.412, 11.104, -37.821), 矢量(-4.274,
			1.604, -31.636), 矢量(1.911, 11.104, -34.970), 矢量(-7.896, 1.801, -56.049), 矢量(-6.264, 10.010, -62.998), 矢量(-5.260, 1.604,
			-70.856), 矢量(-2.862, 10.909, -67.446), 矢量(-4.944, 1.604, -70.399), 矢量(6.360, 11.010, -68.939));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 真, 真, 假, 真, 假, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 真, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 真, 假, 真, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真,
			假, 假, 假, 假, 假, 假, 真, 假, 假, 真, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 真, 假, 假, 真, 假, 真, 真, 真, 假, 假, 真, 真, 假, 假, 假,
			假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 假, 真, 假, 假, 假, 真, 真, 假, 真, 真, 假, 假, 真, 假, 真, 真, 假, 假, 假, 假, 真, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.UltimateState = 数组();
		全局.Creator = 数组(自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("Exit"), 自定义字符串(
			"Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"));
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 伊利奥斯 蹭墙")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(伊利奥斯);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(95.717, 58.367, -174.941), 矢量(110.807, 67.589, -175.847), 矢量(-54.635, 65.389, -175.323), 矢量(-32.463,
			68.519, -163.108), 矢量(-15.969, 58.367, -165.689), 矢量(-18.170, 68.519, -163.117), 矢量(-55.481, 65.389, -174.673), 矢量(-40.252,
			61.283, -147.478), 矢量(44.857, 60.367, -152.053), 矢量(41.417, 68.535, -162.429), 矢量(-185.729, -5.017, -62.451), 矢量(-200.265,
			-0.481, -55.086), 矢量(-195.364, 0.957, -26.070), 矢量(-197.862, 9.895, -12.553), 矢量(-231.184, -1, 21.067), 矢量(-233.938, 8.618,
			21.288), 矢量(-186.550, 1, -5.310), 矢量(-185.117, 5.152, -31.409), 矢量(346.995, -25.641, -36.807), 矢量(352.331, -17.953, -46.551),
			矢量(333.794, -24.684, -4.077), 矢量(330.482, -17.654, -31.870), 矢量(347.088, -25.641, -36.412), 矢量(331.941, -14.776, -34.725), 矢量(
			303.642, -24.711, -65.771), 矢量(327.557, -14.775, -45.053));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"));
		全局.JumpState = 数组(假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 伊利奥斯 小球")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(伊利奥斯);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-53.066, 65.563, -158.868), 矢量(-41.481, 65.557, -156.398), 矢量(-23.160, 68.516, -150.607), 矢量(-15.666,
			68.519, -150.218), 矢量(-0.272, 64.216, -147.604), 矢量(7.327, 66.366, -148.684), 矢量(45.021, 66.369, -148.691), 矢量(72.431, 68.516,
			-150.612), 矢量(108.040, 64.441, -160.208), 矢量(83.765, 67.654, -179.230), 矢量(41.523, 68.689, -163.344), 矢量(-16.158, 64.484,
			-172.606), 矢量(-28.272, 58.367, -176.895), 矢量(-52.384, 69.646, -172.955), 矢量(-18.287, 70.135, -180.129), 矢量(-3.356, 68.865,
			-180.620), 矢量(4.374, 65.252, -160.554), 矢量(57.818, 64.216, -147.995), 矢量(6.714, 63.916, -171.271), 矢量(1.977, 67.531, -180.128),
			矢量(55.558, 64.484, -177.988), 矢量(79.525, 68.517, -162.871), 矢量(82.626, 67.664, -178.733), 矢量(118.731, 60.746, -146.016), 矢量(
			-187.297, -0.167, -86.975), 矢量(-199.021, 5.223, -49.174), 矢量(-236.282, 6.915, -24.420), 矢量(-266.301, -0.561, 15.198), 矢量(
			-259.860, -5, 23.913), 矢量(-237.179, 5.200, 7.816), 矢量(-217.498, 5.007, 2.155), 矢量(-206.628, 6.977, -2.651), 矢量(-204.923, 9.895,
			-5.844), 矢量(-188.647, 6.977, -7.396), 矢量(-157.142, 2.989, -64.444), 矢量(-173.281, 5.138, -33.336), 矢量(-197.578, 9.895, -12.903),
			矢量(-223.455, 7.313, -2.965), 矢量(-223.788, 5.561, -16.063), 矢量(-233.645, 5.637, -20.770), 矢量(-234.657, 8.986, 23.078), 矢量(
			-223.132, 5.091, 7.817), 矢量(-212.920, 10.022, -24.850), 矢量(-217.083, 12.995, -21.887), 矢量(357.168, -10.570, -47.793), 矢量(
			345.979, -18.444, -33.311), 矢量(355.214, -17.774, -41.306), 矢量(300.813, -14.850, -46.625), 矢量(298.698, -20.631, -70.495), 矢量(
			301.481, -16.162, -71.960), 矢量(287.277, -17.803, -77.776), 矢量(339.324, -27.641, -83.165), 矢量(327.966, -14.747, -45.585), 矢量(
			335.512, -18.603, -19.585), 矢量(326.184, -17.196, 15.845), 矢量(331.264, -17.654, -31.360), 矢量(354.094, -10.745, -53.223), 矢量(
			355.234, -25.641, -54.600), 矢量(327.594, -14.788, -44.456), 矢量(301.959, -16.015, -47.557), 矢量(325.382, -17.654, -46.443), 矢量(
			340.223, -25.641, -54.877), 矢量(360.061, -22.801, -5.976), 矢量(327.756, -18.106, -53.257), 矢量(38.611, 123.674, -93.177), 矢量(
			21.554, 61.356, -136.434), 矢量(2.950, 60.367, -183.866), 矢量(-57.153, 60.523, -187.084), 矢量(-58.006, 65.389, -184.124), 矢量(2.252,
			66.363, -147.897), 矢量(69.231, 63.727, -147.902), 矢量(109.413, 64.446, -160.620), 矢量(54.125, 60.367, -184.525), 矢量(40.853,
			60.367, -175.675), 矢量(-14.502, 68.516, -162.723), 矢量(3.858, 65.075, -161.398), 矢量(-32.727, 68.516, -150.595), 矢量(-22.808,
			58.377, -179.004), 矢量(-11.716, 64.616, -145.347), 矢量(-7.925, 60.367, -139.882), 矢量(4.555, 65.247, -160.084), 矢量(9.933, 63.869,
			-171.125), 矢量(29.195, 60.367, -183.050), 矢量(-195.104, 7.313, -31.515), 矢量(-266.850, -0.562, 15.462), 矢量(-240.814, 1.200,
			-12.408), 矢量(-240.861, 5, -6.463), 矢量(-234.638, 5.031, 6.648), 矢量(-223.134, 7.323, -3.325), 矢量(-244.952, -0.524, -9.203), 矢量(
			-234.804, -1, -24.518), 矢量(-207.339, 6.986, -2.958), 矢量(-204.987, 9.895, -5.540), 矢量(-200.960, 7.323, -27.417), 矢量(-144.596,
			-5.684, -79.672), 矢量(-150.087, -0.871, -79.911), 矢量(-148.290, 4.229, -78.104), 矢量(-187.186, 18.110, 4.161), 矢量(-195.294, 7.313,
			-31.553), 矢量(-205.120, 9.895, -5.317), 矢量(-183.574, 5.012, -33.142), 矢量(-169.074, 5, -23.922), 矢量(362.373, -10.895, -49.140),
			矢量(354.367, -10.677, -53.363), 矢量(334.894, -18.520, -60.912), 矢量(279.060, -18.447, -80.130), 矢量(326.106, -17.645, -46.749), 矢量(
			337.644, -16.261, 4.004), 矢量(349.976, -25.162, 23.313), 矢量(358.678, -27.614, -26.642), 矢量(340.266, -26.954, -82.524), 矢量(
			353.782, -11.091, -54.227), 矢量(328.039, -20.729, 7.363), 矢量(328.993, -18.297, -4.012), 矢量(331.146, -17.654, -31.542), 矢量(
			349.784, -25.641, -36.313), 矢量(317.881, -18.434, -56.889), 矢量(298.998, -20.631, -70.492), 矢量(327.959, -14.759, -45.508), 矢量(
			315.480, -16.024, -13.931), 矢量(325.394, -17.334, 15.307), 矢量(336.287, -16.261, 1.455));
		全局.SecondaryFireState = 数组(假, 真, 假, 假, 假, 真, 真, 真, 真, 真, 真, 假, 真, 真, 假, 假, 真, 真, 假, 真, 真, 假, 真, 假, 真, 真, 真, 假, 真, 真, 假, 假, 假, 真, 真,
			真, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 真, 假, 假, 假, 真, 真, 假, 真, 真, 真, 假, 真, 假, 假, 假, 真, 真, 假, 真, 真, 真, 假, 真, 真, 真, 真, 假, 真, 假, 真, 假,
			真, 假, 真, 真, 假, 假, 真, 真, 假, 假, 假, 假, 真, 真, 假, 假, 真, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 真, 真, 假, 真, 真, 真, 真, 假, 假, 假, 真, 假, 真, 假,
			假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 矢量(-36.777, 58.459, -177.040), 假, 假, 假, 假, 假, 假, 假, 矢量(62.293, 64.574,
			-172.643), 假, 假, 假, 假, 假, 假, 假, 矢量(-249.627, -4.908, 15.085), 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 矢量(343.807, -25.549, -47.229), 假, 假, 假, 矢量(346.981, -25.549, -36.479), 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 矢量(-21.073, 58.731, -149.399), 假, 矢量(-6.288, 60.459, -158.559), 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 矢量(-226.709, 1.092,
			-16.158), 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 矢量(340.867, -25.549, -54.810), 假, 假, 假, 假,
			假);
		全局.Creator = 数组(自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"));
		全局.JumpState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.SpherePosition = 数组(0, 0, 矢量(-33.072, 62.002, -156.782), 矢量(-19.288, 68.918, -147.584), 0, 矢量(2.938, 64.972, -151.530), 矢量(14.585, 66.669, -159.952), 矢量(
			39.199, 66.056, -153.571), 矢量(88.994, 60.593, -147.642), 矢量(104.317, 62.474, -173.652), 矢量(75.254, 61.406, -187.602), 0, 矢量(-21.751, 69.339, -176.197), 0,
			矢量(-48.542, 62.750, -182.784), 矢量(-10.652, 65.078, -180.414), 0, 矢量(12.036, 63.285, -167.567), 矢量(55.084, 62.655, -159.392), 0,
			矢量(12.909, 63.694, -160.993), 0, 矢量(76.178, 66.913, -168.105), 矢量(118.639, 73.395, -160.751), 0, 0, 矢量(-204.812, 1.861, -48.859), 矢量(-229.225, 4.718,
			-34.351), 矢量(-257.973, 0.293, 12.200), 0, 矢量(-237.963, 3.060, 15.932), 矢量(-211.857, 6.231, -3.071), 0, 矢量(-199.082, 9.755, -12.970), 矢量(-180.477, 2.074,
			-14.396), 矢量(-165.059, -0.724, -63.572), 矢量(-174.027, 2.565, -19.207), 矢量(-214.406, 7.440, -4.789), 矢量(-224.761, 9.697,
			-14.329), 矢量(-233.853, 7.173, -17.225), 矢量(-229.405, 9.916, 9.605), 矢量(-224.083, 5.813, 15.284), 0, 0, 0, 0, 0, 矢量(318.658, 
			-15.487, -53.765), 0, 0, 0, 矢量(327.181, -22.243, -85.303), 矢量(342.827, -22.055, -87.742), 0, 0, 矢量(334.187, -15.488, -12.823),
			0, 0, 矢量(338.971, -15.263, -43.901), 矢量(316.913, -17.448, -44.047), 0, 0, 0, 矢量(329.848, -13.944, -43.789), 0, 0, 0, 矢量(-16.686, 55.466, -190.140), 0, 矢量(
			-13.827, 69.663, -158.476), 0, 矢量(82.229, 68.670, -162.883), 矢量(114.021, 63.049, -169.886), 0, 矢量(42.688, 63.778, -159.744), 0,
			矢量(26.020, 66.710, -167.452), 0, 0, 矢量(-5.112, 62.948, -147.434), 矢量(-1.686, 66.374, -168.441), 矢量(2.073, 74.420, -167.984), 0,
			0, 0, 矢量(-240.152, 10.372, -3.741), 0, 矢量(-233.980, 8.347, -2.537), 矢量(-233.362, 3.535, 0.970), 矢量(-231.244, 12.208, -6.823), 矢量(-236.396, 5.886,
			-23.325), 矢量(-216.751, 9.777, -7.254), 0, 0, 矢量(-228.484, 7.650, -22.247), 0, 0, 0, 0, 矢量(-201.283, 14.250, -40.459), 0, 0, 0,
			0, 0, 0, 矢量(292.726, -15.587, -51.508), 0, 矢量(353.461, -23.461, 15.717), 0, 0, 0, 0, 0, 0, 矢量(
			342.601, -22.688, -35.100), 0, 矢量(308.466, -18.586, -52.895),
			矢量(327.684, -16.697, -51.241), 0, 矢量(314.104, -14.103, 2.163), 0);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 伊利奥斯灯塔（栀子）")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(伊利奥斯灯塔);
		当前游戏模式 == 游戏模式(团队死斗);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(354.823, -25.641, -55.694), 矢量(340.879, -18.365, -30.844), 矢量(328.281, -20.729, 4.235), 矢量(316.038,
			-22.390, 18.104), 矢量(316.155, -17.424, 25.078), 矢量(317.219, -23.974, 38.872), 矢量(352.491, -25.160, 18.455), 矢量(344.371,
			-24.641, 1.733), 矢量(325.620, -20.641, -13.442), 矢量(366.081, -27.641, -8.483), 矢量(346.099, -16.521, -10.877), 矢量(353.039,
			-18.241, -44.115), 矢量(351.627, -25.641, -37.324), 矢量(320.454, -24.641, -77.744), 矢量(327.438, -14.752, -46.131), 矢量(333.611,
			-20.359, 0.695), 矢量(331.554, -17.005, 8.810), 矢量(351.586, -18.641, -25.332), 矢量(317.438, -23.682, -26.015), 矢量(336.620,
			-18.494, -27.297), 矢量(355.240, -17.851, -41.389), 矢量(299.515, -24.941, -85.564), 矢量(298.915, -16.152, -80.371), 矢量(327.473,
			-14.743, -46.104), 矢量(348.291, -18.365, -28.228), 矢量(368.461, -27.641, -14.518), 矢量(327.135, -14.806, -44.181), 矢量(316.316,
			-22.390, 18.219));
		全局.SecondaryFireState = 数组(真, 假, 假, 假, 假, 真, 假, 真, 假, 真, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 假, 真, 假);
		全局.UltimateState = 数组(假, 矢量(343.605, -25.549, -46.841), 假, 假, 假, 假, 矢量(335.423, -23.882, 38.810), 假, 矢量(329.375, -24.549, -0.097),
			假, 矢量(350, -24.556, 4.625), 假, 假, 矢量(339.231, -25.549, -54.411), 假, 假, 假, 矢量(338.969, -16.132, 6.090), 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 伊利奥斯深井（栀子）")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(伊利奥斯深井);
		当前游戏模式 == 游戏模式(团队死斗);
	}

	动作
	{
		全局.CheckpointPosition = 空数组;
		全局.Ability1State = 空数组;
		全局.Ability2State = 空数组;
		全局.SecondaryFireState = 空数组;
		全局.Creator = 空数组;
		全局.CheckpointPosition = 数组(矢量(-207.291, 1, -37.480), 矢量(-184.862, 5.007, -27.532), 矢量(-169.295, 5, -25.104), 矢量(-155.609, 3.872,
			-67.711), 矢量(-164.009, -3.409, -87.446), 矢量(-174.661, -4.416, -84.558), 矢量(-175.395, -4.925, -72.955), 矢量(-199.358, 5.233,
			-49.501), 矢量(-212.240, 5.637, -35.280), 矢量(-207.775, 1, -44.250), 矢量(-217.070, 12.980, -22.620), 矢量(-223.440, 7.313, -3.440),
			矢量(-200.447, 6.986, 4.102), 矢量(-204.718, 9.895, -5.040), 矢量(-195.441, 7.323, -30.936), 矢量(-200.591, -0.879, -52.514), 矢量(
			-188.311, 4.105, -57.733), 矢量(-216.973, 10.013, -21.016), 矢量(-235.710, -0.830, -25.220), 矢量(-206.267, 6.977, -2.775), 矢量(
			-190.140, 6.980, -8.830), 矢量(-186.997, 5.299, -29.801), 矢量(-216.770, 12.980, -22.320), 矢量(-205.920, 9.895, -4.880), 矢量(
			-223.882, 5.562, -16.209));
		全局.SecondaryFireState = 数组(真, 假, 真, 假, 假, 假, 真, 假, 假, 真, 假, 假, 假, 假, 假, 假, 真, 假, 真, 假, 假, 真, 假, 假);
		全局.UltimateState = 数组(假, 矢量(-195.700, 1.069, -25.320), 假, 矢量(-173.724, 5.374, -36.796), 假, 假, 假, 矢量(-187.179, -4.847, -62.848), 假,
			假, 矢量(-207.458, 1.091, -34.908), 假, 假, 假, 假, 假, 假, 假, 假, 矢量(-226.888, 1.092, -16.447), 假, 假, 矢量(-191.969, 5.097, -23.564), 假,
			假);
		全局.Creator = 数组(0, 0, 0, 0, 0, 0, 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串(
			"Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串(
			"Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("你老舅"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"),
			自定义字符串("Gardenia"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  伊利奥斯废墟（栀子）")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(伊利奥斯废墟);
		当前游戏模式 == 游戏模式(团队死斗);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(1.773, 62.616, -153.877), 矢量(-0.924, 64.221, -147.214), 矢量(-12.333, 64.623, -147.773), 矢量(1.340,
			66.363, -148.835), 矢量(1.877, 65.273, -161.672), 矢量(-8.510, 65.188, -166.833), 矢量(-15.509, 68.524, -162.569), 矢量(-8.575, 60.367,
			-163.531), 矢量(-15.323, 68.518, -162.953), 矢量(-26.467, 67.634, -178.522), 矢量(-44.647, 60.367, -178.049), 矢量(-52.199, 67.259,
			-175.402), 矢量(-32.038, 68.518, -163.007), 矢量(-17.083, 64.672, -145.426), 矢量(28.582, 61.386, -149.021), 矢量(38.893, 62.158,
			-157.291), 矢量(50.432, 66.376, -149.438), 矢量(70.180, 63.718, -146.355), 矢量(79.428, 58.367, -174.299), 矢量(83.262, 67.654,
			-179.210), 矢量(85.251, 58.367, -177.013), 矢量(83.840, 67.650, -179.250), 矢量(109.390, 64.897, -177.737), 矢量(92.571, 64.120,
			-174.286), 矢量(41.701, 68.689, -163.500));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串(
			"Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串(
			"Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串(
			"Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("Gardenia"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 釜山 (别开这个）")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(釜山);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(190.939, 12.095, 248.087), 矢量(192.324, 21.354, 245.543), 矢量(-322.846, 8.290, 156.164), 矢量(-317.791,
			12.073, 160.891), 矢量(-270.730, 9.357, 153.463), 矢量(-282.104, 11.826, 141.329), 矢量(50.272, 4.872, -77.588), 矢量(41.794, 12.157,
			-87.207), 矢量(60.457, 10, -125.801), 矢量(52.663, 21.399, -126.638), 矢量(16.358, 13, -132.703), 矢量(12.431, 23.301, -131.003), 矢量(
			81.524, 13, -105.764), 矢量(77.481, 22.760, -108.472));
		全局.SecondaryFireState = 数组(假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"));
		全局.JumpState = 数组(假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)艾兴瓦尔德 mrcoco")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(艾兴瓦尔德);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(52.213, 18.046, -82.559), 矢量(24.760, 6.714, -55.413), 矢量(47.276, 8.649, -102.729), 矢量(33.175, 14,
			-87.929), 矢量(47.423, 8.506, -103.722), 矢量(51.714, 17.886, -100.004), 矢量(46.078, 9.252, -102.781), 矢量(57.464, 18.916, -95.372),
			矢量(47.363, 8.680, -102.170), 矢量(67.001, 8.530, -108.507), 矢量(64.889, 17.830, -106.870), 矢量(36.928, 12.617, -81.281), 矢量(49.923,
			18.208, -79.093), 矢量(63.646, 15.694, -81.645), 矢量(60.559, 21.033, -71.155), 矢量(80.244, 21.153, -65.337), 矢量(62.678, 18.851,
			-92.288), 矢量(64.118, 18.046, -75.555), 矢量(54.196, 6.718, -61.079), 矢量(49.972, 11.503, -72.940), 矢量(49.754, 6.352, -74.061), 矢量(
			10.191, 11.012, -85.268), 矢量(-12.378, 3.182, -34.215), 矢量(-29.373, -0.078, -24.217), 矢量(-12.672, 3.572, -32.928), 矢量(-2.419,
			10.378, -32.146), 矢量(32.101, 6.024, -72.795), 矢量(34.901, 14, -77.716));
		全局.Ability1State = 数组();
		全局.Ability2State = 数组();
		全局.SecondaryFireState = 数组(假, 真, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 真, 假, 真, 假, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 矢量(39.563, 5.759, -71), 假, 假, 假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串(
			"MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串(
			"MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串(
			"MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("MrCoco"), 自定义字符串("Exit"), 自定义字符串("Exit"));
		全局.JumpState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  万圣艾节兴瓦尔德（栀子）")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(万圣节艾兴瓦尔德);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(35.769, 8.716, -88.918), 矢量(6.305, 11.271, -87.573), 矢量(-34.304, 1.967, -35.209), 矢量(-13.416, 3.091,
			-68.828), 矢量(52.946, 18.234, -75.373), 矢量(54.543, 21.003, -64.172), 矢量(62.672, 18.848, -92.903), 矢量(10.234, 10.352, -37.749),
			矢量(-3.075, 5.010, -14.852), 矢量(40.675, 5.950, -72.569), 矢量(51.442, 21.728, -65.317), 矢量(54.409, 17.896, -100.160), 矢量(100.790,
			9.591, -91.866), 矢量(92.444, 13.267, -78.477), 矢量(71.100, 13.331, -91.784), 矢量(68.199, 4.732, -85.498), 矢量(65.274, 12.516,
			-89.523), 矢量(65.778, 13.992, -79.210), 矢量(80.467, 21.153, -65.892), 矢量(37.328, 12.617, -80.641), 矢量(1.232, 5.010, -15.108), 矢量(
			9.500, 5.813, -70.250), 矢量(17.423, 10.406, -38.421), 矢量(33.044, 6.024, -73.523), 矢量(49.104, 11.493, -74.386), 矢量(75.569,
			12.660, -66.992), 矢量(86.139, 14.976, -50.125), 矢量(62.234, 18.848, -92.936), 矢量(32.205, 14, -86.851), 矢量(33.818, 6.024,
			-73.081), 矢量(-28.578, 1.967, -32.560));
		全局.SecondaryFireState = 数组(假, 真, 真, 真, 假, 假, 真, 假, 真, 真, 假, 真, 假, 假, 假, 假, 假, 假, 假, 真, 真, 真, 真, 假, 真, 真, 真, 假, 假, 真);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 矢量(54.282, 6.967, -61.258), 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 矢量(-4.394, 6.089,
			-58.428), 假, 假, 假, 矢量(80.974, 12.814, -50.382), 假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"),
			自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"),
			自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"),
			自定义字符串("栀子"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"));
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  监测站双蹭（栀子）")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(监测站：直布罗陀);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		创建HUD文本(所有玩家(所有队伍), 自定义字符串("别问,看不懂就去隔壁"), 无, 无, 左边, 4, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		全局.CheckpointPosition = 数组(
			矢量(28.541, -5.159, -78.439), 矢量(30.177, 3.013, -80.578), 矢量(32.826, -5.010, -74.585), 矢量(29.496, 3.022, -80.806), 矢量(29.007, -5.020, -79.350),
			矢量(30.978, 3, -71.850), 矢量(32.253, -5.010, -75.190), 矢量(27.837, 3.047, -70.349), 矢量(43.140, -4.871, -135.285), 矢量(43.917, 4.010, -131.957), 
			矢量(23.067, -5.101, -86.993), 矢量(25.133, 3.022, -86.404), 矢量(40.594, -5.027, -35.902), 矢量(48.524, 3, -39.235), 矢量(51.032, -5, -64.970), 
			矢量(48.017, 3, -66.548), 矢量(41.007, -5, -72.440), 矢量(43.595, 3, -69.660), 矢量(54.579, 3.049, -53.114), 矢量(49.644, -5.149, -45.246), 
			矢量(46.164, 3.052, -38.100), 矢量(17.650, -5, -65.838), 矢量(16.262, 3, -67.724), 矢量(15.444, -5, -66.905), 矢量(16.278, 3, -67.617), 
			矢量(39.886, -3.854, -91.604), 矢量(37.279, 4.003, -89.903), 矢量(43.761, -8.893, -109.130), 矢量(43.279, -0.004, -107.772), 矢量(39.610, -3.981, -123.006), 
			矢量(44.554, 4.021, -127.034), 矢量(31.277, -4.899, -128.959), 矢量(41.059, 4.020, -130.073), 矢量(36.112, 5, -145.251), 矢量(77.914, -3.139, -30.491), 
			矢量(68.915, 3, -38.903), 矢量(85.521, -3.161, -2.233), 矢量(80.717, 6.010, 2.905), 矢量(90.414, -3.059, -5.199), 矢量(83.541, 6.010, 0.531), 
			矢量(73.519, 1, 21.944), 矢量(76.967, 9, 21.624), 矢量(82.314, 1, 23.113), 矢量(71.773, 9, 26.709), 矢量(96.584, 3, -23.866), 
			矢量(58.474, -5.146, -52.045), 矢量(54.473, 3.043, -52.693), 矢量(37.645, -4.818, -142.152), 矢量(36.562, 4.999, -144.650), 矢量(27.069, -5.024, -146.975), 
			矢量(31.421, 4.999, -148.695), 矢量(22.263, -5.169, -85.036), 矢量(26.595, 4, -88.728), 矢量(40.758, -5.001, -51.761), 矢量(34.246, 3.045, -51.075), 
			矢量(59.362, 3, -52.855), 矢量(67.352, 10.593, -46.802), 矢量(75.789, -3.147, 3.360), 矢量(79.846, 6.010, 3.738), 矢量(59.030, 0.548, 26.383), 
			矢量(66.226, 9, 26.418), 矢量(71.928, 9, 26.513), 矢量(96.796, 5.905, 43.684), 矢量(81.669, 1, 23.931), 矢量(69.597, 9, 28.857), 
			矢量(38.770, -4.917, -90.363), 矢量(31.736, 6.229, -93.038), 矢量(56.644, 1.010, -114.190), 矢量(57.428, 8.337, -120.505), 矢量(82.227, 10, 14.420), 
			矢量(59.599, 8.354, 20.590));
		全局.SecondaryFireState = 数组(
			假, 假, 假, 假, 假, 假, 假, 真, 假, 真, 
			假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 
			真, 假, 假, 假, 真, 假, 假, 假, 假, 假, 
			假, 假, 假, 假, 假, 假, 假, 假, 假, 真, 
			假, 假, 假, 真, 真, 假, 假, 假, 假, 假, 
			假, 假, 假, 假, 真, 假, 真, 假, 真, 假, 
			假, 假, 真, 假, 假, 假, 真, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"),
			自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"),
			自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("Exit"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"),
			自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"),
			自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"),
			自定义字符串("栀子"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("无心任始终"), 自定义字符串("栀子"),
			自定义字符串("栀子"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"));
		全局.JumpState = 数组(
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
		 	假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 
			真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 
			假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 
			假, 假, 假, 假, 真, 假, 真, 假, 假, 假, 
			真, 假, 真, 假, 假, 假, 真, 假, 假, 假, 
			假, 假, 真, 假, 真, 假, 假, 假, 真, 假
			);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 直布罗陀 萌新")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(监测站：直布罗陀);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(30.354, 5, -151.022), 矢量(35.194, 5, -145.988), 矢量(42.536, 3.218, -140.939), 矢量(36.938, 4.010,
			-124.670), 矢量(19.895, 6, -130.757), 矢量(46.563, 4.010, -129.999), 矢量(33.077, 6.560, -109.304), 矢量(26.769, 4, -88.758), 矢量(
			16.181, 3.046, -67.936), 矢量(25.804, 3, -66.711), 矢量(28.072, 3.998, -105.300), 矢量(60.854, 1, -113.372), 矢量(44.855, 4.010,
			-131.473), 矢量(39.700, 1, -144.094), 矢量(44.122, 0.999, -138.877), 矢量(44.350, 4.010, -130.820), 矢量(33.194, 4, -91.737), 矢量(
			30.991, 3, -72.417), 矢量(39.055, -4.947, -75.702), 矢量(45.022, -5, -69.766), 矢量(47.561, 3, -66.329), 矢量(45.596, 5.501, -54.397),
			矢量(36.368, -2.134, -56.973), 矢量(45.662, 3, -36.151), 矢量(67.234, 9.399, -36.279), 矢量(43.556, 3, -69.757), 矢量(36.668, -2.134,
			-57.072), 矢量(53.683, 8.908, -36.387), 矢量(82.606, 3, -33.352), 矢量(86.119, 3.010, -29.821), 矢量(77.563, 6, 6.752), 矢量(94.505,
			6.058, 42.927), 矢量(91.745, 6, 9.719), 矢量(85.001, 6.183, 51.283), 矢量(81.151, 2.845, 28.890), 矢量(72.629, 1.010, 20.003), 矢量(
			77.622, 6.010, 6.080), 矢量(75.526, 10, 7.506), 矢量(69.811, 9.010, 12.958), 矢量(67.433, 9, 25.709), 矢量(98.874, 2.745, -16.184), 矢量(
			67.245, -2.905, -13.682), 矢量(64.361, -2.993, -16.969), 矢量(69.946, 13.739, -37.547), 矢量(53.419, 8.734, -38.662), 矢量(35.716,
			3.046, -47.739), 矢量(45.993, 3, -36.446), 矢量(57.496, 3, -54.121), 矢量(47.804, 3, -66.313), 矢量(31.689, -5.149, -56.307), 矢量(
			34.071, -1.429, -53.736), 矢量(39.803, -5.012, -50.229), 矢量(43.110, -0.510, -49.171), 矢量(65.056, -3.141, -26.305), 矢量(62.097,
			2.028, -22.853), 矢量(73.527, -3.139, -32.081), 矢量(74.748, 2.107, -34.640), 矢量(59.518, 3, -52.439), 矢量(55.779, 8.139, -48.965),
			矢量(48.108, 3.046, -65.826), 矢量(38.250, -5.021, -77.715), 矢量(14.081, 3.045, -70.069), 矢量(26.826, 0.009, -105.191), 矢量(31.781, 4,
			-103.478), 矢量(42.742, -6.137, -119.077), 矢量(36.246, 0, -112.562), 矢量(33.140, 6.561, -109.766), 矢量(39.015, 0, -100.452), 矢量(
			31.313, 6.225, -92.990), 矢量(15.589, -2, -132.552), 矢量(37.649, 4.010, -124.211), 矢量(61.452, -7.192, -141.705), 矢量(60.992, 1,
			-115.213), 矢量(27.284, 3.013, -84.642), 矢量(16.503, -5, -70.262), 矢量(29.458, 6.938, -90.962), 矢量(38.373, -5.020, -77.208), 矢量(
			56.069, 3, -52.942), 矢量(47.966, -5, -68.898), 矢量(34.972, 3, -47.797), 矢量(62.694, -3.003, -16.511), 矢量(83.645, 6, 1.309), 矢量(
			97.334, 1, 12.426), 矢量(87.994, 6, 12.362), 矢量(75.569, 9, 22.556), 矢量(59.696, 8.354, 20.334), 矢量(51.531, 9, 9.279), 矢量(41.032,
			3, 7.798), 矢量(49.293, 9, 6.813), 矢量(56.965, 9.010, 4.911));
		全局.SecondaryFireState = 数组(假, 假, 真, 真, 真, 真, 真, 真, 假, 真, 真, 真, 假, 假, 假, 真, 真, 真, 假, 真, 假, 假, 真, 真, 真, 假, 真, 真, 假, 真, 真, 真, 真, 真, 假,
			真, 假, 假, 假, 真, 真, 假, 真, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 假, 假, 真, 假, 假, 真, 真, 真, 假, 假, 假, 假, 假, 假, 真, 真, 真, 真, 真, 假, 真, 真, 真,
			假, 真, 真, 真, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 矢量(21.742, -1.910,
			-129.950), 假, 矢量(63.864, -6.380, -131.746), 矢量(36.918, 0.092, -95.332), 假, 矢量(23.858, -5.068, -82.402), 假, 矢量(44.188, -5.058,
			-60.366), 假, 矢量(41.762, -5.059, -62.347), 假, 矢量(74.739, -3.006, -9.533), 假, 假, 假, 假, 假, 假, 假, 假);
		全局.SpherePosition = 数组(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 矢量(60.568, 6.003, 5.043));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  多拉多")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(多拉多);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(7.501, -1.979, 20.268), 矢量(9.425, 2.182, 24.352), 矢量(5.461, 2.987, 5.502), 矢量(-6.963, -0.152, 9.501),
			矢量(-7.579, 8.131, 5.572), 矢量(29.830, 11, -23.225), 矢量(35.486, 9, 3.529), 矢量(91.904, 11.300, 5.028), 矢量(93.985, 18.361, 6.260),
			矢量(98.765, 11, -1.327), 矢量(105.351, 18, -5.411), 矢量(113.691, 8.035, -18.480), 矢量(118.449, 15.951, -11.027), 矢量(86.639, 11.280,
			14.589), 矢量(85.205, 20, 16.079), 矢量(20.398, 4.035, -21.297), 矢量(29.562, 11, -22.703), 矢量(22.381, 9.860, -3.533), 矢量(-2.614,
			8.131, -0.974), 矢量(10.498, 9.500, 12.067), 矢量(29.810, 1.021, 15.384), 矢量(30.146, 10.689, 20.423));
		全局.SecondaryFireState = 数组(假, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 假, 真, 假, 真, 假, 假, 假, 假, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"),
			自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"),
			自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"), 自定义字符串("栀子"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 圣诞节国王大道 萌新+")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(圣诞节国王大道);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(4.237, 6.026, -44.016), 矢量(4.502, 6.026, -37.056), 矢量(5.726, 6.353, -28.385), 矢量(-2.527, 4.531,
			-26.504), 矢量(-12.399, 6.110, -16.238), 矢量(-16.805, 6, -1.426), 矢量(-2.556, 5.290, 2.544), 矢量(2.428, 6.026, -34.952), 矢量(-27.596,
			6, -45.219), 矢量(-38.781, 0.051, -23.568), 矢量(-68.053, 4.500, -34.892), 矢量(-66.979, 5.095, -15.071), 矢量(-60.089, 4.956,
			-17.790), 矢量(-40.059, -0.143, -25.548), 矢量(-6.085, 4.531, -26.035), 矢量(-1.980, 5.307, 0.262), 矢量(16.551, 6, 15.531), 矢量(-3.354,
			5.221, 1.763), 矢量(-26.298, 6, 8.348), 矢量(-10.307, 16.917, 5.690), 矢量(-13.796, 6.230, -14.142), 矢量(-5.570, 4.531, -25.011), 矢量(
			1.978, 6.026, -34.557), 矢量(-26.624, 6, -47.598), 矢量(-29.035, 9.163, -17.177), 矢量(-47.735, 9.123, -36.819), 矢量(-92.566, 7.489,
			-29.917), 矢量(-88.307, 6.930, -14.610), 矢量(-60.455, 3, -4.672), 矢量(-57.437, 5.135, -16.808), 矢量(-47.634, 9.123, -36.816), 矢量(
			-34.174, 9, -34.377), 矢量(4.658, 6.784, -12.387), 矢量(9.543, 6, -15.993), 矢量(-4.043, 13.996, 18.111), 矢量(-11.387, 1.818,
			-33.292), 矢量(-22.802, -0.124, -27.976), 矢量(-29.226, 9, -16.241), 矢量(-34.933, 9, -34.173), 矢量(-86.764, 6.933, -18.195), 矢量(
			-126.485, -1.225, -1.035), 矢量(-151.007, 0.071, 4.869), 矢量(-116.043, 6.100, 5.694), 矢量(-147.439, -2.929, 37.338), 矢量(-145.607,
			1.134, 35.482), 矢量(-138.716, -2.929, 40.436), 矢量(-136.718, 0.081, 46.247), 矢量(-142.550, -2.929, 36.612), 矢量(-146.885, 0.071,
			45.244), 矢量(-146.063, 1.082, 35.880), 矢量(-131.189, 1, -3.599), 矢量(-118.856, -1.289, -9.605), 矢量(-119.211, 3.036, -11.229), 矢量(
			-118.829, -1.289, -9.660), 矢量(-119.189, 1.071, -14.974), 矢量(-117.615, -1.206, -5.449), 矢量(-88.468, 6.933, -9.332), 矢量(-82.921,
			0.447, -23.622), 矢量(-92.890, 7.488, -29.678), 矢量(-83.588, 0.532, -42.141), 矢量(-79.979, 4.500, -42.643), 矢量(-61.598, 0.383,
			-16.875), 矢量(-59.029, 4.956, -17.105), 矢量(-65.711, -0.014, -33.875), 矢量(-67.796, 4.500, -35.171), 矢量(-26.195, -0.125, -25.134),
			矢量(-7.614, 6, -42.014), 矢量(-1.443, 0.036, -35.818), 矢量(1.732, 6.026, -37.071), 矢量(-2.397, 0.045, -27.844), 矢量(5.694, 6.265,
			-27.319), 矢量(-11.631, 6.110, -16.787), 矢量(3.303, 6.774, -9.587), 矢量(-6.009, 0.498, 3.735), 矢量(-3.104, 5.245, 1.295), 矢量(-3.608,
			-0.122, -4.687), 矢量(3.345, 6.774, -9.174), 矢量(6.091, 0.067, -21.093), 矢量(-3.396, 5.308, 3.484), 矢量(-5.043, -0.083, -1.364), 矢量(
			2.423, 6.026, -34.853), 矢量(3.409, -0.133, -26.510), 矢量(-26.102, 6, -43.060), 矢量(-24.942, -0.119, -29.676), 矢量(5.796, 6.110,
			-25.659), 矢量(-5.205, 0.070, -10.390), 矢量(-4.468, 5.095, 3.671), 矢量(-7.329, -0.091, 7.861), 矢量(-5.615, 8.944, -22.637));
		全局.SecondaryFireState = 数组(假, 假, 假, 真, 真, 真, 真, 真, 真, 真, 真, 假, 真, 真, 真, 真, 真, 真, 真, 假, 假, 假, 真, 真, 真, 真, 假, 真, 真, 真, 假, 真, 假, 真, 真,
			假, 真, 真, 真, 真, 真, 真, 真, 假, 假, 假, 假, 假, 假, 真, 假, 假, 假, 假, 假, 真, 假, 真, 假, 假, 真, 假, 真, 假, 真, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假,
			假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 矢量(-105.944, 0.587, -8.516), 假, 矢量(-97.821, 1.809, -20.359), 假, 假,
			假, 假, 假, 假, 假, 矢量(-13.752, -0.034, -32.514), 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 矢量(-10.698, -0.032, -2.890), 假, 矢量(-1.719, 0.365,
			-19.399), 假, 矢量(-9.370, 0.203, -33.802), 假, 矢量(-14.304, -0.034, -32.921), 假, 矢量(0.970, -0.019, -11.442), 假, 矢量(-7.223, -0.031,
			-7.390));
		全局.Creator = 数组(自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(
			""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""),
			自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(
			""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""),
			自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(
			""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""),
			自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(
			""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""),
			自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)     国王大道")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		"把这个条件点开后在最下面选择成当"
		当前地图 == 地图(国王大道);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-4.049, -0.114, -2.351), 矢量(2.983, 6.026, -35.475), 矢量(4.011, 0.070, -28.940), 矢量(-26.636, 6,
			-44.155), 矢量(-27.018, 0.106, -33.911), 矢量(5.438, 6.110, -28.555), 矢量(0.354, -0.080, -15.968), 矢量(-18.921, 6.010, -2.158), 矢量(
			-20.462, 0.076, -7.031), 矢量(1.778, 6.774, 0.547), 矢量(-0.185, 0.075, 13.147), 矢量(-26.458, 6, 10.221), 矢量(-21.888, -0.125,
			17.721), 矢量(15.665, 6.025, 15.652), 矢量(-9.950, -0.113, -21.821), 矢量(-31.366, 9.067, -33.994), 矢量(-41.227, 0.062, -30.819), 矢量(
			-60.199, 4.956, -16.924), 矢量(-65.846, -0.121, -31.630), 矢量(-48.368, 9.123, -36.798), 矢量(-29.485, 9, -15.894), 矢量(-62.169,
			-0.330, -28.761), 矢量(-68.627, -0.012, -9.324), 矢量(-69.949, 0, -2.276), 矢量(-87.641, 6.931, -16.313), 矢量(-77.838, 0.117,
			-22.833), 矢量(-88.713, 6.929, -5.483), 矢量(-131.898, 6.315, 8.004), 矢量(-125.600, -1.257, 16.202), 矢量(-137.645, 7.071, 33.500),
			矢量(-144.776, -3.204, 31.538), 矢量(-143.666, 7.128, 9.808), 矢量(-139.453, -2.687, 21.656), 矢量(-131.582, 6.315, 13.863), 矢量(
			-125.383, -1.224, -3.339), 矢量(-89.234, 6.930, -8.391), 矢量(-90.311, 0.854, -12.991), 矢量(-66.588, 5.021, -14.493), 矢量(-80.480,
			4.500, -41.986), 矢量(-49.826, 9.123, -37.743), 矢量(-62.085, -0.346, -34.809), 矢量(-34.838, 9, -34.604), 矢量(-20.623, -0.104,
			-29.977), 矢量(-28.750, 8.438, -17.907), 矢量(-21.906, -0.104, -29.287), 矢量(-2.530, 12.760, -24.963), 矢量(-5.077, -0.140, -28.469),
			矢量(4.146, 6.120, -30.581), 矢量(-2.870, 13.904, 17.194), 矢量(-2.667, 14.094, -24.091), 矢量(6.935, 0.061, -17.632), 矢量(-2.521,
			13.972, -24.118));
		全局.SecondaryFireState = 数组(真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 真, 真, 真, 真, 假, 真, 真, 真, 真, 假, 真, 假, 真, 真, 假, 真, 假, 真, 假, 真, 假, 真,
			假, 真, 真, 真, 假, 真, 假, 真, 假, 真, 假, 真, 真, 真, 假, 真);
		全局.UltimateState = 数组(假, 矢量(-3.199, -0.035, -19.390), 假, 矢量(-8.905, -0.036, -33.250), 假, 矢量(-14.478, -0.038, -34.148), 假, 矢量(
			-10.695, -0.031, -2.523), 假, 矢量(-9.442, 0.165, -9.502), 假, 矢量(-10.780, -0.021, 10.249), 假, 矢量(0.942, 0.005, 7.989), 假, 矢量(
			-11.828, 0.050, -32.626), 假, 矢量(-64.906, -0.249, -32.694), 假, 矢量(-40.682, 0.152, -30.564), 矢量(-24.615, 0.133, -18.703), 假, 矢量(
			-66.815, -0.245, -18.426), 假, 矢量(-94.317, 1.943, 2.343), 假, 矢量(-96.427, 1.078, -20.023), 矢量(-126.793, -1.152, -5.184), 假, 矢量(
			-140.310, -3.129, 29.682), 假, 矢量(-153.058, -2.821, 7.332), 假, 矢量(-128.397, -1.262, 26.073), 假, 矢量(-106.246, 0.557, -8.465), 假,
			矢量(-78.594, 4.093, -47.084), 矢量(-71.120, 0.298, -44.497), 矢量(-70.465, 4.592, -38.392), 假, 矢量(-37.577, 0.162, -34.910), 假, 矢量(
			-30.084, 0.226, -34.674), 假, 矢量(-13.605, -0.035, -32.875), 假, 矢量(-3.224, 0.076, -45.767), 矢量(1.924, 0.120, 5.696), 矢量(-7.792,
			-0.033, -7.964), 假, 矢量(-12.567, 0.179, -20.358));
		全局.Creator = 数组(自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(
			""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""),
			自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串("小枫"),
			自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("Exit"), 自定义字符串(
			"Exit"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("Exit"), 自定义字符串("小枫"), 自定义字符串("Exit"), 自定义字符串("小枫"), 自定义字符串("小枫"), 自定义字符串("小枫"),
			自定义字符串("别停我小胖还可以"), 自定义字符串("别停我小胖还可以"), 自定义字符串("别停我小胖还可以"), 自定义字符串("别停我小胖还可以"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 里阿尔托")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(里阿尔托);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(105.885, -1.250, -5.995), 矢量(105.200, 5.750, -32.925), 矢量(53.500, -0.240, -36.850), 矢量(75.090, 3.750,
			-24.800), 矢量(53.364, -0.250, -74.584), 矢量(63.965, 4.750, -40.537), 矢量(74.802, 3.760, -25.294), 矢量(66.305, -1.064, -33.497), 矢量(
			97.712, -0.250, -44.382), 矢量(85.659, 3.750, -33.732), 矢量(31.043, 0.810, -38.860), 矢量(10.513, -0.250, -52.253), 矢量(2.131, 3.750,
			-36.063), 矢量(0.479, -0.419, -44.638), 矢量(-16.575, 5.745, -48.888), 矢量(-26.638, -1.240, -36.229), 矢量(-17.608, 1.413, -38.582),
			矢量(-16.411, 5.745, -53.456), 矢量(-36.392, -1.240, -60.040), 矢量(-4.362, 5.798, -42.474), 矢量(-10.771, 5.760, -70.861), 矢量(-8.701,
			5.770, -53.700), 矢量(-39.887, -1.250, -67.188), 矢量(-36.741, 4.750, -78.834), 矢量(-13.896, -0.250, -77.619), 矢量(-11.186, 5.750,
			-78.122));
		全局.SecondaryFireState = 数组(真, 真, 真, 真, 真, 假, 假, 真, 假, 真, 真, 假, 假, 真, 假, 假, 假, 假, 真, 真, 假, 真, 真, 真, 假);
		全局.UltimateState = 数组(假, 矢量(105.596, -1.160, -15.819), 假, 矢量(61.380, -0.070, -50.450), 假, 矢量(60.402, -0.079, -63.933), 假, 假, 矢量(
			70.756, -0.309, -50.193), 假, 假, 矢量(29.492, -0.157, -61.063), 假, 假, 矢量(-14.219, -1.309, -40.229), 假, 假, 假, 假, 矢量(-17.674,
			-1.308, -56.890), 假, 假, 假, 矢量(-32.941, -1.115, -62.427), 假, 假);
		全局.Creator = 数组(自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(
			""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""),
			自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 佩特拉")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(佩特拉);
		当前游戏模式 == 游戏模式(团队死斗);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(7.383, -11.660, 64.383), 矢量(26.929, -5.493, 32.151), 矢量(19.046, -11.264, 38.436), 矢量(-6.906, -0.874,
			-0.436), 矢量(16.917, -1.194, -1.699), 矢量(32.283, -9.498, 22.720), 矢量(-12.209, -3, 25.309), 矢量(0.137, -9.428, 2.301), 矢量(-1.712,
			-9.665, 17.903), 矢量(-0.832, -0.950, 19.168), 矢量(-23.850, -9.879, -0.404), 矢量(0.150, 0.036, 13.980), 矢量(38.934, 11.119, 31.612),
			矢量(22.771, 6.367, 21.033), 矢量(5.488, -9.529, 18.028), 矢量(5.165, -0.950, 18.990), 矢量(31.302, -9.651, 24.352));
		全局.SecondaryFireState = 数组(真, 假, 假, 假, 真, 真, 假, 假, 假, 真, 假, 真, 假, 假, 假, 真);
		全局.UltimateState = 数组(假, 矢量(15.912, -12.553, 51.693), 假, 假, 假, 假, 矢量(19.730, -8.997, 35.806), 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 漓江塔夜市")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(春节漓江塔夜市);
		当前游戏模式 == 游戏模式(团队死斗);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(37.432, 3.999, -13.862), 矢量(61.334, 8.992, -8.199), 矢量(84.230, 4.507, -16.839), 矢量(68.029, 5.999,
			-16.818), 矢量(52.500, 6.173, -24.168), 矢量(17.997, -0.140, -34.211), 矢量(-33.414, -1, -19.487), 矢量(-52.744, 11.064, -33.406), 矢量(
			-77.754, 3.500, -30.925), 矢量(-52.252, 7.546, -23.674), 矢量(-43.297, -1, -18.203), 矢量(-53.110, 8.339, -25.269), 矢量(-24.790, -3,
			-57.146), 矢量(17.510, -1.483, -74.386), 矢量(14.284, -0.140, -52.730), 矢量(-3.313, 8.016, -51.658));
		全局.SecondaryFireState = 数组(真, 假, 假, 假, 真, 真, 真, 假, 真, 假, 假, 真, 真, 真, 假);
		全局.UltimateState = 数组(假, 矢量(49.198, 4.092, -13.583), 假, 假, 假, 矢量(47.646, 6.105, -30.202), 矢量(-16.208, -0.048, -30.196), 矢量(-40.664,
			0.179, -34.572), 假, 矢量(-73.013, 3.677, -14.862), 假, 假, 假, 矢量(-15.951, -2.989, -62.147), 假, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  阿努比斯神殿（栀子）")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(阿努比斯神殿);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-33.082, 1.652, 22.436), 矢量(-30.052, 6.510, 28.100), 矢量(-55.690, 1.555, 41.771), 矢量(-58.659, 6.510,
			44.874), 矢量(-28.252, 1.475, 59.225), 矢量(-29.594, 9.015, 56.145), 矢量(-29.518, 1.409, 43.476), 矢量(-32.198, 10.200, 44.071), 矢量(
			-16.526, 1.512, 51.671), 矢量(-13.008, 10.434, 53.983), 矢量(-10.468, 1.484, 55.678), 矢量(-11.661, 10.584, 55.749), 矢量(-12.438,
			4.664, 88.499), 矢量(-4.492, 12.827, 86.360), 矢量(-20.513, 4.509, 37.788), 矢量(-9.426, 4.317, 42.038), 矢量(-11.779, 12.368, 47.580),
			矢量(-41.986, 1.562, 51.211), 矢量(-40.476, 10.200, 48.762), 矢量(-22.578, 10.279, 45.070), 矢量(-14.487, 8.002, 69.106), 矢量(-9.899,
			4.665, 84.318), 矢量(-12.016, 14.431, 82.900), 矢量(-14.832, 1.977, 103.153), 矢量(-16.481, 10.897, 109.045), 矢量(-21.548, 2.688,
			104.123), 矢量(-26.292, 13.294, 94.228), 矢量(-25.242, 4.616, 91.112), 矢量(-26.983, 14.217, 85.167));
		全局.SecondaryFireState = 数组(假, 真, 假, 真, 假, 真, 假, 假, 假, 假, 假, 真, 假, 真, 假, 假, 真, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.UltimateState = 数组(假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假, 假);
		全局.Creator = 数组(自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(
			""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串(
			"Exit"));
		全局.JumpState = 数组(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 假, 假, 假, 假, 假, 假, 假, 假);
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里)  玻璃渣世界（栀子）")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(暴雪世界);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-60.173, -0.206, 93.095), 矢量(-62.959, 6.329, 84.168), 矢量(-81.421, 6.760, 102.504), 矢量(-113.146,
			-3.250, 101.750), 矢量(-114.191, 4.912, 100.650), 矢量(-99.748, -1.024, 117.384), 矢量(-120.091, -0.709, 122.963), 矢量(-78.103, 0.598,
			128.390), 矢量(-56.623, 0.747, 139.224), 矢量(-36.990, 5.448, 88.120), 矢量(-28.049, 0.194, 77.295), 矢量(-10.775, -0.972, 111.366),
			矢量(28.369, 1.810, 89.168), 矢量(9.780, 0.008, 37.481), 矢量(-1.045, 6.493, 80.440), 矢量(-0.278, 1.900, 72.888), 矢量(-30.312, 12.580,
			90.313), 矢量(-18.644, 0.289, 114.763), 矢量(-46.439, -0.205, 123.133), 矢量(-60.105, 0.750, 133.429), 矢量(-52.738, 6.996, 101.784),
			矢量(-33.676, 5.856, 101.054), 矢量(-45.827, 7.278, 86.533), 矢量(-55.581, 4.681, 92.778), 矢量(-33.600, 5.879, 91.479), 矢量(-47.868,
			-0.205, 73.347), 矢量(-33.566, 13.334, 92.017), 矢量(-43.919, 4.682, 89.866), 矢量(-74.601, 0.798, 117.134), 矢量(-142.079, 0.750,
			102.950), 矢量(-114.807, 4.750, 131.452));
		全局.SecondaryFireState = 数组(假, 假, 真, 假, 假, 假, 真, 假, 真, 假, 真, 真, 真, 真, 假, 真, 假, 真, 真, 真, 假, 假, 假, 真, 假, 真, 假, 真, 真, 真);
		全局.UltimateState = 数组(0, 0, 0, 0, 0, 0, 0, 0, 0, 矢量(-50.616, 0.026, 104.902), 假, 矢量(-10.492, 1.992, 92.476), 矢量(3.872, -0.879,
			106.376), 假, 矢量(1.872, 1.151, 60.487), 假, 矢量(-13.297, 2.005, 92), 假, 矢量(-40.423, -0.113, 102.629), 矢量(-62.344, 0.237, 110.898),
			矢量(-49.830, -0.025, 123.941), 假, 假, 假, 矢量(-58.337, 6.352, 78.016), 假, 矢量(-38.576, -0.113, 81.242), 假, 矢量(-67.006, 6.542,
			85.215), 假, 矢量(-134.056, 0.610, 118.540));
		全局.Creator = 数组(自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(
			""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""),
			自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""), 自定义字符串(""));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 渣克镇")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(渣客镇);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(35.811, 8.823, -67.690), 矢量(25.020, 15.199, -88.753), 矢量(25.209, 9.579, -85.839), 矢量(14.896, 13.107,
			-45.657), 矢量(25.440, 7.127, -43.173), 矢量(-10.272, 5.805, -44.689), 矢量(-44.806, 9.488, -48.796), 矢量(-46.861, 4.445, -51.090),
			矢量(-32.120, 12.676, -29.221), 矢量(-39.517, 4.363, -27.547), 矢量(-31.813, 12.480, -67.263), 矢量(-41.290, 12.527, -80.646), 矢量(
			-35.357, 5.054, -75.655), 矢量(-24.896, 13.480, -100.153), 矢量(-30.328, 6.270, -95.499), 矢量(-63.881, 15.987, -101.078), 矢量(
			-66.560, 7.427, -120.059), 矢量(-61.417, 13.380, -149.617), 矢量(-76.616, 13.370, -147.944), 矢量(-95.691, 5.104, -131.726), 矢量(
			-97.387, 13.370, -134.918), 矢量(-96.789, 5.127, -133.045), 矢量(-72.209, 6.357, -159.403), 矢量(-67.353, 12.601, -119.638), 矢量(
			-57.146, 7.427, -123.584), 矢量(-90.527, 6.370, -134.901), 矢量(-73.312, 12.440, -107.763), 矢量(-33.738, 13.480, -97.946), 矢量(
			-22.229, 13.480, -105.161), 矢量(-47.581, 12.480, -71.944), 矢量(-20.801, 5.697, -65.522), 矢量(-47.631, 9.488, -44.469), 矢量(-36.439,
			4.668, -35.151), 矢量(-26.291, 12.759, -64.893), 矢量(-17.326, 5.193, -48.787), 矢量(19.038, 6.825, -35.371), 矢量(33.604, 8.907,
			-55.129), 矢量(10.737, 15.145, -84.502));
		全局.SecondaryFireState = 数组(真, 假, 真, 假, 真, 真, 假, 真, 假, 真, 假, 假, 真, 假, 真, 真, 真, 假, 真, 真, 假, 真, 真, 假, 真, 真, 真, 真, 真, 真, 真, 假, 真, 假, 真,
			真, 真);
		全局.UltimateState = 数组(假, 矢量(33.393, 9.001, -78.113), 假, 矢量(24.285, 8.467, -73.785), 假, 矢量(15.402, 7.861, -48.905), 矢量(-22.726,
			5.112, -51.141), 假, 矢量(-36.004, 5.677, -43.952), 假, 矢量(-40.829, 4.661, -50.376), 假, 假, 矢量(-20.193, 6.529, -89.386), 假, 矢量(
			-44.212, 7.410, -106.466), 假, 矢量(-59.557, 6.420, -134.625), 假, 假, 矢量(-86.002, 5.661, -118.786), 假, 矢量(-93.496, 6.422,
			-155.223), 矢量(-59.559, 6.489, -135.573), 假, 矢量(-68.542, 6.301, -135.998), 假, 矢量(-62.767, 12.522, -92.826), 假, 矢量(-17.382,
			13.596, -89.646), 矢量(-41.634, 12.572, -58.452), 矢量(-23.227, 4.759, -38.384), 假, 矢量(-40.883, 4.587, -49.362), 假, 矢量(-12.110,
			5.009, -35.625), 矢量(26.796, 7.387, -43.789), 矢量(32.396, 9.064, -78.997));
		全局.Creator = 数组(自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("Exit"), 自定义字符串(
			"Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("花开堪折直须折"));
	}
}

禁用 规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 沃斯卡亚")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(沃斯卡娅工业区);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(-13.456, -3.980, 79.598), 矢量(-22.246, 1.020, 105.869), 矢量(-35.116, -4.046, 104.418), 矢量(-7.152,
			1.270, 81.086), 矢量(-17.768, -3.840, 89.109), 矢量(-18.075, 2.962, 56.736), 矢量(-12.984, -3.557, 51.263), 矢量(-16.866, 2.171,
			31.600), 矢量(-22.880, -5.443, 31.446), 矢量(-18.411, 2.970, 54.085), 矢量(-27.375, -3.315, 49.676), 矢量(3.310, 1.634, 41.683), 矢量(
			-5.300, -3.729, 48.907), 矢量(-7.962, 3.096, 77.695), 矢量(-0.289, -3.299, 68.887), 矢量(-48.108, -0.053, 72.340), 矢量(-56.630,
			-4.161, 74.195), 矢量(-17.793, 1.934, 78.309), 矢量(-26.199, -3.478, 70.064), 矢量(-57.978, 2.507, 77.783), 矢量(-57.584, -4.161,
			76.941), 矢量(-63.537, 2.344, 54.515), 矢量(-66.444, -2.980, 65.870), 矢量(-88.096, 2.549, 41.768), 矢量(-87.625, -1.980, 48.480), 矢量(
			-108.056, 2.020, 74.882), 矢量(-64.109, -0.406, 78.141), 矢量(-27.270, 2.020, 104.454), 矢量(2.056, 2.020, 102.833), 矢量(-41.779,
			2.020, 99.697), 矢量(-0.795, 1.920, 96.876), 矢量(0.962, -4.227, 84.091), 矢量(-13.366, 3.159, 43.880), 矢量(-17.701, 2.954, 56.820),
			矢量(-70.943, 2.520, 53.378), 矢量(-64.705, -2.980, 61.939), 矢量(-93.367, 6.020, 39.203), 矢量(-95.943, -1.971, 41.279), 矢量(-93.795,
			6.020, 40.140), 矢量(-28.682, -3.359, 67.360), 矢量(-32.381, -3.483, 74.862), 矢量(-65.293, -2.980, 65.509), 矢量(-76.939, -1.980,
			66.810), 矢量(-44.814, -4.980, 101.599), 矢量(-42.432, 2.903, 101.380), 矢量(-96.949, 2.158, 73), 矢量(-107.177, -3.976, 69.921), 矢量(
			-109.719, 2.020, 75.793), 矢量(-54.435, 1.953, 93.919), 矢量(-12.429, -3.216, 53.663), 矢量(6.535, 1.209, 41.779), 矢量(-5.486, -2.980,
			113.496));
		全局.SecondaryFireState = 数组(真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 假, 真, 真, 真, 假, 真, 真, 真, 假, 真, 真, 假, 真, 真, 真, 假,
			真, 假, 假, 真, 假, 真, 真, 真, 假, 真, 假, 假, 真, 真, 真, 真);
		全局.UltimateState = 数组(假, 矢量(-14.639, -3.662, 95.394), 假, 矢量(-12.354, -3.316, 100.565), 假, 矢量(-24.153, -3.068, 75.592), 假, 矢量(
			-26.020, -3.454, 45.988), 假, 矢量(-26.852, -3.365, 43.729), 假, 矢量(-14.088, -3.352, 46.371), 假, 矢量(-20.869, -3.120, 68.959), 假,
			矢量(-20.159, -3.120, 69.208), 假, 矢量(-42.165, -3.802, 79.313), 假, 矢量(-46.087, -3.982, 68.105), 假, 矢量(-51.043, -3.740, 69.794), 假,
			矢量(-79.267, -1.735, 57.707), 假, 矢量(-107.086, -3.802, 67.705), 假, 假, 假, 假, 矢量(-26.094, 2.330, 102.154), 假, 矢量(-10.494, -3.207,
			66.911), 矢量(-3.012, 3.194, 44.195), 假, 假, 矢量(-79.176, -1.721, 58.729), 假, 假, 假, 假, 矢量(-61.324, -3.833, 79.728), 假, 假, 假, 假, 假,
			假, 假, 假, 矢量(-1.969, -3.438, 44.941), 假);
		全局.Creator = 数组(自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串(
			"你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"),
			自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("Exit"), 自定义字符串("你老舅"), 自定义字符串("你老舅"), 自定义字符串("你老舅"),
			自定义字符串("你老舅"), 自定义字符串("明月清风晓星尘"), 自定义字符串("明月清风晓星尘"), 自定义字符串("明月清风晓星尘"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串(
			"清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"),
			自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("清尘丶"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 圣诞节花村")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(圣诞节花村);
		当前游戏模式 == 游戏模式(突击模式);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(68.077, -1.816, 16.183), 矢量(62.455, 6, -3.806), 矢量(49.542, 6, 7.639), 矢量(51.939, -1.254, 6.748), 矢量(
			29.040, 10.426, -1.775), 矢量(11.448, 4, -77.654), 矢量(16.419, -1.862, -63.871), 矢量(-16.927, 9, -72.854), 矢量(-21.265, -0.925,
			-86.217), 矢量(3.386, 7.010, -88.097), 矢量(-12.583, -0.925, -95.888), 矢量(-14.865, 9, -71.547), 矢量(-20.281, -1.247, -26.307), 矢量(
			-1.349, 8.005, -11.514), 矢量(12.076, 6.779, -19.251), 矢量(72.027, -1.959, 0.767), 矢量(48.304, 6, 17.336), 矢量(49.217, 14.557,
			17.716), 矢量(35.364, 6, 16.772), 矢量(34.715, 13.963, 21.313), 矢量(35.548, 0.354, 17.759), 矢量(48.970, 6, -6.998), 矢量(45.886,
			-0.215, -12.794), 矢量(50.018, 6, 7.770), 矢量(2.893, 2.429, 37.655), 矢量(19.731, -1.188, 36.353), 矢量(15.172, 11.216, 24.050), 矢量(
			-15.460, -1.108, -21.735), 矢量(-20.812, -1.196, -13.111), 矢量(-38.915, 1, -62.788), 矢量(-14.577, -3.767, -57.112), 矢量(-10.251, -5,
			-60.410), 矢量(-12.355, 7.444, -91.775), 矢量(-9.207, 1, -97.989), 矢量(-0.945, 7.010, -91.012), 矢量(43.814, -2.772, -42.409), 矢量(
			16.202, -1.700, -59.554), 矢量(-10.698, 9.209, -67.790));
		全局.SecondaryFireState = 数组(真, 假, 假, 真, 真, 假, 真, 假, 真, 假, 真, 真, 真, 假, 真, 真, 假, 假, 假, 假, 真, 假, 真, 真, 假, 真, 真, 假, 真, 真, 假, 真, 假, 假, 真,
			真, 真);
		全局.UltimateState = 数组(假, 矢量(64.937, -1.826, 8.294), 假, 假, 矢量(34.041, 0.358, 8.728), 假, 假, 矢量(-3.923, 0.188, -73.659), 假, 矢量(
			-11.910, -0.749, -94.054), 假, 矢量(-21.015, -0.746, -85.778), 假, 矢量(-11.654, -0.833, -11.578), 假, 假, 矢量(65.164, -1.306, 6.296),
			假, 假, 假, 假, 矢量(35.570, 0.198, -6.745), 假, 矢量(63.518, -1.364, -11.002), 假, 假, 矢量(10.412, -0.265, 26.134), 假, 假, 矢量(-14.817,
			-0.966, -24.821), 假, 假, 矢量(-11.388, -4.253, -72.223), 假, 假, 假, 矢量(42.761, -1.264, -55.530), 矢量(3.289, -0.647, -55.996));
		全局.Creator = 数组(自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"),
			自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"), 自定义字符串("Exit"));
	}
}

规则("[自定义]导入数据(将查看器里面的全局数据导出为动作,粘贴到这里) 训练靶场")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		当前地图 == 地图(训练靶场);
		当前游戏模式 == 游戏模式(训练靶场);
	}

	动作
	{
		全局.CheckpointPosition = 数组(矢量(48.269, 1, 25.587), 矢量(36.303, 2, 24.432), 矢量(59.378, 11, 12.679), 矢量(69.952, -1.837, 14.056), 矢量(
			60.809, 4.996, 9.342), 矢量(59.913, -2, 7.200));
		全局.SecondaryFireState = 数组(假, 真, 假, 假, 假);
		全局.UltimateState = 数组(假, 假, 矢量(48.138, 2.316, 13.672), 假, 假, 假);
	}
}

规则("[自定义]允许开拓? 否则将使用导入的点位进行常规计时跑酷模式")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		禁用 全局.PioneerModeEnabled = 真;
		全局.PioneerModeEnabled = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("是否允许开拓"), 假, 0);
		全局.RGB[0] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈红"), 255, 0, 255, 0);
		全局.RGB[1] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈绿"), 255, 0, 255, 1);
		全局.RGB[2] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈蓝"), 0, 0, 255, 2);
		全局.RGB[3] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("目标点圈不透明度"), 255, 0, 255, 3);
		全局.RGB[4] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈红"), 208, 0, 255, 4);
		全局.RGB[5] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈绿"), 68, 0, 255, 5);
		全局.RGB[6] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈蓝"), 180, 0, 255, 6);
		全局.RGB[7] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("起飞点圈不透明度"), 255, 0, 255, 7);
		全局.RGB[8] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球红"), 154, 0, 255, 8);
		全局.RGB[9] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球绿"), 110, 0, 255, 9);
		全局.RGB[10] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球蓝"), 147, 0, 255, 10);
		全局.RGB[11] = 地图工坊设置整数(自定义字符串("颜色"), 自定义字符串("小球不透明度"), 255, 0, 255, 11);
	}
}

规则("[自定义]禁止连续开拓")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		禁用 全局.DisableContinuousCreation = 假;
		全局.DisableContinuousCreation = 地图工坊设置开关(自定义字符串("模式设置开关"), 自定义字符串("连续开拓"), 假, 1);
		全局.CheatRecord = 地图工坊设置开关(自定义字符串("快捷键"), 自定义字符串("跳关提醒"), 真, 0);
	}
}

规则("[自定义]落地判定是否开启")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.JudgeWhenLanding = 真;
	}
}

规则("[自定义]判定圈的大小")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.RingRadius[0] = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("目标点圈大小"), 1.500, 0.500, 4, 0);
		全局.RingRadius[1] = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串(" 起始点圈大小"), 2, 0.200, 5, 1);
		全局.RingRadius[2] = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("起飞点圈大小"), 2, 0.200, 4, 2);
		全局.SphereRadius = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("小球显示大小"), 2, 0.200, 5, 3);
		全局.SphereJudgeRadius = 地图工坊设置实数(自定义字符串("参数"), 自定义字符串("小球判定大小"), 1.8, 0.200, 5, 4);
	}
}

规则("[自定义] 进点传送")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.TeleportWhenEnterNextPosition = 假;
	}
}

规则("[自定义]一次性技能(如开启本功能,请确保技能CD大于0.5秒)")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.OneTimeAbility = 真;
	}
}

规则("[自定义]哪些技能可以使用(如果要开启大招,请关掉 英雄-设置-大招自动充能 )")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		"技能1(S)"
		全局.DefaultAliblty1Enabled = 真;
		"技能2(E)"
		全局.DefaultAliblty2Enabled = 真;
		"辅助攻击模式(右键)"
		全局.DefaultSecondaryEnabled = 真;
		"终极技能"
		全局.DefaultUltimateEnabled = 假;
	}
}

规则("[自定义]终极技能的冷却时间")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		全局.UltimateCD = 15;
	}
}

规则("全局初始化")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		关闭游戏预设通告模式;
		关闭游戏预设计分模式;
		关闭游戏预设完成条件;
		关闭游戏预设音乐模式;
		If(数量(全局.CheckpointPosition) == 0);
			全局.CheckpointPosition = 空数组;
			全局.Ability1State = 空数组;
			全局.Ability2State = 空数组;
			全局.SecondaryFireState = 空数组;
			全局.Creator = 空数组;
			全局.UltimateState = 空数组;
		End;
		全局.RoomAliveHoursLeft = 4;
		全局.PlayersData = 空数组;
		设置比赛时间(1800);
		设置目标点描述(所有玩家(所有队伍), 自定义字符串("本局游戏时间还剩：​{0}小时​{1}分钟​", 全局.RoomAliveHoursLeft, 取整(比赛时间 / 60, 下)), 可见和字符串);
		全局.PioneerLandingPosition = 无;
		全局.PioneerSpherePosition = 无;
		创建HUD文本(所有玩家(所有队伍), 自定义字符串(
			"Mode Name: Wrecking Ball Parkour\r\nCode: RM9EX\r\nDon't Forget to Star This Mode\r\nChange Map to play different Levels\r\nHave Fun!"),
			无, 无, 左边, 0, 颜色(亮紫色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(" "), 左边, 1, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(" "), 右边, 1, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
		禁用 创建HUD文本(已过滤的数组(所有玩家(所有队伍), !按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("Press Interact({0}) For Help", 输入绑定字符串(按钮(互动))), 无, 无, 左边, 2, 颜色(黄色), 颜色(
			白色), 颜色(黄色), 可见和字符串, 默认可见度);
		If(全局.PioneerModeEnabled == 真);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), !实体存在(全局.Pioneer) && 数量(全局.CheckpointPosition) == 0 && 在地面上(当前数组元素)), 自定义字符串("Interact({0})+Reload({1}) 在当前位置开拓​",
				输入绑定字符串(按钮(互动)), 输入绑定字符串(按钮(装填))), 无, 无, 左边, 1, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.GameComplete && !实体存在(全局.Pioneer) && 数量(全局.CheckpointPosition) != 0), 自定义字符串(
				"Interact({0})+Reload({1}) to Create New Level", 输入绑定字符串(按钮(互动)), 输入绑定字符串(按钮(装填))), 无, 无, 左边, 2, 颜色(橙色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), 当前数组元素.GameComplete && 实体存在(全局.Pioneer)), 自定义字符串("Current Pioneer: {0}", 全局.Pioneer), 无, 无, 左边, 0, 颜色(橙色), 颜色(白色),
				颜色(白色), 可见和字符串, 始终不可见);
			创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("Total Level:{0}", 数量(全局.CheckpointPosition) - 1), 右边, 0, 颜色(白色), 颜色(白色), 颜色(橙色), 可见和字符串, 默认可见度);
			创建HUD文本(添加至数组(添加至数组(空数组, 全局.Pioneer), 无)[1 * !(全局.PioneerLandingPosition != 无)], 自定义字符串("Press and Hold Interact({0}) to Confirm, Short Press Interact({0}) to Cancel​", 输入绑定字符串(按钮(互动))), 无, 无, 顶部, 1, 颜色(
				橙色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
			创建效果(已过滤的数组(全局.Pioneer, 全局.PioneerLandingPosition != 假), 环, 颜色(黄色), 全局.PioneerLandingPosition, 全局.RingRadius[0], 可见，位置和半径);
			创建效果(已过滤的数组(全局.Pioneer, 全局.PioneerLandingPosition != 假), 光柱, 颜色(黄色), 全局.PioneerLandingPosition, 全局.RingRadius[0], 可见，位置和半径);
			创建效果(已过滤的数组(全局.Pioneer, 全局.Pioneer.UltimateUsed != (假 || 0)), 环, 颜色(亮紫色), 全局.Pioneer.UltimateUsed, 全局.RingRadius[2], 可见，位置和半径);
			创建效果(已过滤的数组(全局.Pioneer, 全局.Pioneer.UltimateUsed != (假 || 0)), 光柱, 颜色(亮紫色), 全局.Pioneer.UltimateUsed, 全局.RingRadius[2], 可见，位置和半径);
			"小球"
			创建效果(已过滤的数组(全局.Pioneer, 全局.PioneerSpherePosition != 假), 球, 自定义颜色(全局.RGB[8], 全局.RGB[9], 全局.RGB[10], 全局.RGB[11]), 全局.PioneerSpherePosition + 矢量(0, 0.8, 0), 全局.SphereRadius, 可见，位置和半径);
			"小球图标"
			创建图标(已过滤的数组(全局.Pioneer, 全局.PioneerSpherePosition != 假), 全局.PioneerSpherePosition + 矢量(0, 0.8, 0), 加号, 可见，位置和颜色, 颜色(橙色), 真);
		Else;
			全局.BestScore[0] = 自定义字符串("无");
			全局.BestScore[1] = 0;
			创建HUD文本(所有玩家(所有队伍), 自定义字符串("Best Score: {0}/{1}S", 全局.BestScore[0], 全局.BestScore[1]), 无, 无, 左边, 0, 颜色(绿色), 颜色(白色), 颜色(白色), 可见和字符串,
			默认可见度);
		End;
	}
}

规则("玩家初始化")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		已重生(事件玩家) == 真;
	}

	动作
	{
		事件玩家.Level = 0;
        事件玩家.ScoreOfThisRound = 0;
        事件玩家.mistake = 0;
        事件玩家.cheat = 0;
		事件玩家.HintFreq = 0;
		调用子程序(ValidationPlayerData);
		传送(事件玩家, 全局.CheckpointPosition[事件玩家.Level]);
		禁用 调用子程序(ResetBall);
		事件玩家.InteractPressState = 0;
		事件玩家.IsReady = 真;
		事件玩家.FreeMode = 假;
		事件玩家.Invisible = 假;
		事件玩家.IsSpectating = 假;
		禁用 设置不可见(事件玩家, 全部);
		对所有玩家启用死亡回放(事件玩家);
		启用死亡回放时目标的HUD(事件玩家);
		创建地图文本(事件玩家.Invisible?无:所有玩家(所有队伍), 事件玩家, 事件玩家, 1, 不要截取, 可见，位置和字符串, 颜色(白色), 默认可见度);
		创建效果(已过滤的数组(事件玩家, 数量(全局.CheckpointPosition) != 0), 环, 颜色(绿色), 全局.CheckpointPosition[事件玩家.Level], 全局.RingRadius[1], 可见，位置和半径);
		创建图标(已过滤的数组(事件玩家, !事件玩家.GameComplete), 全局.CheckpointPosition[事件玩家.Level + 1], 旗帜, 可见和位置, 颜色(黄色), 真);
		创建HUD文本(已过滤的数组(事件玩家, !事件玩家.GameComplete), 自定义字符串("Level {0} Author: {1}", 事件玩家.Level + 1, 全局.Creator[事件玩家.Level]), 无, 无, 左边, 0, 颜色(橙色),
			颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
		If(全局.PioneerModeEnabled == 真);
			创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串("{0}:{1}", 事件玩家, 事件玩家.Level), 右边, 1000 - 事件玩家.Level, 颜色(白色), 颜色(白色), 颜色(橙色), 可见性，排序规则和字符串, 默认可见度);
		Else;
			创建HUD文本(已过滤的数组(事件玩家, !事件玩家.GameComplete), 无, 无, 自定义字符串("Checkpoint: {0} / {1}", 事件玩家.Level + 1, 数量(全局.CheckpointPosition) - 1), 顶部, -1,
				颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 始终不可见);
			创建HUD文本(已过滤的数组(所有玩家(所有队伍), 事件玩家.BestScore != 0), 无, 无, 自定义字符串("{0}: {2}S/Level{1}", 事件玩家, 事件玩家.Level, 事件玩家.ScoreOfThisRound), 右边,
				事件玩家.BestScore, 颜色(白色), 颜色(白色), 颜色(橙色), 可见性，排序规则和字符串, 默认可见度);
			创建HUD文本(已过滤的数组(事件玩家, 事件玩家.ScoreOfThisRound != 0), 无, 无, 事件玩家.ScoreOfThisRound, 顶部, 1, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		End;
		创建效果(已过滤的数组(事件玩家, !事件玩家.GameComplete), 环, 自定义颜色(全局.RGB[0], 全局.RGB[1], 全局.RGB[2], 全局.RGB[3]), 全局.CheckpointPosition[事件玩家.Level + 1],
			全局.RingRadius[0], 可见，位置和半径);
		事件玩家.BestScore[0] = 最后创建的实体;
		创建效果(已过滤的数组(事件玩家, !事件玩家.GameComplete), 光柱, 自定义颜色(全局.RGB[0], 全局.RGB[1], 全局.RGB[2], 全局.RGB[3]),
			全局.CheckpointPosition[事件玩家.Level + 1], 全局.RingRadius[0], 可见，位置和半径);
		事件玩家.BestScore[1] = 最后创建的实体;
		创建地图文本(已过滤的数组(事件玩家, !事件玩家.GameComplete), 自定义字符串("Come to Me!"), 全局.CheckpointPosition[事件玩家.Level + 1], 2, 不要截取, 可见，位置和字符串, 颜色(白色),
			始终不可见);
		事件玩家.BestScore[2] = 上一个文本ID;
		创建效果(已过滤的数组(事件玩家, 全局.UltimateState[事件玩家.Level + 1] != 假), 环, 自定义颜色(全局.RGB[4], 全局.RGB[5], 全局.RGB[6], 全局.RGB[7]),
			全局.UltimateState[事件玩家.Level + 1], 全局.RingRadius[2], 可见，位置和半径);
		事件玩家.BestScore[3] = 最后创建的实体;
		创建效果(已过滤的数组(事件玩家, 全局.UltimateState[事件玩家.Level + 1] != 假), 光柱, 自定义颜色(全局.RGB[4], 全局.RGB[5], 全局.RGB[6], 全局.RGB[7]),
			全局.UltimateState[事件玩家.Level + 1], 全局.RingRadius[2], 可见，位置和半径);
		事件玩家.BestScore[4] = 最后创建的实体;
		创建地图文本(已过滤的数组(事件玩家, 全局.UltimateState[事件玩家.Level + 1] != 假), 自定义字符串("Take off!"), 全局.UltimateState[事件玩家.Level + 1], 2, 不要截取, 可见，位置和字符串,
			颜色(白色), 始终不可见);
		事件玩家.BestScore[5] = 上一个文本ID;
		禁用 小字体信息(事件玩家, 自定义字符串("Press Interact{0} For Help",  输入绑定字符串(按钮(互动))));
		创建HUD文本(所有玩家(所有队伍), 自定义字符串(""), 无, 无, 左边, 0, 颜色(白色), 颜色(白色), 颜色(白色), 可见和字符串, 默认可见度);
		"小球"
		创建效果(已过滤的数组(事件玩家, 事件玩家.sphere_state == 假 && !事件玩家.GameComplete), 球, 自定义颜色(全局.RGB[8], 全局.RGB[9], 全局.RGB[10], 全局.RGB[11]), 全局.SpherePosition[事件玩家.Level + 1] + 矢量(0, 0.8, 0), 全局.SphereRadius, 可见，位置和半径);
		"小球图标"
		创建地图文本(已过滤的数组(事件玩家, 事件玩家.sphere_state == 假 && !事件玩家.GameComplete), 自定义字符串("Get Candy First"), 全局.SpherePosition[事件玩家.Level + 1] + 矢量(0, 1.5, 0), 2, 不要截取, 可见，位置和字符串,
			颜色(白色), 始终不可见);
		创建图标(已过滤的数组(事件玩家, 事件玩家.sphere_state == 假 && !事件玩家.GameComplete), 全局.SpherePosition[事件玩家.Level + 1] + 矢量(0, 0.8, 0), 加号, 可见，位置和颜色, 颜色(橙色), 真);
		调用子程序(ResetBall);
		"玩家指引HUD 在终极技能充能处"
		If(全局.Tips != 无);
			创建HUD文本(已过滤的数组(事件玩家, !事件玩家.GameComplete), 无, 无, 自定义字符串("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), 顶部, 99, 无, 无, 无, 可见, 默认可见度);
			创建HUD文本(已过滤的数组(事件玩家, !事件玩家.GameComplete), 无, 无, 自定义字符串("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), 顶部, 99, 无, 无, 无, 可见, 默认可见度);
			创建HUD文本(已过滤的数组(事件玩家, !事件玩家.GameComplete), 无, 无, 自定义字符串("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"), 顶部, 99, 无, 无, 无, 可见, 默认可见度);
			创建HUD文本(已过滤的数组(事件玩家, 全局.Tips[事件玩家.Level + 1] && !事件玩家.GameComplete && !事件玩家.FreeMode && !按钮被按下(事件玩家, 按钮(互动))), 自定义字符串(
				"{0}: ▼\n{1}\n", 英雄图标字符串(英雄(破坏球)), 全局.Tips[事件玩家.Level + 1]), 无, 无, 顶部, 100, 颜色(青绿色), 无, 无, 可见和字符串, 默认可见度);
		End;
		禁用 小字体信息(事件玩家, 自定义字符串("玩家初始化"));
	}
}

规则("删除关卡后修复玩家关卡数")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Level >= 数量(全局.CheckpointPosition);
	}

	动作
	{
		事件玩家.Level = 数量(全局.CheckpointPosition) - 1;
		事件玩家.Level = 较大(事件玩家.Level, 0);
	}
}

规则("是否完成所有关卡 假")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.Level < 数量(全局.CheckpointPosition) - 1;
	}

	动作
	{
		传送(事件玩家, 全局.CheckpointPosition[事件玩家.Level]);
		If(事件玩家.GameComplete == 真);
			事件玩家.BestScore[6] = 0;
		End;
		等待(0.100, 当为“假”时中止);
		事件玩家.GameComplete = 假;
		调用子程序(Reset);
	}
}

规则("是否完成所有关卡 真")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		(数量(全局.CheckpointPosition) == 0 || 事件玩家.Level >= 数量(全局.CheckpointPosition) - 1) == 真;
	}

	动作
	{
		事件玩家.GameComplete = 真;
		调用子程序(SetAbility);
		If(全局.PioneerModeEnabled == 假 && 事件玩家.ScoreOfThisRound != 0);
			事件玩家.LastScore = 事件玩家.ScoreOfThisRound;
			If(事件玩家.cheat == 0);
				小字体信息(所有玩家(所有队伍), 自定义字符串("{0} Finished in {1}s!", 事件玩家, 事件玩家.LastScore));
				事件玩家.BestScore = 事件玩家.ScoreOfThisRound;
				If(全局.BestScore[1] == 0 || 事件玩家.BestScore < 全局.BestScore[1]);
					全局.BestScore[0] = 自定义字符串("{0}", 事件玩家);
					全局.BestScore[1] = 事件玩家.LastScore;
				End;
			Else;
				小字体信息(所有玩家(所有队伍), 自定义字符串("{0} Finished in {1}s! But He Cheated~{2}", 事件玩家, 事件玩家.LastScore, 英雄图标字符串(英雄(破坏球))));
			End;
		End;
		停止追踪玩家变量(事件玩家, ScoreOfThisRound);
	}
}

规则("当玩家成为开拓者")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
	}

	动作
	{
		If(数量(全局.CheckpointPosition) < 1000);
			播放效果(事件玩家, 环状爆炸声音, 颜色(白色), 事件玩家, 100);
			事件玩家.FreeMode = 假;
			调用子程序(Reset);
		Else;
			小字体信息(事件玩家, 自定义字符串("Can't Create New Level Any More"));
			全局.PioneerStarted = 假;
			全局.Pioneer = 无;
		End;
		If(全局.UltimateState[事件玩家.Level + 1] != 假);
			施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
			大字体信息(事件玩家, 自定义字符串("Don't Run About"));
			调用子程序(Reset);
		End;
		事件玩家.ultimate_log = 自定义字符串("已关闭");
		根据条件中止(事件玩家 != 全局.Pioneer);
		If(事件玩家.ultimate_log == 自定义字符串("已开启"));
			事件玩家.ultimate_worked = 真;
			小字体信息(事件玩家, 自定义字符串("Ultimate Jump Mode"));
		Else;
			事件玩家.ultimate_worked = 假;
			小字体信息(事件玩家, 自定义字符串("Normal Mode"));
		End;
		事件玩家.UltimateUsed = 假;
	}
}

规则("记录玩家辅助攻击使用情况")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.SecondaryFireUsed == 假;
		正在使用辅助武器(事件玩家) == 真;
	}

	动作
	{
		事件玩家.SecondaryFireUsed = 真;
	}
}

规则("终极技能模拟CD(开始CD)")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.DefaultUltimateEnabled == 真;
		正在使用终极技能(事件玩家) == 假;
		终极技能充能百分比(事件玩家) <= 1;
	}

	动作
	{
		事件玩家.UltimateCharge = 0;
	}
}

规则("一次性辅助攻击模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.OneTimeAbility == 真;
		事件玩家.FreeMode == 假;
		(!事件玩家.GameComplete || 事件玩家 == 全局.Pioneer) == 真;
		事件玩家.SecondaryFireUsed == 真;
		正在使用辅助武器(事件玩家) == 假;
	}

	动作
	{
		等待(0.500, 当为“假”时中止);
		If(相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius || !在地面上(事件玩家));
			If(事件玩家 != 全局.Pioneer || 全局.PioneerLandingPosition == 无);
				设置辅助攻击模式启用(事件玩家, 假);
			End;
		End;
	}
}

规则("一次性技能2")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.OneTimeAbility == 真;
		事件玩家.FreeMode == 假;
		(!事件玩家.GameComplete || 事件玩家 == 全局.Pioneer) == 真;
		事件玩家.Ability2Used == 真;
		正在使用技能 2(事件玩家) == 假;
	}

	动作
	{
		等待(0.500, 当为“假”时中止);
		If(相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius || !在地面上(事件玩家));
			If(事件玩家 != 全局.Pioneer || 全局.PioneerLandingPosition == 无);
				设置启用技能 2(事件玩家, 假);
			End;
		End;
	}
}

规则("终极技能模拟CD")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.DefaultUltimateEnabled == 真;
		终极技能充能百分比(事件玩家) != 100;
		正在使用终极技能(事件玩家) == 假;
	}

	动作
	{
		等待(0.160, 当为“假”时中止);
		事件玩家.UltimateCharge += 16 / 全局.UltimateCD;
		设置终极技能充能(事件玩家, 事件玩家.UltimateCharge);
		如条件为”真“则循环;
	}
}

规则("在地面上时 重置一次性技能")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.IsReady == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius;
	}

	动作
	{
		禁用 等待(0.032, 当为“假”时中止);
		If(事件玩家.ultimate_worked == 假 || 水平速度(事件玩家) < 6.900);
			调用子程序(SetAbility);
		End;
	}
}

规则("在地面上时 重置技能CD")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.IsReady == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius;
		技能冷却时间(事件玩家, 按钮(辅助攻击模式)) + 技能冷却时间(事件玩家, 按钮(技能1)) + 技能冷却时间(事件玩家, 按钮(技能2)) != 0;
	}

	动作
	{
		等待(0.032, 当为“假”时中止);
		设置技能冷却(事件玩家, 按钮(辅助攻击模式), 0);
		设置技能冷却(事件玩家, 按钮(技能1), 0);
		设置技能冷却(事件玩家, 按钮(技能2), 0);
	}
}

规则("禁用重生室")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		在重生室中(事件玩家) == 真;
		数量(全局.CheckpointPosition) != 0;
		(事件玩家 == 全局.Pioneer || !事件玩家.GameComplete) == 真;
	}

	动作
	{
		调用子程序(Reset);
	}
}

规则("小球拾取")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.sphere_state == 假;
		事件玩家.IsReady == 真;
		事件玩家.FreeMode == 假;
		全局.Pioneer != 事件玩家;
		事件玩家.GameComplete == 假;
		相距距离(事件玩家, 全局.SpherePosition[事件玩家.Level + 1]) <= 全局.SphereJudgeRadius;
	}

	动作
	{
		事件玩家.sphere_state = !事件玩家.GameComplete && !事件玩家.FreeMode ? 真 : 假;
		小字体信息(事件玩家, 自定义字符串("Got Candy!"));
		播放效果(事件玩家, 正面状态施加声音, 无, 事件玩家, 80);
	}
}

规则("闯关者到达下一关")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.IsReady == 真;
		事件玩家.FreeMode == 假;
		全局.Pioneer != 事件玩家;
		事件玩家.GameComplete == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level + 1]) <= 全局.RingRadius;
		(!全局.JudgeWhenLanding || 在地面上(事件玩家)) == 真;
		事件玩家.ultimate_worked == 假;
	}

	动作
	{
		If(!事件玩家.sphere_state);
			调用子程序(Reset);
			小字体信息(事件玩家, 自定义字符串("Get Candy First!"));
			播放效果(事件玩家, 爆炸声音, 无, 事件玩家, 100);
			中止;
		End;
		播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 100);
		事件玩家.Level += 1;
		事件玩家.HintFreq = 0;
		调用子程序(EditPlayerData);
		If(事件玩家.Level < 数量(全局.CheckpointPosition));
		    调用子程序(Reset);
        End;
	}
}

规则("闯关者圈外触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer != 事件玩家;
		事件玩家.FreeMode == 假;
		事件玩家.GameComplete == 假;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level + 1]) > 全局.RingRadius[0];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假);
			等待(0.016, 当为“假”时中止);
            事件玩家.mistake += 1;
			调用子程序(Reset);
		End;
	}
}

规则("开拓者圈外触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		事件玩家.FreeMode == 假;
		全局.PioneerLandingPosition == 无;
		全局.PioneerStarted == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假);
			If(相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) < 全局.RingRadius[1] * 2);
				开始规则(MessageCall, 无动作);
				调用子程序(Reset);
				If(事件玩家.UltimateUsed != 假);
					If(相距距离(事件玩家.UltimateUsed, 所选位置(事件玩家)) >= 2 * 全局.RingRadius[2]);
						开始规则(MessageCall, 无动作);
						调用子程序(Reset);
					End;
				End;
			Else If(在重生室中(事件玩家) == 假);
				播放效果(事件玩家, 状态爆炸声音, 颜色(白色), 事件玩家, 100);
				全局.PioneerLandingPosition = 所选位置(事件玩家);
				设置启用技能 2(事件玩家, 事件玩家.Ability2Used);
				设置辅助攻击模式启用(事件玩家, 事件玩家.SecondaryFireUsed);
				设置启用终极技能(事件玩家, 事件玩家.UltimateUsed);
			End;
		End;
	}
}

规则("闯关者圈内触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer != 事件玩家;
		事件玩家.FreeMode == 假;
		事件玩家.GameComplete == 假;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius[1];
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level + 1]) > 全局.RingRadius[0];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假 || 水平速度(事件玩家) < 6.900);
			事件玩家.sphere_state = 全局.SpherePosition[事件玩家.Level + 1] ? 假: 真;
		End;
	}
}

规则("开拓者圈内触地")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		事件玩家.FreeMode == 假;
		全局.PioneerLandingPosition == 无;
		全局.PioneerStarted == 真;
		在地面上(事件玩家) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 全局.RingRadius[1];
	}

	动作
	{
		If(事件玩家.ultimate_worked == 假);
			全局.PioneerSpherePosition = 无;
		End;
	}
}

规则("开拓者离开比赛")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	条件
	{
		全局.PioneerModeEnabled == 真;
		事件玩家 == 全局.Pioneer;
	}

	动作
	{
		全局.PioneerStarted = 假;
		全局.PioneerLandingPosition = 无;
		全局.Pioneer = 数组随机取值(已过滤的数组(所有玩家(所有队伍), 当前数组元素.GameComplete && 当前数组元素 != 事件玩家 && 当前数组元素 != 最后(全局.Creator)));
	}
}

规则("[子程序] 设置技能")
{
	事件
	{
		子程序;
		SetAbility;
	}

	动作
	{
		事件玩家.Ability1Used = 假;
		事件玩家.Ability2Used = 假;
		事件玩家.SecondaryFireUsed = 假;
		If(事件玩家.GameComplete || 事件玩家.FreeMode || 事件玩家.IsSpectating);
			If(全局.Pioneer != 事件玩家);
				可用按钮(事件玩家, 按钮(技能1));
			End;
			设置启用技能 1(事件玩家, 全局.DefaultAliblty1Enabled && 全局.Pioneer != 事件玩家);
			设置启用技能 2(事件玩家, 全局.DefaultAliblty2Enabled);
			设置辅助攻击模式启用(事件玩家, 全局.DefaultSecondaryEnabled);
			设置启用终极技能(事件玩家, 全局.DefaultUltimateEnabled);
			可用按钮(事件玩家, 按钮(主要攻击模式));
		Else;
			设置启用技能 1(事件玩家, 全局.Ability1State[事件玩家.Level]);
			设置启用技能 2(事件玩家, 全局.Ability2State[事件玩家.Level]);
			设置辅助攻击模式启用(事件玩家, 全局.SecondaryFireState[事件玩家.Level]);
			设置终极技能充能(事件玩家, 100);
			禁用 事件玩家.ultimate_outline_countdown = 假;
			禁用按钮(事件玩家, 按钮(主要攻击模式));
		End;
	}
}

规则("相移")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		具有状态(事件玩家, 相移) == 假;
	}

	动作
	{
		等待(0.250, 无视条件);
		清除状态(事件玩家, 相移);
		设置状态(事件玩家, 无, 相移, 9999);
	}
}

规则("房间存活倒计时")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		比赛时间 == 0;
		全局.RoomAliveHoursLeft != 0;
	}

	动作
	{
		等待(1, 无视条件);
		全局.RoomAliveHoursLeft -= 1;
		设置比赛时间(3600);
	}
}

规则("定时更新目标点描述")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
		If(全局.RoomAliveHoursLeft == 0 && 比赛时间 == 0);
			设置目标点描述(所有玩家(所有队伍), 自定义字符串("Room will Restart"), 可见和字符串);
		Else;
			设置目标点描述(所有玩家(所有队伍), 自定义字符串("Times Left: {0} H {1} Min", 全局.RoomAliveHoursLeft, 取整(比赛时间 / 60, 下)), 可见和字符串);
		End;
		等待(1, 无视条件);
		If (全局.CheatRecord != 假);
			If(数量(全局.cheat_log) >= 1);
				大字体信息(所有玩家(所有队伍), 全局.cheat_log[0]);
				等待(1, 无视条件);
				修改全局变量(cheat_log, 根据索引从数组中移除, 0);
			End;
		End;
		循环;
	}
}

规则("[子程序 ] 重置当前关卡")
{
	事件
	{
		子程序;
		Reset;
	}

	动作
	{
		禁用 小字体信息(事件玩家, 自定义字符串("reset"));
		While(全局.JumpState[事件玩家.Level] == 自定义字符串("跳跃点"));
			事件玩家.Level += 1;
		End;
		If(全局.Pioneer != 事件玩家);
			事件玩家.ultimate_log = 空数组;
		End;
		事件玩家.ultimate_info = 空数组;
		调用子程序(ResetBall);
		设置状态(事件玩家, 无, 定身, 0.250);
		事件玩家.UltimateUsed = 假;
		事件玩家.IsReady = 假;
		事件玩家.sphere_state = 全局.SpherePosition[事件玩家.Level + 1] ? 假: 真;
		If(事件玩家.sphere_state == 假 && 事件玩家.HintFreq % 5 == 1);
			小字体信息(事件玩家, 自定义字符串("Get Candy First！"));
		End;
		事件玩家.HintFreq += 1;
		If(水平速度(事件玩家) >= 6.900);
			设置辅助攻击模式启用(事件玩家, 假);
			设置启用技能 1(事件玩家, 假);
			设置启用技能 2(事件玩家, 假);
			设置启用终极技能(事件玩家, 假);
		End;
		If(事件玩家 == 全局.Pioneer);
			全局.PioneerStarted = 假;
			全局.PioneerLandingPosition = 无;
			全局.PioneerSpherePosition = 无;
		End;
		If(!全局.PioneerModeEnabled && 事件玩家.Level == 0);
            停止追踪玩家变量(事件玩家, ScoreOfThisRound);
            事件玩家.ScoreOfThisRound = 0;
        End;
		施加推力(事件玩家, 方向(眼睛位置(事件玩家) + 眼睛位置(事件玩家) * 面朝方向(事件玩家), 所选位置(事件玩家)), 1, 至地图, 取消相反运动);
		等待(0.032, 无视条件);
		If((全局.TeleportWhenEnterNextPosition || 相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius) && 数量(
			全局.CheckpointPosition) != 0);
			传送(事件玩家, 全局.CheckpointPosition[事件玩家.Level]);
		End;
		事件玩家.IsReady = 真;
		If(事件玩家 == 全局.Pioneer);
			全局.PioneerStarted = 真;
		End;
		设置技能冷却(事件玩家, 按钮(辅助攻击模式), 0);
		设置技能冷却(事件玩家, 按钮(技能1), 0);
		设置技能冷却(事件玩家, 按钮(技能2), 0);
		施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
		If(全局.UltimateState[事件玩家.Level + 1] != (假 || 0));
			事件玩家.ultimate_info[0] = 全局.CheckpointPosition[事件玩家.Level];
			事件玩家.ultimate_info[1] = 全局.UltimateState[事件玩家.Level + 1];
			事件玩家.ultimate_info[2] = 事件玩家.ultimate_info[0] + 方向(事件玩家.ultimate_info[0], 事件玩家.ultimate_info[1]) * 1000;
			事件玩家.ultimate_info[3] = 与此方向的水平角度(方向(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]));
			事件玩家.ultimate_worked = 真;
		Else;
			事件玩家.ultimate_worked = 假;
			事件玩家.ultimate_info = 空数组;
		End;
		If(事件玩家.ultimate_log == 自定义字符串("已开启"));
			事件玩家.ultimate_worked = 真;
		End;
		If(事件玩家.Level < 事件玩家.cheat);
		    事件玩家.cheat = 0;
        End;
		禁用 调用子程序(SetAbility);
	}
}

规则("阵亡复位")
{
	事件
	{
		玩家阵亡;
		双方;
		全部;
	}

	条件
	{
		被攻击方.IsSpectating == 假;
	}

	动作
	{
		被攻击方.IsReady = 假;
		If(全局.Pioneer == 事件玩家 && 全局.PioneerLandingPosition == 无);
			全局.PioneerStarted = 假;
		End;
		If(!全局.PioneerModeEnabled && 事件玩家.Level == 0);
			停止追踪玩家变量(被攻击方, ScoreOfThisRound);
			被攻击方.ScoreOfThisRound = 0;
		End;
		被攻击方.FacingDirection = 面朝方向(被攻击方);
		清除状态(被攻击方, 相移);
		设置状态(被攻击方, 无, 相移, 16200);
		等待(0.032, 无视条件);
		If(全局.Pioneer == 事件玩家);
			If(全局.PioneerLandingPosition != 无);
				传送(被攻击方, 全局.PioneerLandingPosition);
			Else;
				传送(被攻击方, 全局.CheckpointPosition[被攻击方.Level]);
			End;
			等待(0.016, 无视条件);
			复生(被攻击方);
		Else;
			If(事件玩家.FreeMode || 事件玩家.GameComplete);
				禁用 小字体信息(事件玩家, 自定义字符串("传送到可行走位置"));
				传送(被攻击方, 最近的可行走位置(所选位置(被攻击方)));
				复活(被攻击方);
			Else If(数量(全局.CheckpointPosition) != 0);
				禁用 小字体信息(事件玩家, 自定义字符串("传送到闯关点"));
				传送(被攻击方, 全局.CheckpointPosition[被攻击方.Level]);
				等待(0.016, 无视条件);
				复生(被攻击方);
			End;
		End;
		等待(0.500, 无视条件);
		设置朝向(被攻击方, 被攻击方.FacingDirection, 至地图);
		禁用 调用子程序(ResetBall);
		被攻击方.IsReady = 真;
		If(全局.Pioneer == 事件玩家 && 全局.PioneerLandingPosition == 无);
			全局.PioneerStarted = 真;
		End;
		调用子程序(ResetBall);
		禁用 If(!(事件玩家.FreeMode || 事件玩家.GameComplete));
		禁用 End;
		禁用 小字体信息(事件玩家, 自定义字符串("重生结束"));
	}
}

规则("[子程序] 对开拓者的提醒")
{
	事件
	{
		子程序;
		MessageCall;
	}

	动作
	{
		大字体信息(事件玩家, 自定义字符串("Distance Should Be More Than {0}m​", 2 * 全局.RingRadius));
		等待(3, 无视条件);
	}
}

规则("设置互动键按下状态")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		按钮被按下(全局.Pioneer, 按钮(互动)) == 真;
		全局.PioneerLandingPosition != 无;
	}

	动作
	{
		全局.Pioneer.InteractPressState = 1;
		等待(1, 当为“假”时中止);
		全局.Pioneer.InteractPressState = 2;
	}
}

规则("松开1帧后清除按下状态")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		按钮被按下(全局.Pioneer, 按钮(互动)) == 假;
	}

	动作
	{
		等待(0.016, 无视条件);
		全局.Pioneer.InteractPressState = 0;
	}
}

规则("[热键] 开拓者放置小球")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		全局.PioneerLandingPosition == 无;
		全局.PioneerSpherePosition == 无;
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		事件玩家.pioneer_mode != 自定义字符串("传送点");
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
	}

	动作
	{
		全局.PioneerSpherePosition = 所选位置(事件玩家);
	}
}

规则("[热键] 开拓者确认开拓")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		全局.PioneerLandingPosition != 无;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		事件玩家.InteractPressState == 2;
	}

	动作
	{
		If(事件玩家.UltimateUsed != (0 || 假) || 事件玩家.ultimate_log == 自定义字符串("已关闭"));
			全局.JumpState[事件玩家.Level] = 事件玩家.pioneer_mode == 自定义字符串("传送点");
			事件玩家.InteractPressState = 0;
			全局.CheckpointPosition[事件玩家.Level + 1] = 全局.PioneerLandingPosition;
			全局.SecondaryFireState[事件玩家.Level] = 事件玩家.SecondaryFireUsed;
			全局.UltimateState[事件玩家.Level + 1] = 事件玩家.UltimateUsed;
			全局.SpherePosition[事件玩家.Level + 1] = 全局.PioneerSpherePosition;
			全局.Creator[事件玩家.Level] = 自定义字符串("{0}", 事件玩家);
			全局.PioneerStarted = 假;
			全局.PioneerLandingPosition = 无;
			全局.PioneerSpherePosition = 无;
			全局.Pioneer = 无;
			小字体信息(所有玩家(所有队伍), 自定义字符串("New Level Created"));
			事件玩家.Level += 1;
			调用子程序(SetAbility);
		Else;
			事件玩家.InteractPressState = 0;
			全局.PioneerLandingPosition = 无;
			全局.PioneerSpherePosition = 无;
			调用子程序(Reset);
			If(事件玩家.ultimate_log == 自定义字符串("已开启"));
				事件玩家.ultimate_worked = 真;
			Else;
				事件玩家.ultimate_worked = 假;
			End;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 自定义字符串("Error"));
		End;
	}
}

规则("[热键] 开拓者取消开拓")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		全局.PioneerLandingPosition != 无;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		事件玩家.InteractPressState == 1;
	}

	动作
	{
		设置辅助攻击模式启用(事件玩家, 真);
		可用按钮(事件玩家, 按钮(辅助攻击模式));
		事件玩家.InteractPressState = 0;
		全局.PioneerLandingPosition = 无;
		全局.PioneerSpherePosition = 无;
		调用子程序(Reset);
		If(事件玩家.pioneer_mode == 自定义字符串("超级跳"));
			事件玩家.ultimate_worked = 真;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 自定义字符串("Ultimate Jump Mode"));
		Else If(事件玩家.pioneer_mode == 自定义字符串("正常模式"));
			事件玩家.ultimate_worked = 假;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 自定义字符串("Normal Mode"));
		Else If(事件玩家.pioneer_mode == 自定义字符串("传送点"));
			事件玩家.ultimate_worked = 假;
			事件玩家.UltimateUsed = 假;
			小字体信息(事件玩家, 自定义字符串("Teleport Mode"));
		End;
	}
}

规则("[热键] 删除最后一关")
{
	事件
	{
		持续 - 全局;
	}

	条件
	{
		全局.PioneerModeEnabled == 真;
		按钮被按下(主机玩家, 按钮(跳跃)) == 真;
		按钮被按下(主机玩家, 按钮(蹲下)) == 真;
	}

	动作
	{
		If(数量(全局.CheckpointPosition) != 0);
			等待(0.500, 当为“假”时中止);
			小字体信息(主机玩家, 自定义字符串("Keep Holding Will Remove Last Level​"));
			等待(1.500, 当为“假”时中止);
			修改全局变量(CheckpointPosition, 根据索引从数组中移除, 数量(全局.CheckpointPosition) - 1);
			修改全局变量(Ability1State, 根据索引从数组中移除, 数量(全局.Ability1State) - 1);
			修改全局变量(Ability2State, 根据索引从数组中移除, 数量(全局.Ability2State) - 1);
			修改全局变量(SecondaryFireState, 根据索引从数组中移除, 数量(全局.SecondaryFireState) - 1);
			修改全局变量(UltimateState, 根据索引从数组中移除, 数量(全局.UltimateState) - 1);
			修改全局变量(SpherePosition, 根据索引从数组中移除, 数量(全局.SpherePosition) - 1);
			全局.Pioneer = 最后(全局.Creator);
			修改全局变量(Creator, 根据索引从数组中移除, 数量(全局.Creator) - 1);
			全局.PioneerStarted = 假;
			全局.PioneerLandingPosition = 无;
			If(数量(全局.CheckpointPosition) == 0);
				小字体信息(所有玩家(所有队伍), 自定义字符串("First Level Has Been Removed"));
			Else;
				小字体信息(所有玩家(所有队伍), 自定义字符串("Last Level Has Been Removed"));
			End;
		Else;
			小字体信息(所有玩家(所有队伍), 自定义字符串("Last Level Has Been Removed"));
		End;
	}
}

规则("[热键] 重新开始游戏")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		存活(事件玩家) == 真;
	}

	动作
	{
		事件玩家.FreeMode = 假;
		IF(事件玩家 == 全局.Pioneer);
            全局.Pioneer = 无;
            全局.PioneerLandingPosition = 无;
            全局.PioneerStarted = 假;
        End;
		事件玩家.Level = 0;
		调用子程序(Reset);
	}
}

规则("[热键] 到上一关")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
	}

	动作
	{
		If(事件玩家.Level > 0);
			事件玩家.Level -= 1;
		End;
		While(全局.JumpState[事件玩家.Level] == 自定义字符串("跳跃点"));
			事件玩家.Level -= 1;
		End;
		If(事件玩家 == 全局.Pioneer);
			全局.Pioneer = 无;
			全局.PioneerLandingPosition = 无;
			全局.PioneerStarted = 假;
		End;
		调用子程序(Reset);
	}
}

规则("[热键] 成为开拓者")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.PioneerModeEnabled == 真;
		事件玩家.GameComplete == 真;
		实体存在(全局.Pioneer) == 假;
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		在地面上(事件玩家) == 真;
	}

	动作
	{
		If(全局.DisableContinuousCreation && 事件玩家 == 最后(全局.Creator));
			小字体信息(事件玩家, 自定义字符串("Don't Create New Level Continuously"));
		Else If(数量(全局.CheckpointPosition) == 0);
				If(在地面上(事件玩家) == 假);
					小字体信息(事件玩家, 自定义字符串("Please Create Starting Point On the Ground"));
				Else;
					修改全局变量(CheckpointPosition, 添加至数组, 所选位置(事件玩家));
					修改全局变量(UltimateState, 添加至数组, 假);
					全局.Pioneer = 事件玩家;
				End;
		Else;
			全局.Pioneer = 事件玩家;
		End;
		事件玩家.ultimate_worked = 假;
		事件玩家.ultimate_log = 自定义字符串("已关闭");
		事件玩家.UltimateUsed = 假;
		事件玩家.pioneer_mode = 自定义字符串("正常模式");
		调用子程序(ResetBall);
	}
}

规则("[热键] 死亡观战")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(技能2)) == 真;
	}

	动作
	{
		事件玩家.IsSpectating = !事件玩家.IsSpectating;
		If(事件玩家.IsSpectating);
			关闭游戏预设复生模式(事件玩家);
			击杀(事件玩家, 无);
			可用按钮(事件玩家, 按钮(主要攻击模式));
		Else;
			开启游戏预设复生模式(事件玩家);
			复活(事件玩家);
			调用子程序(ResetBall);
		End;
	}
}

禁用 规则("按下互动时 禁用所有按钮")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
	}

	动作
	{
		禁用 禁用按钮(事件玩家, 按钮(技能1));
		禁用 禁用按钮(事件玩家, 按钮(技能2));
		禁用 禁用按钮(事件玩家, 按钮(蹲下));
		禁用 禁用按钮(事件玩家, 按钮(跳跃));
		禁用 禁用按钮(事件玩家, 按钮(近身攻击));
		禁用 禁用按钮(事件玩家, 按钮(主要攻击模式));
		禁用 禁用按钮(事件玩家, 按钮(辅助攻击模式));
		禁用 禁用按钮(事件玩家, 按钮(终极技能));
		设置状态(事件玩家, 无, 定身, 9999);
	}
}

禁用 规则("没按下互动时 可用所有按钮")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 假;
	}

	动作
	{
		禁用 等待(0.500, 当为“假”时中止);
		禁用 可用按钮(事件玩家, 按钮(技能1));
		禁用 可用按钮(事件玩家, 按钮(技能2));
		禁用 可用按钮(事件玩家, 按钮(蹲下));
		禁用 可用按钮(事件玩家, 按钮(跳跃));
		禁用 可用按钮(事件玩家, 按钮(近身攻击));
		禁用 可用按钮(事件玩家, 按钮(主要攻击模式));
		禁用 可用按钮(事件玩家, 按钮(辅助攻击模式));
		禁用 可用按钮(事件玩家, 按钮(终极技能));
		清除状态(事件玩家, 定身);
	}
}

规则("[多行字符串] 快捷键说明")
{
	事件
	{
		持续 - 全局;
	}

	动作
	{
        创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(
            "Restart          =  Interact + Ultimate"), 左边, 2, 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
        创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(
            "Spectace         =  Interact + E"), 左边, 3, 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
        创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(
            "Invisible Mode   =  Expression"), 左边, 4, 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
        创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(
            "Last CheckPoint  =  Interact + Crouch"), 左边, 5, 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
        创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(
            "Free Mode        =  Interact + Melee"), 左边, 6, 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
        创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(
            "Next CheckPoint  =  Crouch + Ultimate + Reload"), 左边, 7, 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
        创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(
            "Reset Checkpoint =  Press And Hold Ultimate"), 左边, 8, 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
		If(全局.PioneerModeEnabled);
			创建HUD文本(所有玩家(所有队伍), 无, 无, 自定义字符串(
			"Change Create Mode = Reload + Jump"), 左边, 9, 颜色(白色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
		End;
		禁用 创建HUD文本(已过滤的数组(所有玩家(所有队伍), 按钮被按下(当前数组元素, 按钮(互动))), 无, 无, 自定义字符串("仓鼠跑酷地图合集代码：G7V27 | 13GT0R | 9ZDS3 | GYZFZ"), 左边, 2, 颜色(白色), 颜色(白色), 颜色(
			白色), 可见和字符串, 默认可见度);
		禁用 创建HUD文本(已过滤的数组(所有玩家(所有队伍), 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串("自由模式或开拓者传送点模式下按左键可以向前移动"), 无, 无, 顶部, 10, 颜色(红色), 颜色(白色), 颜色(黄色), 可见和字符串,
			默认可见度);
		禁用 创建HUD文本(已过滤的数组(所有玩家(所有队伍), 按钮被按下(当前数组元素, 按钮(互动))), 自定义字符串(
			"Super jump: hook a position where you can accelerate yourself, release the hook before reaching the purple circle, ensure that the speed has reached the maximum (flame effect), and take off instantly in the purple circle.\nNotice:Don't get off the ground before you reached th purple circle! !release the hook before you take off"),
			无, 无, 顶部, 10, 颜色(天蓝色), 颜色(白色), 颜色(黄色), 可见和字符串, 默认可见度);
		禁用 创建HUD文本(已过滤的数组(所有玩家(所有队伍), 按钮被按下(当前数组元素, 按钮(互动))), 无, 自定义字符串("保存点位教学：b站up:Stan_sin\r\n  BV1da4y1W7uA"), 无, 左边, 5, 颜色(白色), 颜色(白色),
			颜色(白色), 可见和字符串, 默认可见度);
	}
}

规则("通关或自由模式下无CD")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 != 全局.Pioneer;
		(事件玩家.GameComplete || 事件玩家.FreeMode) == 真;
		技能冷却时间(事件玩家, 按钮(辅助攻击模式)) + 技能冷却时间(事件玩家, 按钮(技能1)) + 技能冷却时间(事件玩家, 按钮(技能2)) != 0;
	}

	动作
	{
		设置技能冷却(事件玩家, 按钮(辅助攻击模式), 0);
		设置技能冷却(事件玩家, 按钮(技能1), 0);
		设置技能冷却(事件玩家, 按钮(技能2), 0);
	}
}

规则("祝大家玩得愉快~")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(蹲下)) == 真;
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		地图工坊设置开关(自定义字符串("快捷键"), 自定义字符串("跳关"), 真, 0) == 真;
	}

	动作
	{
		事件玩家.Level += 1;
		If(事件玩家.cheat == 0);
			事件玩家.cheat = 事件玩家.Level;
		End;
		If(全局.CheatRecord);
			If(数量(全局.cheat_log) == 0);
				全局.cheat_log[0] = 自定义字符串("{0}玩家{1}采用取巧的方式过了第{2}关", 英雄图标字符串(英雄(破坏球)), 事件玩家, 事件玩家.Level);
			Else;
				修改全局变量(cheat_log, 添加至数组, 自定义字符串("{2}玩家{0}采用取巧的方式过了第{1}关", 事件玩家, 事件玩家.Level, 英雄图标字符串(英雄(破坏球))));
			End;
		End;
		等待(1, 当为“假”时中止);
		While(按钮被按下(事件玩家, 按钮(蹲下)) == 真 && 按钮被按下(事件玩家, 按钮(终极技能)) == 真 && 按钮被按下(事件玩家, 按钮(装填)) == 真);
			事件玩家.Level += 1;
			If(全局.CheatRecord);
				修改全局变量(cheat_log, 添加至数组, 自定义字符串("{2}玩家{0}采用取巧的方式过了第{1}关", 事件玩家, 事件玩家.Level, 英雄图标字符串(英雄(破坏球))));
			End;
			等待(0.100, 无视条件);
		End;
	}
}

规则("[热键]开拓者切换模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家 == 全局.Pioneer;
		按钮被按下(事件玩家, 按钮(装填)) == 真;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		地图工坊设置开关(自定义字符串("快捷键"), 自定义字符串("超级跳模式开拓"), 真, 1) == 真;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) < 全局.RingRadius[1];
	}

	动作
	{
		If(事件玩家.pioneer_mode == 自定义字符串("正常模式"));
			事件玩家.pioneer_mode = 自定义字符串("超级跳");
			事件玩家.ultimate_log = 自定义字符串("已开启");
			事件玩家.ultimate_worked = 真;
			小字体信息(事件玩家, 自定义字符串("Ultimate Jump Mode"));
		Else If(事件玩家.pioneer_mode == 自定义字符串("超级跳"));
			事件玩家.pioneer_mode = 自定义字符串("传送点");
			事件玩家.ultimate_log = 自定义字符串("已关闭");
			事件玩家.ultimate_worked = 假;
			小字体信息(事件玩家, 自定义字符串("Normal Mode"));
			事件玩家.ultimate_info = 空数组;
		Else If(事件玩家.pioneer_mode == 自定义字符串("传送点"));
			事件玩家.pioneer_mode = 自定义字符串("正常模式");
			小字体信息(事件玩家, 自定义字符串("Teleport Mode"));
		End;
	}
}

规则("开拓者超级跳")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_worked == 真;
		禁用 正在使用辅助武器(事件玩家) == 假;
		禁用 相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 6;
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		垂直速度(事件玩家) != 0;
		事件玩家 == 全局.Pioneer;
		水平速度(事件玩家) > 12;
	}

	动作
	{
		If(相距距离(全局.CheckpointPosition[事件玩家.Level], 所选位置(事件玩家)) > 6);
			事件玩家.ultimate_info = 空数组;
			设置辅助攻击模式启用(事件玩家, 假);
			事件玩家.pioneer_outline_countdown = 50;
			事件玩家.UltimateUsed = 所选位置(事件玩家);
			事件玩家.ultimate_worked = 假;
			While(Y方向分量(所选位置(事件玩家)) - Y方向分量(事件玩家.UltimateUsed) <= 3 && 事件玩家.pioneer_outline_countdown >= 1);
				等待(0.020, 无视条件);
				事件玩家.pioneer_outline_countdown -= 1;
			End;
			If(事件玩家.pioneer_outline_countdown < 1);
				施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
				设置状态(事件玩家, 无, 冰冻, 0.500);
				传送(事件玩家, 全局.CheckpointPosition[事件玩家.Level]);
				等待(0.250, 无视条件);
				事件玩家.ultimate_worked = 真;
				事件玩家.UltimateUsed = 假;
				事件玩家.InteractPressState = 0;
				全局.PioneerLandingPosition = 无;
				调用子程序(SetAbility);
				全局.PioneerSpherePosition = 无;
			End;
		Else;
			大字体信息(事件玩家, 自定义字符串("Distance Should Be More Than {0}m​", 6));
		End;
	}
}

规则("防止乱跑")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		禁用 全局.Pioneer != 事件玩家;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.ultimate_worked == 真;
		垂直速度(事件玩家) > 0;
		相距距离(所选位置(事件玩家), 全局.UltimateState[事件玩家.Level + 1]) > 全局.RingRadius;
		事件玩家.GameComplete == 假;
		事件玩家.FreeMode == 假;
	}

	动作
	{
		等待(0.200, 当为“假”时中止);
		设置状态(事件玩家, 无, 定身, 0.500);
		调用子程序(Reset);
		禁用 大字体信息(事件玩家, 自定义字符串("Don't Run About"));
		禁用 If(事件玩家.HintFreq % 5 == 2);
			禁用 小字体信息(事件玩家, 自定义字符串("Press Interact({0}) For Help", 输入绑定字符串(按钮(互动))));
		禁用 End;
	}
}

规则("超级跳")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_worked == 真;
		正在使用辅助武器(事件玩家) == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		按钮被按下(事件玩家, 按钮(跳跃)) == 真;
		垂直速度(事件玩家) > 5;
		禁用 事件玩家.ultimate_info[4] == 真;
		事件玩家 != 全局.Pioneer;
		相距距离(所选位置(事件玩家), 全局.UltimateState[事件玩家.Level + 1]) <= 全局.RingRadius[2];
	}

	动作
	{
		事件玩家.ultimate_worked = 假;
		禁用 设置辅助攻击模式启用(事件玩家, 假);
	}
}

规则("两点一线检测")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) < 事件玩家.ultimate_info[3] + 0.350;
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) > 事件玩家.ultimate_info[3] - 0.350;
		"这是长度"
		相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) <= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]) + 2;
		"这是长度"
		相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) >= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[1]) - 2;
		全局.UltimateState[事件玩家.Level + 1] != (假 || 0);
		事件玩家.FreeMode == 假;
	}

	动作
	{
		事件玩家.ultimate_outline_countdown = 2;
		等待(0.050, 当为“假”时中止);
		如条件为”真“则循环;
	}
}

规则("超出两点一线范围")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_outline_countdown > 0;
		事件玩家.FreeMode == 假;
		事件玩家 != 全局.Pioneer;
	}

	动作
	{
		事件玩家.ultimate_outline_countdown -= 1;
		等待(0.100, 无视条件);
		如条件为”真“则循环;
		If((全局.UltimateState[事件玩家.Level + 1] && 事件玩家.ultimate_worked) != 假);
			设置状态(事件玩家, 无, 定身, 0.500);
			大字体信息(事件玩家, 自定义字符串("不要乱跑"));
			调用子程序(Reset);
		End;
	}
}

规则("超级跳模式圈外低速复位")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		水平速度(事件玩家) <= 12;
		正在使用辅助武器(事件玩家) == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.FreeMode == 假;
		(全局.Pioneer != 事件玩家 ? 事件玩家.GameComplete == 假 : 真) == 真;
		在地面上(事件玩家) == 真;
		(事件玩家.ultimate_worked == 假 ? 全局.UltimateState[事件玩家.Level + 1] != (假 || 0) : 真) == 真;
	}

	动作
	{
		等待(0.016, 当为“假”时中止);
		调用子程序(Reset);
	}
}

规则("超级跳模式出圈禁用抓钩")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.ultimate_worked == 真;
		正在使用辅助武器(事件玩家) == 假;
		事件玩家.FreeMode == 假;
		(全局.Pioneer != 事件玩家 ? 事件玩家.GameComplete == 假 : 真) == 真;
	}

	动作
	{
		设置辅助攻击模式启用(事件玩家, 假);
	}
}

规则("防止起步在空中")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		事件玩家.ultimate_log == 自定义字符串("已开启");
		正在空中(事件玩家) == 真;
		事件玩家 == 全局.Pioneer;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 全局.RingRadius[1];
		事件玩家.FreeMode == 假;
		事件玩家.UltimateUsed == 假;
	}

	动作
	{
		等待(0.200, 无视条件);
		根据条件中止(事件玩家.ultimate_worked == 假);
		小字体信息(事件玩家, 自定义字符串("{0}Stop!", 英雄图标字符串(英雄(破坏球))));
		调用子程序(Reset);
	}
}

规则("开拓者两点一线写入")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer == 事件玩家;
		禁用 事件玩家.ultimate_log == 自定义字符串("已开启");
		禁用 事件玩家.FreeMode == 假;
		事件玩家.ultimate_worked == 真;
		事件玩家.ultimate_info == 空数组;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 5;
	}

	动作
	{
		禁用 If(相距距离(全局.CheckpointPosition[事件玩家.Level], 所选位置(事件玩家)) > 3);
		事件玩家.ultimate_info[0] = 全局.CheckpointPosition[事件玩家.Level];
		事件玩家.ultimate_info[1] = 所选位置(事件玩家);
		事件玩家.ultimate_info[2] = 事件玩家.ultimate_info[0] + 方向(事件玩家.ultimate_info[0], 事件玩家.ultimate_info[1]) * 1000;
		事件玩家.ultimate_info[3] = 与此方向的水平角度(方向(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]));
		禁用 Else;
		禁用 事件玩家.ultimate_info = 空数组;
		禁用 End;
	}
}

规则("开拓者两点一线清除")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.Pioneer == 事件玩家;
		禁用 事件玩家.ultimate_log == 自定义字符串("已开启");
		事件玩家.FreeMode == 假;
		禁用 事件玩家.ultimate_worked == 假;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) <= 5;
	}

	动作
	{
		事件玩家.ultimate_info = 空数组;
	}
}

规则("开拓者两点一线检测")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) < 事件玩家.ultimate_info[3] + 0.300;
		"宽度是最下面那个值"
		与此方向的水平角度(方向(事件玩家.ultimate_info[2], 所选位置(事件玩家))) > 事件玩家.ultimate_info[3] - 0.300;
		"这是长度"
		禁用 相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) <= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[0]) + 2;
		"这是长度"
		禁用 相距距离(事件玩家.ultimate_info[2], 所选位置(事件玩家)) >= 相距距离(事件玩家.ultimate_info[2], 事件玩家.ultimate_info[1]) - 2;
		事件玩家.FreeMode == 假;
		事件玩家.ultimate_log == 自定义字符串("已开启");
		事件玩家 == 全局.Pioneer;
		相距距离(所选位置(事件玩家), 全局.CheckpointPosition[事件玩家.Level]) > 5;
	}

	动作
	{
		禁用 事件玩家.ultimate_outline_countdown = 2;
		禁用 等待(0.050, 当为“假”时中止);
		禁用 如条件为”真“则循环;
		等待(0.500, 无视条件);
		如条件为”真“则循环;
		根据条件中止(事件玩家.ultimate_info == 空数组);
		根据条件中止(事件玩家.ultimate_worked == 假);
		播放效果(事件玩家, 负面状态施加声音, 颜色(白色), 事件玩家, 30);
		大字体信息(事件玩家, 自定义字符串("{0}Please Go Straight on", 英雄图标字符串(英雄(破坏球))));
		事件玩家.ultimate_info = 空数组;
		调用子程序(Reset);
	}
}

规则("当玩家离开比赛")
{
	事件
	{
		玩家离开比赛;
		双方;
		全部;
	}

	动作
	{
		消除效果(事件玩家.BestScore[0]);
		消除效果(事件玩家.BestScore[1]);
		消除地图文本(事件玩家.BestScore[2]);
		消除效果(事件玩家.BestScore[3]);
		消除效果(事件玩家.BestScore[4]);
		消除地图文本(事件玩家.BestScore[5]);
	}
}

规则("【热键】位移")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(主要攻击模式)) == 真;
		(事件玩家.FreeMode || (事件玩家.GameComplete && 全局.Pioneer != 事件玩家) || (全局.Pioneer == 事件玩家 && 事件玩家.pioneer_mode == 自定义字符串("传送点"))) == 真;
		事件玩家.IsSpectating == 假;
		正在使用技能 1(事件玩家) == 真;
	}

	动作
	{
		传送(事件玩家, 所选位置(事件玩家) + 面朝方向(事件玩家) * 5);
		设置引力(事件玩家, 0);
		While(按钮被按下(事件玩家, 按钮(主要攻击模式)));
			传送(事件玩家, 所选位置(事件玩家) + 面朝方向(事件玩家) * 0.500);
			施加推力(事件玩家, 速率(事件玩家) * -1, 0.010, 至地图, 取消相反运动);
			等待(0.010, 当为“真”时重新开始);
		End;
		设置引力(事件玩家, 100);
	}
}

规则("【热键】杀死玩家")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(终极技能)) == 真;
		按钮被按下(事件玩家, 按钮(互动)) == 假;
		按钮被按下(事件玩家, 按钮(蹲下)) == 假;
	}

	动作
	{
		等待(0.500, 当为“假”时中止);
		击杀(事件玩家, 无);
	}
}

规则("变成球")
{
	事件
	{
		子程序;
		ResetBall;
	}

	动作
	{
		While(!正在使用技能 1(事件玩家));
			事件玩家.IsReady = 假;
			设置启用技能 1(事件玩家, 真);
			可用按钮(事件玩家, 按钮(技能1));
			等待(0.250, 无视条件);
			按下按键(事件玩家, 按钮(技能1));
			禁用 小字体信息(事件玩家, 自定义字符串("激活动力铁球"));
			等待直到 (正在使用技能 1(事件玩家), 0.500);
			事件玩家.IsReady = 真;
		End;
		If(!(事件玩家.FreeMode || 事件玩家.GameComplete) || 事件玩家 == 全局.Pioneer);
			禁用按钮(事件玩家, 按钮(技能1));
		End;
		禁用 小字体信息(事件玩家, 自定义字符串("ResetBallEnd"));
	}
}

规则("开关隐身")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用表情交流(事件玩家) == 真;
	}

	动作
	{
		事件玩家.Invisible = !事件玩家.Invisible;
		If(事件玩家.Invisible);
			设置不可见(事件玩家, 全部);
			大字体信息(事件玩家, 自定义字符串("Invisible Enabled"));
		Else;
			大字体信息(事件玩家, 自定义字符串("Invisible Disabled"));
			设置不可见(事件玩家, 全部禁用);
		End;
	}
}

规则("跑酷模式计时开始")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		全局.PioneerModeEnabled == 假;
		事件玩家.FreeMode == 假;
		事件玩家.IsReady == 真;
		事件玩家.GameComplete == 假;
		相距距离(所选位置(事件玩家), 首个(全局.CheckpointPosition)) > 全局.RingRadius;
        已重生(事件玩家) == 真;
	}

	动作
	{
		IF(事件玩家.Level == 0);
            停止追踪玩家变量(事件玩家, ScoreOfThisRound);
            事件玩家.ScoreOfThisRound = 0;
        END;
		追踪玩家变量频率(事件玩家, ScoreOfThisRound, 16200, 1, 全部禁用);
	}
}

规则("[热键] 开关自由模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		按钮被按下(事件玩家, 按钮(互动)) == 真;
		按钮被按下(事件玩家, 按钮(近身攻击)) == 真;
		在地面上(事件玩家) == 真;
	}

	动作
	{
		等待(0.500, 当为“真”时重新开始);
		事件玩家.FreeMode = !事件玩家.FreeMode;
		If(事件玩家.FreeMode);
			修改全局变量(Pioneer, 根据值从数组中移除, 事件玩家);
			小字体信息(事件玩家, 自定义字符串("Free Mode Enabled"));
			调用子程序(SetAbility);
			If(事件玩家.ScoreOfThisRound != 0);
				停止追踪玩家变量(事件玩家, ScoreOfThisRound);
			End;
		Else;
			小字体信息(事件玩家, 自定义字符串("Free Mode Disabled"));
			调用子程序(Reset);
			If(事件玩家.ScoreOfThisRound != 0 && !事件玩家.GameComplete);
				追踪玩家变量频率(事件玩家, ScoreOfThisRound, 16200, 1, 全部禁用);
			End;
		End;
	}
}

规则("设置主要攻击模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用技能 1(事件玩家) == 真;
	}

	动作
	{
		设置主要攻击模式启用(事件玩家, 假);
	}
}

规则("设置主要攻击模式")
{
	事件
	{
		持续 - 每名玩家;
		双方;
		全部;
	}

	条件
	{
		正在使用技能 1(事件玩家) == 假;
		(事件玩家.FreeMode || 事件玩家.GameComplete) == 真;
	}

	动作
	{
		设置主要攻击模式启用(事件玩家, 真);
	}
}


规则("验证玩家数据 ValidationPlayerData")
{
	事件
	{
		子程序;
		ValidationPlayerData;
	}

	动作
	{
		"如果数组中有玩家数据, 则将值赋给事件玩家 checkpoint, time, mistake, cheat"
		If(对任意为”真“(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家)));
			事件玩家.Level = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][1];
			事件玩家.ScoreOfThisRound = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][2];
			事件玩家.mistake = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][3];
			事件玩家.cheat = 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0][4];
			事件玩家.dataIndex = 数组值的索引(全局.PlayersData, 已过滤的数组(全局.PlayersData, 当前数组元素[0] == 自定义字符串("{0}", 事件玩家))[0]) / 5;
		"反之, 将 玩家昵称, checkpoint, time, mistake, cheat 组成数组 添加到末尾索引"
		Else;
			事件玩家.dataIndex = 数量(全局.PlayersData);
			全局.PlayersData[数量(全局.PlayersData)] = 数组(自定义字符串("{0}", 事件玩家), 事件玩家.Level, 事件玩家.ScoreOfThisRound, 事件玩家.mistake, 事件玩家.cheat);
		End;
	}
}

规则("编辑玩家数据 EditPlayerData")
{
	事件
	{
		子程序;
		EditPlayerData;
	}

	动作
	{
		全局.PlayersData[事件玩家.dataIndex] = 事件玩家.Level < 数量(全局.CheckpointPosition) - 1 ? 数组(自定义字符串("{0}", 事件玩家), 事件玩家.Level, 事件玩家.ScoreOfThisRound,
			事件玩家.mistake, 事件玩家.cheat) : 数组(自定义字符串("{0}", 事件玩家), 0, 0, 0, 0);
	}
}
